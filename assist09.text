              |   1|*************************************
              |   2|* COPYRIGHT (C) MOTOROLA, INC. 1979 *
              |   3|*************************************
              |   4|
              |   5|*************************************
              |   6|* THIS IS THE BASE ASSIST09 ROM.
              |   7|* IT MAY RUN WITH OR WITHOUT THE
              |   8|* EXTENSION ROM WHICH
              |   9|* WHEN PRESENT WILL BE AUTOMATICALLY
              |  10|* INCORPORATED BY THE BLDVTR
              |  11|* SUBROUTINE.
              |  12|*************************************
              |  13|
              |  14|*********************************************
              |  15|* GLOBAL MODULE EQUATES
              |  16|********************************************
              |  17|ROMBEG  EQU     $F800           ; ROM START ASSEMBLY ADDRESS
              |  18|RAMOFS  EQU     -$9800          ; ROM OFFSET TO RAM WORK PAGE
              |  19|ROMSIZ  EQU     2048            ; ROM SIZE
              |  20|ROM2OF  EQU     ROMBEG-ROMSIZ   ; START OF EXTENSION ROM
              |  21|ACIA    EQU     $A000           ; DEFAULT ACIA ADDRESS
              |  22|PTM     EQU     $0000           ; DEFAULT PTM ADDRESS
              |  23|DFTCHP  EQU     0               ; DEFAULT CHARACTER PAD COUNT
              |  24|DFTNLP  EQU     5               ; DEFAULT NEW LINE PAD COUNT
              |  25|PROMPT  EQU     '>              ; PROMPT CHARACTER
              |  26|NUMBKP  EQU     8               ; NUMBER OF BREAKPOINTS
              |  27|*********************************************
              |  28|
              |  29|*********************************************
              |  30|* MISCELANEOUS EQUATES
              |  31|*********************************************
              |  32|EOT     EQU     $04             ; END OF TRANSMISSION
              |  33|BELL    EQU     $07             ; BELL CHARACTER
              |  34|LF      EQU     $0A             ; LINE FEED
              |  35|CR      EQU     $0D             ; CARRIAGE RETURN
              |  36|DLE     EQU     $10             ; DATA LINK ESCAPE
              |  37|CAN     EQU     $18             ; CANCEL (CTL-X)
              |  38|
              |  39|* PTM ACCESS DEFINITIONS
              |  40|PTMSTA  EQU     PTM+1           ; READ STATUS REGISTER
              |  41|PTMC13  EQU     PTM             ; CONTROL REGISTERS 1 AND 3
              |  42|PTMC2   EQU     PTM+1           ; CONTROL REGISTER 2
              |  43|PTMTM1  EQU     PTM+2           ; LATCH 1
              |  44|PTMTM2  EQU     PTM+4           ; LATCH 2
              |  45|PTMTM3  EQU     PTM+6           ; LATCH 3
              |  46|SKIP2   EQU     $8C             ; "CMPX #" OPCODE - SKIPS TWO BYTES
              |  47|
              |  48|*******************************************
              |  49|* ASSIST09 MONITOR SWI FUNCTIONS
              |  50|* THE FOLLOWING EQUATES DEFINE FUNCTIONS PROVIDED
              |  51|* BY THE ASSIST09 MONITOR VIA THE SWI INSTRUCTION.
              |  52|******************************************
              |  53|INCHNP  EQU     0               ; INPUT CHAR IN A REG - NO PARITY
              |  54|OUTCH   EQU     1               ; OUTPUT CHAR FROM A REG
              |  55|PDATA1  EQU     2               ; OUTPUT STRING
              |  56|PDATA   EQU     3               ; OUTPUT CR/LF THEN STRING
              |  57|OUT2HS  EQU     4               ; OUTPUT TWO HEX AND SPACE
              |  58|OUT4HS  EQU     5               ; OUTPUT FOUR HEX AND SPACE
              |  59|PCRLF   EQU     6               ; OUTPUT CR/LF
              |  60|SPACE   EQU     7               ; OUTPUT A SPACE
              |  61|MONITR  EQU     8               ; ENTER ASSIST09 MONITOR
              |  62|VCTRSW  EQU     9               ; VECTOR EXAMINE/SWITCH
              |  63|BRKPT   EQU     10              ; USER PROGRAM BREAKPOINT
              |  64|PAUSE   EQU     11              ; TASK PAUSE FUNCTION
              |  65|NUMFUN  EQU     11              ; NUMBER OF AVAILABLE FUNCTIONS
              |  66|
              |  67|* NEXT SUB-CODES FOR ACCESSING THE VECTOR TABLE.
              |  68|* THEY ARE EQUIVALENT TO OFFSETS IN THE TABLE.
              |  69|* RELATIVE POSITIONING MUST BE MAINTAINED
              |  70|
              |  71|.AVTBL  EQU     0               ; ADDRESS OF VECTOR TABLE
              |  72|.CMDL1  EQU     2               ; FIRST COMMAND LIST
              |  73|.RSVD   EQU     4               ; RESERVED HARDWARE VECTOR
              |  74|.SWI3   EQU     6               ; SWI3 ROUTINE
              |  75|.SWI2   EQU     8               ; SWI2 ROUTINE
              |  76|.FIRQ   EQU     10              ; FIRQ ROUTINE
              |  77|.IRQ    EQU     12              ; IRQ ROUTINE
              |  78|.SWI    EQU     14              ; SWI ROUTINE
              |  79|.NMI    EQU     16              ; NMI ROUTINE
              |  80|.RESET  EQU     18              ; RESET ROUTINE
              |  81|.CION   EQU     20              ; CONSOLE ON
              |  82|.CIDTA  EQU     22              ; CONSOLE INPUT DATA
              |  83|.CIOFF  EQU     24              ; CONSOLE INPUT OFF
              |  84|.COON   EQU     26              ; CONSOLE OUTPUT ON
              |  85|.CODTA  EQU     28              ; CONSOLE OUTPUT DATA
              |  86|.COOFF  EQU     30              ; CONSOLE OUTPUT OFF
              |  87|.HSDTA  EQU     32              ; HIGH SPEED PRINTDATA
              |  88|.BSON   EQU     34              ; PUNCH/LOAD ON
              |  89|.BSDTA  EQU     36              ; PUNCH/LOAD DATA
              |  90|.BSOFF  EQU     38              ; PUNCH/LOAD OFF
              |  91|.PAUSE  EQU     40              ; TASK PAUSE ROUTINE
              |  92|.EXPAN  EQU     42              ; EXPRESSION ANALYZER
              |  93|.CMDL2  EQU     44              ; SECOND COMMAND LIST
              |  94|.ACIA   EQU     46              ; ACIA ADDRESS
              |  95|.PAD    EQU     48              ; CHARACTER PAD AND NEW LINE PAD
              |  96|.ECHO   EQU     50              ; ECHO/LOAD AND NULL BKPT FLAG
              |  97|.PTM    EQU     52              ; PTM ADDRESS
              |  98|NUMVTR  EQU     52/2+1          ; NUMBER OF VECTORS
              |  99|HIVTR   EQU     52              ; HIGHEST VECTOR OFFSET
              | 100|
              | 101|******************************************
              | 102|*           WORK AREA
              | 103|* THIS WORK AREA IS ASSIGNED TO THE PAGE ADDRESSED BY
              | 104|* -$1800,PCR FROM THE BASE ADDRESS OF THE ASSIST09
              | 105|* ROM. THE DIRECT PAGE REGISTER DURING MOST ROUTINE
              | 106|* OPERATIONS WILL POINT TO THIS WORK AREA. THE STACK
              | 107|* INITIALLY STARTS UNDER THE RESERVED WORK AREAS AS
              | 108|* DEFINED HEREIN.
              | 109|******************************************
              | 110|WORKPG  EQU     ROMBEG+RAMOFS   ; SETUP DIRECT PAGE ADDRESS
              | 111|        SETDP   WORKPG          ; NOTIFY ASSEMBLER
              | 112|        ORG     WORKPG+256      ; READY PAGE DEFINITIONS
              | 113|
              | 114|* THE FOLLOWING THRU BKPTOP MUST RESIDE IN THIS ORDER
              | 115|* FOR PROPER INITIALIZATION
              | 116|        ORG     *-4
              | 117|PAUSER  EQU     *               ; PAUSE ROUTINE
              | 118|        ORG     *-1
              | 119|SWIBFL  EQU     *               ; BYPASS SWI AS BREAKPOINT FLAG
              | 120|        ORG     *-1
              | 121|BKPTCT  EQU     *               ; BREAKPOINT COUNT
              | 122|        ORG     *-2             ; SLEVEL EQU
              | 123|SLEVEL  EQU     *               ; STACK TRACE LEVEL
              | 124|        ORG     -NUMVTR*2+*
              | 125|VECTAB  EQU     *               ; VECTOR TABLE
              | 126|        ORG     -2*NUMBKP+*
              | 127|BKPTBL  EQU     *               ; BREAKPOINT TABLE
              | 128|        ORG     -2*NUMBKP+*
              | 129|BKPTOP  EQU     *               ; BREAKPOINT OPCODE TABLE
              | 130|        ORG     *-2
              | 131|WINDOW  EQU     *               ; WINDOW
              | 132|        ORG     *-2
              | 133|ADDR    EQU     *               ; ADDRESS POINTER VALUE
              | 134|        ORG     *-1
              | 135|BASEPG  EQU     *               ; BASE PAGE VALUE
              | 136|        ORG     *-2
              | 137|NUMBER  EQU     *               ; BINARY BUILD AREA
              | 138|        ORG     *-2
              | 139|LASTOP  EQU     *               ; LAST OPCODE TRACED
              | 140|        ORG     *-2
              | 141|RSTACK  EQU     *               ; RESET STACK POINTER
              | 142|        ORG     *-2
              | 143|PSTACK  EQU     *               ; COMMAND RECOVERY STACK
              | 144|        ORG     *-2
              | 145|PCNTER  EQU     *               ; LAST PROGRAM COUNTER
              | 146|        ORG     *-2
              | 147|TRACEC  EQU     *               ; TRACE COUNT
              | 148|        ORG     *-1
              | 149|SWICNT  EQU     *               ; TRACE "SWI" NEST LEVEL COUNT
              | 150|        ORG     *-1             ; (MISFLG MUST FOLLOW SWICNT)
              | 151|MISFLG  EQU     *               ; LOAD CMD/THRU BREAKPOINT FLAG
              | 152|        ORG     *-1
              | 153|DELIM   EQU     *               ; EXPRESSION DELIMITER/WORK BYTE
              | 154|        ORG     *-40
              | 155|ROM2WK  EQU     *               ; EXTENSION ROM RESERVED AREA
              | 156|        ORG     *-21
              | 157|TSTACK  EQU     *               ; TEMPORARY STACK HOLD
              | 158|STACK   EQU     *               ; START OF INITIAL STACK
              | 159|
              | 160|* Fill from start of ROM ($C000) to starting location of ROM code
              | 161|*  ($F800) with all ones.
              | 162|
              | 163|        ORG     $C000
C000 FFFFFFFF | 164|        FILL    $FF, ROMBEG-*   ; Fill ROM with FFs until $DB00
C004 FFFFFFFF
C008 FFFFFFFF
C00C FFFFFFFF
C010 FFFFFFFF
C014 FFFFFFFF
C018 FFFFFFFF
C01C FFFFFFFF
C020 FFFFFFFF
C024 FFFFFFFF
C028 FFFFFFFF
C02C FFFFFFFF
C030 FFFFFFFF
C034 FFFFFFFF
C038 FFFFFFFF
C03C FFFFFFFF
C040 FFFFFFFF
C044 FFFFFFFF
C048 FFFFFFFF
C04C FFFFFFFF
C050 FFFFFFFF
C054 FFFFFFFF
C058 FFFFFFFF
C05C FFFFFFFF
C060 FFFFFFFF
C064 FFFFFFFF
C068 FFFFFFFF
C06C FFFFFFFF
C070 FFFFFFFF
C074 FFFFFFFF
C078 FFFFFFFF
C07C FFFFFFFF
C080 FFFFFFFF
C084 FFFFFFFF
C088 FFFFFFFF
C08C FFFFFFFF
C090 FFFFFFFF
C094 FFFFFFFF
C098 FFFFFFFF
C09C FFFFFFFF
C0A0 FFFFFFFF
C0A4 FFFFFFFF
C0A8 FFFFFFFF
C0AC FFFFFFFF
C0B0 FFFFFFFF
C0B4 FFFFFFFF
C0B8 FFFFFFFF
C0BC FFFFFFFF
C0C0 FFFFFFFF
C0C4 FFFFFFFF
C0C8 FFFFFFFF
C0CC FFFFFFFF
C0D0 FFFFFFFF
C0D4 FFFFFFFF
C0D8 FFFFFFFF
C0DC FFFFFFFF
C0E0 FFFFFFFF
C0E4 FFFFFFFF
C0E8 FFFFFFFF
C0EC FFFFFFFF
C0F0 FFFFFFFF
C0F4 FFFFFFFF
C0F8 FFFFFFFF
C0FC FFFFFFFF
C100 FFFFFFFF
C104 FFFFFFFF
C108 FFFFFFFF
C10C FFFFFFFF
C110 FFFFFFFF
C114 FFFFFFFF
C118 FFFFFFFF
C11C FFFFFFFF
C120 FFFFFFFF
C124 FFFFFFFF
C128 FFFFFFFF
C12C FFFFFFFF
C130 FFFFFFFF
C134 FFFFFFFF
C138 FFFFFFFF
C13C FFFFFFFF
C140 FFFFFFFF
C144 FFFFFFFF
C148 FFFFFFFF
C14C FFFFFFFF
C150 FFFFFFFF
C154 FFFFFFFF
C158 FFFFFFFF
C15C FFFFFFFF
C160 FFFFFFFF
C164 FFFFFFFF
C168 FFFFFFFF
C16C FFFFFFFF
C170 FFFFFFFF
C174 FFFFFFFF
C178 FFFFFFFF
C17C FFFFFFFF
C180 FFFFFFFF
C184 FFFFFFFF
C188 FFFFFFFF
C18C FFFFFFFF
C190 FFFFFFFF
C194 FFFFFFFF
C198 FFFFFFFF
C19C FFFFFFFF
C1A0 FFFFFFFF
C1A4 FFFFFFFF
C1A8 FFFFFFFF
C1AC FFFFFFFF
C1B0 FFFFFFFF
C1B4 FFFFFFFF
C1B8 FFFFFFFF
C1BC FFFFFFFF
C1C0 FFFFFFFF
C1C4 FFFFFFFF
C1C8 FFFFFFFF
C1CC FFFFFFFF
C1D0 FFFFFFFF
C1D4 FFFFFFFF
C1D8 FFFFFFFF
C1DC FFFFFFFF
C1E0 FFFFFFFF
C1E4 FFFFFFFF
C1E8 FFFFFFFF
C1EC FFFFFFFF
C1F0 FFFFFFFF
C1F4 FFFFFFFF
C1F8 FFFFFFFF
C1FC FFFFFFFF
C200 FFFFFFFF
C204 FFFFFFFF
C208 FFFFFFFF
C20C FFFFFFFF
C210 FFFFFFFF
C214 FFFFFFFF
C218 FFFFFFFF
C21C FFFFFFFF
C220 FFFFFFFF
C224 FFFFFFFF
C228 FFFFFFFF
C22C FFFFFFFF
C230 FFFFFFFF
C234 FFFFFFFF
C238 FFFFFFFF
C23C FFFFFFFF
C240 FFFFFFFF
C244 FFFFFFFF
C248 FFFFFFFF
C24C FFFFFFFF
C250 FFFFFFFF
C254 FFFFFFFF
C258 FFFFFFFF
C25C FFFFFFFF
C260 FFFFFFFF
C264 FFFFFFFF
C268 FFFFFFFF
C26C FFFFFFFF
C270 FFFFFFFF
C274 FFFFFFFF
C278 FFFFFFFF
C27C FFFFFFFF
C280 FFFFFFFF
C284 FFFFFFFF
C288 FFFFFFFF
C28C FFFFFFFF
C290 FFFFFFFF
C294 FFFFFFFF
C298 FFFFFFFF
C29C FFFFFFFF
C2A0 FFFFFFFF
C2A4 FFFFFFFF
C2A8 FFFFFFFF
C2AC FFFFFFFF
C2B0 FFFFFFFF
C2B4 FFFFFFFF
C2B8 FFFFFFFF
C2BC FFFFFFFF
C2C0 FFFFFFFF
C2C4 FFFFFFFF
C2C8 FFFFFFFF
C2CC FFFFFFFF
C2D0 FFFFFFFF
C2D4 FFFFFFFF
C2D8 FFFFFFFF
C2DC FFFFFFFF
C2E0 FFFFFFFF
C2E4 FFFFFFFF
C2E8 FFFFFFFF
C2EC FFFFFFFF
C2F0 FFFFFFFF
C2F4 FFFFFFFF
C2F8 FFFFFFFF
C2FC FFFFFFFF
C300 FFFFFFFF
C304 FFFFFFFF
C308 FFFFFFFF
C30C FFFFFFFF
C310 FFFFFFFF
C314 FFFFFFFF
C318 FFFFFFFF
C31C FFFFFFFF
C320 FFFFFFFF
C324 FFFFFFFF
C328 FFFFFFFF
C32C FFFFFFFF
C330 FFFFFFFF
C334 FFFFFFFF
C338 FFFFFFFF
C33C FFFFFFFF
C340 FFFFFFFF
C344 FFFFFFFF
C348 FFFFFFFF
C34C FFFFFFFF
C350 FFFFFFFF
C354 FFFFFFFF
C358 FFFFFFFF
C35C FFFFFFFF
C360 FFFFFFFF
C364 FFFFFFFF
C368 FFFFFFFF
C36C FFFFFFFF
C370 FFFFFFFF
C374 FFFFFFFF
C378 FFFFFFFF
C37C FFFFFFFF
C380 FFFFFFFF
C384 FFFFFFFF
C388 FFFFFFFF
C38C FFFFFFFF
C390 FFFFFFFF
C394 FFFFFFFF
C398 FFFFFFFF
C39C FFFFFFFF
C3A0 FFFFFFFF
C3A4 FFFFFFFF
C3A8 FFFFFFFF
C3AC FFFFFFFF
C3B0 FFFFFFFF
C3B4 FFFFFFFF
C3B8 FFFFFFFF
C3BC FFFFFFFF
C3C0 FFFFFFFF
C3C4 FFFFFFFF
C3C8 FFFFFFFF
C3CC FFFFFFFF
C3D0 FFFFFFFF
C3D4 FFFFFFFF
C3D8 FFFFFFFF
C3DC FFFFFFFF
C3E0 FFFFFFFF
C3E4 FFFFFFFF
C3E8 FFFFFFFF
C3EC FFFFFFFF
C3F0 FFFFFFFF
C3F4 FFFFFFFF
C3F8 FFFFFFFF
C3FC FFFFFFFF
C400 FFFFFFFF
C404 FFFFFFFF
C408 FFFFFFFF
C40C FFFFFFFF
C410 FFFFFFFF
C414 FFFFFFFF
C418 FFFFFFFF
C41C FFFFFFFF
C420 FFFFFFFF
C424 FFFFFFFF
C428 FFFFFFFF
C42C FFFFFFFF
C430 FFFFFFFF
C434 FFFFFFFF
C438 FFFFFFFF
C43C FFFFFFFF
C440 FFFFFFFF
C444 FFFFFFFF
C448 FFFFFFFF
C44C FFFFFFFF
C450 FFFFFFFF
C454 FFFFFFFF
C458 FFFFFFFF
C45C FFFFFFFF
C460 FFFFFFFF
C464 FFFFFFFF
C468 FFFFFFFF
C46C FFFFFFFF
C470 FFFFFFFF
C474 FFFFFFFF
C478 FFFFFFFF
C47C FFFFFFFF
C480 FFFFFFFF
C484 FFFFFFFF
C488 FFFFFFFF
C48C FFFFFFFF
C490 FFFFFFFF
C494 FFFFFFFF
C498 FFFFFFFF
C49C FFFFFFFF
C4A0 FFFFFFFF
C4A4 FFFFFFFF
C4A8 FFFFFFFF
C4AC FFFFFFFF
C4B0 FFFFFFFF
C4B4 FFFFFFFF
C4B8 FFFFFFFF
C4BC FFFFFFFF
C4C0 FFFFFFFF
C4C4 FFFFFFFF
C4C8 FFFFFFFF
C4CC FFFFFFFF
C4D0 FFFFFFFF
C4D4 FFFFFFFF
C4D8 FFFFFFFF
C4DC FFFFFFFF
C4E0 FFFFFFFF
C4E4 FFFFFFFF
C4E8 FFFFFFFF
C4EC FFFFFFFF
C4F0 FFFFFFFF
C4F4 FFFFFFFF
C4F8 FFFFFFFF
C4FC FFFFFFFF
C500 FFFFFFFF
C504 FFFFFFFF
C508 FFFFFFFF
C50C FFFFFFFF
C510 FFFFFFFF
C514 FFFFFFFF
C518 FFFFFFFF
C51C FFFFFFFF
C520 FFFFFFFF
C524 FFFFFFFF
C528 FFFFFFFF
C52C FFFFFFFF
C530 FFFFFFFF
C534 FFFFFFFF
C538 FFFFFFFF
C53C FFFFFFFF
C540 FFFFFFFF
C544 FFFFFFFF
C548 FFFFFFFF
C54C FFFFFFFF
C550 FFFFFFFF
C554 FFFFFFFF
C558 FFFFFFFF
C55C FFFFFFFF
C560 FFFFFFFF
C564 FFFFFFFF
C568 FFFFFFFF
C56C FFFFFFFF
C570 FFFFFFFF
C574 FFFFFFFF
C578 FFFFFFFF
C57C FFFFFFFF
C580 FFFFFFFF
C584 FFFFFFFF
C588 FFFFFFFF
C58C FFFFFFFF
C590 FFFFFFFF
C594 FFFFFFFF
C598 FFFFFFFF
C59C FFFFFFFF
C5A0 FFFFFFFF
C5A4 FFFFFFFF
C5A8 FFFFFFFF
C5AC FFFFFFFF
C5B0 FFFFFFFF
C5B4 FFFFFFFF
C5B8 FFFFFFFF
C5BC FFFFFFFF
C5C0 FFFFFFFF
C5C4 FFFFFFFF
C5C8 FFFFFFFF
C5CC FFFFFFFF
C5D0 FFFFFFFF
C5D4 FFFFFFFF
C5D8 FFFFFFFF
C5DC FFFFFFFF
C5E0 FFFFFFFF
C5E4 FFFFFFFF
C5E8 FFFFFFFF
C5EC FFFFFFFF
C5F0 FFFFFFFF
C5F4 FFFFFFFF
C5F8 FFFFFFFF
C5FC FFFFFFFF
C600 FFFFFFFF
C604 FFFFFFFF
C608 FFFFFFFF
C60C FFFFFFFF
C610 FFFFFFFF
C614 FFFFFFFF
C618 FFFFFFFF
C61C FFFFFFFF
C620 FFFFFFFF
C624 FFFFFFFF
C628 FFFFFFFF
C62C FFFFFFFF
C630 FFFFFFFF
C634 FFFFFFFF
C638 FFFFFFFF
C63C FFFFFFFF
C640 FFFFFFFF
C644 FFFFFFFF
C648 FFFFFFFF
C64C FFFFFFFF
C650 FFFFFFFF
C654 FFFFFFFF
C658 FFFFFFFF
C65C FFFFFFFF
C660 FFFFFFFF
C664 FFFFFFFF
C668 FFFFFFFF
C66C FFFFFFFF
C670 FFFFFFFF
C674 FFFFFFFF
C678 FFFFFFFF
C67C FFFFFFFF
C680 FFFFFFFF
C684 FFFFFFFF
C688 FFFFFFFF
C68C FFFFFFFF
C690 FFFFFFFF
C694 FFFFFFFF
C698 FFFFFFFF
C69C FFFFFFFF
C6A0 FFFFFFFF
C6A4 FFFFFFFF
C6A8 FFFFFFFF
C6AC FFFFFFFF
C6B0 FFFFFFFF
C6B4 FFFFFFFF
C6B8 FFFFFFFF
C6BC FFFFFFFF
C6C0 FFFFFFFF
C6C4 FFFFFFFF
C6C8 FFFFFFFF
C6CC FFFFFFFF
C6D0 FFFFFFFF
C6D4 FFFFFFFF
C6D8 FFFFFFFF
C6DC FFFFFFFF
C6E0 FFFFFFFF
C6E4 FFFFFFFF
C6E8 FFFFFFFF
C6EC FFFFFFFF
C6F0 FFFFFFFF
C6F4 FFFFFFFF
C6F8 FFFFFFFF
C6FC FFFFFFFF
C700 FFFFFFFF
C704 FFFFFFFF
C708 FFFFFFFF
C70C FFFFFFFF
C710 FFFFFFFF
C714 FFFFFFFF
C718 FFFFFFFF
C71C FFFFFFFF
C720 FFFFFFFF
C724 FFFFFFFF
C728 FFFFFFFF
C72C FFFFFFFF
C730 FFFFFFFF
C734 FFFFFFFF
C738 FFFFFFFF
C73C FFFFFFFF
C740 FFFFFFFF
C744 FFFFFFFF
C748 FFFFFFFF
C74C FFFFFFFF
C750 FFFFFFFF
C754 FFFFFFFF
C758 FFFFFFFF
C75C FFFFFFFF
C760 FFFFFFFF
C764 FFFFFFFF
C768 FFFFFFFF
C76C FFFFFFFF
C770 FFFFFFFF
C774 FFFFFFFF
C778 FFFFFFFF
C77C FFFFFFFF
C780 FFFFFFFF
C784 FFFFFFFF
C788 FFFFFFFF
C78C FFFFFFFF
C790 FFFFFFFF
C794 FFFFFFFF
C798 FFFFFFFF
C79C FFFFFFFF
C7A0 FFFFFFFF
C7A4 FFFFFFFF
C7A8 FFFFFFFF
C7AC FFFFFFFF
C7B0 FFFFFFFF
C7B4 FFFFFFFF
C7B8 FFFFFFFF
C7BC FFFFFFFF
C7C0 FFFFFFFF
C7C4 FFFFFFFF
C7C8 FFFFFFFF
C7CC FFFFFFFF
C7D0 FFFFFFFF
C7D4 FFFFFFFF
C7D8 FFFFFFFF
C7DC FFFFFFFF
C7E0 FFFFFFFF
C7E4 FFFFFFFF
C7E8 FFFFFFFF
C7EC FFFFFFFF
C7F0 FFFFFFFF
C7F4 FFFFFFFF
C7F8 FFFFFFFF
C7FC FFFFFFFF
C800 FFFFFFFF
C804 FFFFFFFF
C808 FFFFFFFF
C80C FFFFFFFF
C810 FFFFFFFF
C814 FFFFFFFF
C818 FFFFFFFF
C81C FFFFFFFF
C820 FFFFFFFF
C824 FFFFFFFF
C828 FFFFFFFF
C82C FFFFFFFF
C830 FFFFFFFF
C834 FFFFFFFF
C838 FFFFFFFF
C83C FFFFFFFF
C840 FFFFFFFF
C844 FFFFFFFF
C848 FFFFFFFF
C84C FFFFFFFF
C850 FFFFFFFF
C854 FFFFFFFF
C858 FFFFFFFF
C85C FFFFFFFF
C860 FFFFFFFF
C864 FFFFFFFF
C868 FFFFFFFF
C86C FFFFFFFF
C870 FFFFFFFF
C874 FFFFFFFF
C878 FFFFFFFF
C87C FFFFFFFF
C880 FFFFFFFF
C884 FFFFFFFF
C888 FFFFFFFF
C88C FFFFFFFF
C890 FFFFFFFF
C894 FFFFFFFF
C898 FFFFFFFF
C89C FFFFFFFF
C8A0 FFFFFFFF
C8A4 FFFFFFFF
C8A8 FFFFFFFF
C8AC FFFFFFFF
C8B0 FFFFFFFF
C8B4 FFFFFFFF
C8B8 FFFFFFFF
C8BC FFFFFFFF
C8C0 FFFFFFFF
C8C4 FFFFFFFF
C8C8 FFFFFFFF
C8CC FFFFFFFF
C8D0 FFFFFFFF
C8D4 FFFFFFFF
C8D8 FFFFFFFF
C8DC FFFFFFFF
C8E0 FFFFFFFF
C8E4 FFFFFFFF
C8E8 FFFFFFFF
C8EC FFFFFFFF
C8F0 FFFFFFFF
C8F4 FFFFFFFF
C8F8 FFFFFFFF
C8FC FFFFFFFF
C900 FFFFFFFF
C904 FFFFFFFF
C908 FFFFFFFF
C90C FFFFFFFF
C910 FFFFFFFF
C914 FFFFFFFF
C918 FFFFFFFF
C91C FFFFFFFF
C920 FFFFFFFF
C924 FFFFFFFF
C928 FFFFFFFF
C92C FFFFFFFF
C930 FFFFFFFF
C934 FFFFFFFF
C938 FFFFFFFF
C93C FFFFFFFF
C940 FFFFFFFF
C944 FFFFFFFF
C948 FFFFFFFF
C94C FFFFFFFF
C950 FFFFFFFF
C954 FFFFFFFF
C958 FFFFFFFF
C95C FFFFFFFF
C960 FFFFFFFF
C964 FFFFFFFF
C968 FFFFFFFF
C96C FFFFFFFF
C970 FFFFFFFF
C974 FFFFFFFF
C978 FFFFFFFF
C97C FFFFFFFF
C980 FFFFFFFF
C984 FFFFFFFF
C988 FFFFFFFF
C98C FFFFFFFF
C990 FFFFFFFF
C994 FFFFFFFF
C998 FFFFFFFF
C99C FFFFFFFF
C9A0 FFFFFFFF
C9A4 FFFFFFFF
C9A8 FFFFFFFF
C9AC FFFFFFFF
C9B0 FFFFFFFF
C9B4 FFFFFFFF
C9B8 FFFFFFFF
C9BC FFFFFFFF
C9C0 FFFFFFFF
C9C4 FFFFFFFF
C9C8 FFFFFFFF
C9CC FFFFFFFF
C9D0 FFFFFFFF
C9D4 FFFFFFFF
C9D8 FFFFFFFF
C9DC FFFFFFFF
C9E0 FFFFFFFF
C9E4 FFFFFFFF
C9E8 FFFFFFFF
C9EC FFFFFFFF
C9F0 FFFFFFFF
C9F4 FFFFFFFF
C9F8 FFFFFFFF
C9FC FFFFFFFF
CA00 FFFFFFFF
CA04 FFFFFFFF
CA08 FFFFFFFF
CA0C FFFFFFFF
CA10 FFFFFFFF
CA14 FFFFFFFF
CA18 FFFFFFFF
CA1C FFFFFFFF
CA20 FFFFFFFF
CA24 FFFFFFFF
CA28 FFFFFFFF
CA2C FFFFFFFF
CA30 FFFFFFFF
CA34 FFFFFFFF
CA38 FFFFFFFF
CA3C FFFFFFFF
CA40 FFFFFFFF
CA44 FFFFFFFF
CA48 FFFFFFFF
CA4C FFFFFFFF
CA50 FFFFFFFF
CA54 FFFFFFFF
CA58 FFFFFFFF
CA5C FFFFFFFF
CA60 FFFFFFFF
CA64 FFFFFFFF
CA68 FFFFFFFF
CA6C FFFFFFFF
CA70 FFFFFFFF
CA74 FFFFFFFF
CA78 FFFFFFFF
CA7C FFFFFFFF
CA80 FFFFFFFF
CA84 FFFFFFFF
CA88 FFFFFFFF
CA8C FFFFFFFF
CA90 FFFFFFFF
CA94 FFFFFFFF
CA98 FFFFFFFF
CA9C FFFFFFFF
CAA0 FFFFFFFF
CAA4 FFFFFFFF
CAA8 FFFFFFFF
CAAC FFFFFFFF
CAB0 FFFFFFFF
CAB4 FFFFFFFF
CAB8 FFFFFFFF
CABC FFFFFFFF
CAC0 FFFFFFFF
CAC4 FFFFFFFF
CAC8 FFFFFFFF
CACC FFFFFFFF
CAD0 FFFFFFFF
CAD4 FFFFFFFF
CAD8 FFFFFFFF
CADC FFFFFFFF
CAE0 FFFFFFFF
CAE4 FFFFFFFF
CAE8 FFFFFFFF
CAEC FFFFFFFF
CAF0 FFFFFFFF
CAF4 FFFFFFFF
CAF8 FFFFFFFF
CAFC FFFFFFFF
CB00 FFFFFFFF
CB04 FFFFFFFF
CB08 FFFFFFFF
CB0C FFFFFFFF
CB10 FFFFFFFF
CB14 FFFFFFFF
CB18 FFFFFFFF
CB1C FFFFFFFF
CB20 FFFFFFFF
CB24 FFFFFFFF
CB28 FFFFFFFF
CB2C FFFFFFFF
CB30 FFFFFFFF
CB34 FFFFFFFF
CB38 FFFFFFFF
CB3C FFFFFFFF
CB40 FFFFFFFF
CB44 FFFFFFFF
CB48 FFFFFFFF
CB4C FFFFFFFF
CB50 FFFFFFFF
CB54 FFFFFFFF
CB58 FFFFFFFF
CB5C FFFFFFFF
CB60 FFFFFFFF
CB64 FFFFFFFF
CB68 FFFFFFFF
CB6C FFFFFFFF
CB70 FFFFFFFF
CB74 FFFFFFFF
CB78 FFFFFFFF
CB7C FFFFFFFF
CB80 FFFFFFFF
CB84 FFFFFFFF
CB88 FFFFFFFF
CB8C FFFFFFFF
CB90 FFFFFFFF
CB94 FFFFFFFF
CB98 FFFFFFFF
CB9C FFFFFFFF
CBA0 FFFFFFFF
CBA4 FFFFFFFF
CBA8 FFFFFFFF
CBAC FFFFFFFF
CBB0 FFFFFFFF
CBB4 FFFFFFFF
CBB8 FFFFFFFF
CBBC FFFFFFFF
CBC0 FFFFFFFF
CBC4 FFFFFFFF
CBC8 FFFFFFFF
CBCC FFFFFFFF
CBD0 FFFFFFFF
CBD4 FFFFFFFF
CBD8 FFFFFFFF
CBDC FFFFFFFF
CBE0 FFFFFFFF
CBE4 FFFFFFFF
CBE8 FFFFFFFF
CBEC FFFFFFFF
CBF0 FFFFFFFF
CBF4 FFFFFFFF
CBF8 FFFFFFFF
CBFC FFFFFFFF
CC00 FFFFFFFF
CC04 FFFFFFFF
CC08 FFFFFFFF
CC0C FFFFFFFF
CC10 FFFFFFFF
CC14 FFFFFFFF
CC18 FFFFFFFF
CC1C FFFFFFFF
CC20 FFFFFFFF
CC24 FFFFFFFF
CC28 FFFFFFFF
CC2C FFFFFFFF
CC30 FFFFFFFF
CC34 FFFFFFFF
CC38 FFFFFFFF
CC3C FFFFFFFF
CC40 FFFFFFFF
CC44 FFFFFFFF
CC48 FFFFFFFF
CC4C FFFFFFFF
CC50 FFFFFFFF
CC54 FFFFFFFF
CC58 FFFFFFFF
CC5C FFFFFFFF
CC60 FFFFFFFF
CC64 FFFFFFFF
CC68 FFFFFFFF
CC6C FFFFFFFF
CC70 FFFFFFFF
CC74 FFFFFFFF
CC78 FFFFFFFF
CC7C FFFFFFFF
CC80 FFFFFFFF
CC84 FFFFFFFF
CC88 FFFFFFFF
CC8C FFFFFFFF
CC90 FFFFFFFF
CC94 FFFFFFFF
CC98 FFFFFFFF
CC9C FFFFFFFF
CCA0 FFFFFFFF
CCA4 FFFFFFFF
CCA8 FFFFFFFF
CCAC FFFFFFFF
CCB0 FFFFFFFF
CCB4 FFFFFFFF
CCB8 FFFFFFFF
CCBC FFFFFFFF
CCC0 FFFFFFFF
CCC4 FFFFFFFF
CCC8 FFFFFFFF
CCCC FFFFFFFF
CCD0 FFFFFFFF
CCD4 FFFFFFFF
CCD8 FFFFFFFF
CCDC FFFFFFFF
CCE0 FFFFFFFF
CCE4 FFFFFFFF
CCE8 FFFFFFFF
CCEC FFFFFFFF
CCF0 FFFFFFFF
CCF4 FFFFFFFF
CCF8 FFFFFFFF
CCFC FFFFFFFF
CD00 FFFFFFFF
CD04 FFFFFFFF
CD08 FFFFFFFF
CD0C FFFFFFFF
CD10 FFFFFFFF
CD14 FFFFFFFF
CD18 FFFFFFFF
CD1C FFFFFFFF
CD20 FFFFFFFF
CD24 FFFFFFFF
CD28 FFFFFFFF
CD2C FFFFFFFF
CD30 FFFFFFFF
CD34 FFFFFFFF
CD38 FFFFFFFF
CD3C FFFFFFFF
CD40 FFFFFFFF
CD44 FFFFFFFF
CD48 FFFFFFFF
CD4C FFFFFFFF
CD50 FFFFFFFF
CD54 FFFFFFFF
CD58 FFFFFFFF
CD5C FFFFFFFF
CD60 FFFFFFFF
CD64 FFFFFFFF
CD68 FFFFFFFF
CD6C FFFFFFFF
CD70 FFFFFFFF
CD74 FFFFFFFF
CD78 FFFFFFFF
CD7C FFFFFFFF
CD80 FFFFFFFF
CD84 FFFFFFFF
CD88 FFFFFFFF
CD8C FFFFFFFF
CD90 FFFFFFFF
CD94 FFFFFFFF
CD98 FFFFFFFF
CD9C FFFFFFFF
CDA0 FFFFFFFF
CDA4 FFFFFFFF
CDA8 FFFFFFFF
CDAC FFFFFFFF
CDB0 FFFFFFFF
CDB4 FFFFFFFF
CDB8 FFFFFFFF
CDBC FFFFFFFF
CDC0 FFFFFFFF
CDC4 FFFFFFFF
CDC8 FFFFFFFF
CDCC FFFFFFFF
CDD0 FFFFFFFF
CDD4 FFFFFFFF
CDD8 FFFFFFFF
CDDC FFFFFFFF
CDE0 FFFFFFFF
CDE4 FFFFFFFF
CDE8 FFFFFFFF
CDEC FFFFFFFF
CDF0 FFFFFFFF
CDF4 FFFFFFFF
CDF8 FFFFFFFF
CDFC FFFFFFFF
CE00 FFFFFFFF
CE04 FFFFFFFF
CE08 FFFFFFFF
CE0C FFFFFFFF
CE10 FFFFFFFF
CE14 FFFFFFFF
CE18 FFFFFFFF
CE1C FFFFFFFF
CE20 FFFFFFFF
CE24 FFFFFFFF
CE28 FFFFFFFF
CE2C FFFFFFFF
CE30 FFFFFFFF
CE34 FFFFFFFF
CE38 FFFFFFFF
CE3C FFFFFFFF
CE40 FFFFFFFF
CE44 FFFFFFFF
CE48 FFFFFFFF
CE4C FFFFFFFF
CE50 FFFFFFFF
CE54 FFFFFFFF
CE58 FFFFFFFF
CE5C FFFFFFFF
CE60 FFFFFFFF
CE64 FFFFFFFF
CE68 FFFFFFFF
CE6C FFFFFFFF
CE70 FFFFFFFF
CE74 FFFFFFFF
CE78 FFFFFFFF
CE7C FFFFFFFF
CE80 FFFFFFFF
CE84 FFFFFFFF
CE88 FFFFFFFF
CE8C FFFFFFFF
CE90 FFFFFFFF
CE94 FFFFFFFF
CE98 FFFFFFFF
CE9C FFFFFFFF
CEA0 FFFFFFFF
CEA4 FFFFFFFF
CEA8 FFFFFFFF
CEAC FFFFFFFF
CEB0 FFFFFFFF
CEB4 FFFFFFFF
CEB8 FFFFFFFF
CEBC FFFFFFFF
CEC0 FFFFFFFF
CEC4 FFFFFFFF
CEC8 FFFFFFFF
CECC FFFFFFFF
CED0 FFFFFFFF
CED4 FFFFFFFF
CED8 FFFFFFFF
CEDC FFFFFFFF
CEE0 FFFFFFFF
CEE4 FFFFFFFF
CEE8 FFFFFFFF
CEEC FFFFFFFF
CEF0 FFFFFFFF
CEF4 FFFFFFFF
CEF8 FFFFFFFF
CEFC FFFFFFFF
CF00 FFFFFFFF
CF04 FFFFFFFF
CF08 FFFFFFFF
CF0C FFFFFFFF
CF10 FFFFFFFF
CF14 FFFFFFFF
CF18 FFFFFFFF
CF1C FFFFFFFF
CF20 FFFFFFFF
CF24 FFFFFFFF
CF28 FFFFFFFF
CF2C FFFFFFFF
CF30 FFFFFFFF
CF34 FFFFFFFF
CF38 FFFFFFFF
CF3C FFFFFFFF
CF40 FFFFFFFF
CF44 FFFFFFFF
CF48 FFFFFFFF
CF4C FFFFFFFF
CF50 FFFFFFFF
CF54 FFFFFFFF
CF58 FFFFFFFF
CF5C FFFFFFFF
CF60 FFFFFFFF
CF64 FFFFFFFF
CF68 FFFFFFFF
CF6C FFFFFFFF
CF70 FFFFFFFF
CF74 FFFFFFFF
CF78 FFFFFFFF
CF7C FFFFFFFF
CF80 FFFFFFFF
CF84 FFFFFFFF
CF88 FFFFFFFF
CF8C FFFFFFFF
CF90 FFFFFFFF
CF94 FFFFFFFF
CF98 FFFFFFFF
CF9C FFFFFFFF
CFA0 FFFFFFFF
CFA4 FFFFFFFF
CFA8 FFFFFFFF
CFAC FFFFFFFF
CFB0 FFFFFFFF
CFB4 FFFFFFFF
CFB8 FFFFFFFF
CFBC FFFFFFFF
CFC0 FFFFFFFF
CFC4 FFFFFFFF
CFC8 FFFFFFFF
CFCC FFFFFFFF
CFD0 FFFFFFFF
CFD4 FFFFFFFF
CFD8 FFFFFFFF
CFDC FFFFFFFF
CFE0 FFFFFFFF
CFE4 FFFFFFFF
CFE8 FFFFFFFF
CFEC FFFFFFFF
CFF0 FFFFFFFF
CFF4 FFFFFFFF
CFF8 FFFFFFFF
CFFC FFFFFFFF
D000 FFFFFFFF
D004 FFFFFFFF
D008 FFFFFFFF
D00C FFFFFFFF
D010 FFFFFFFF
D014 FFFFFFFF
D018 FFFFFFFF
D01C FFFFFFFF
D020 FFFFFFFF
D024 FFFFFFFF
D028 FFFFFFFF
D02C FFFFFFFF
D030 FFFFFFFF
D034 FFFFFFFF
D038 FFFFFFFF
D03C FFFFFFFF
D040 FFFFFFFF
D044 FFFFFFFF
D048 FFFFFFFF
D04C FFFFFFFF
D050 FFFFFFFF
D054 FFFFFFFF
D058 FFFFFFFF
D05C FFFFFFFF
D060 FFFFFFFF
D064 FFFFFFFF
D068 FFFFFFFF
D06C FFFFFFFF
D070 FFFFFFFF
D074 FFFFFFFF
D078 FFFFFFFF
D07C FFFFFFFF
D080 FFFFFFFF
D084 FFFFFFFF
D088 FFFFFFFF
D08C FFFFFFFF
D090 FFFFFFFF
D094 FFFFFFFF
D098 FFFFFFFF
D09C FFFFFFFF
D0A0 FFFFFFFF
D0A4 FFFFFFFF
D0A8 FFFFFFFF
D0AC FFFFFFFF
D0B0 FFFFFFFF
D0B4 FFFFFFFF
D0B8 FFFFFFFF
D0BC FFFFFFFF
D0C0 FFFFFFFF
D0C4 FFFFFFFF
D0C8 FFFFFFFF
D0CC FFFFFFFF
D0D0 FFFFFFFF
D0D4 FFFFFFFF
D0D8 FFFFFFFF
D0DC FFFFFFFF
D0E0 FFFFFFFF
D0E4 FFFFFFFF
D0E8 FFFFFFFF
D0EC FFFFFFFF
D0F0 FFFFFFFF
D0F4 FFFFFFFF
D0F8 FFFFFFFF
D0FC FFFFFFFF
D100 FFFFFFFF
D104 FFFFFFFF
D108 FFFFFFFF
D10C FFFFFFFF
D110 FFFFFFFF
D114 FFFFFFFF
D118 FFFFFFFF
D11C FFFFFFFF
D120 FFFFFFFF
D124 FFFFFFFF
D128 FFFFFFFF
D12C FFFFFFFF
D130 FFFFFFFF
D134 FFFFFFFF
D138 FFFFFFFF
D13C FFFFFFFF
D140 FFFFFFFF
D144 FFFFFFFF
D148 FFFFFFFF
D14C FFFFFFFF
D150 FFFFFFFF
D154 FFFFFFFF
D158 FFFFFFFF
D15C FFFFFFFF
D160 FFFFFFFF
D164 FFFFFFFF
D168 FFFFFFFF
D16C FFFFFFFF
D170 FFFFFFFF
D174 FFFFFFFF
D178 FFFFFFFF
D17C FFFFFFFF
D180 FFFFFFFF
D184 FFFFFFFF
D188 FFFFFFFF
D18C FFFFFFFF
D190 FFFFFFFF
D194 FFFFFFFF
D198 FFFFFFFF
D19C FFFFFFFF
D1A0 FFFFFFFF
D1A4 FFFFFFFF
D1A8 FFFFFFFF
D1AC FFFFFFFF
D1B0 FFFFFFFF
D1B4 FFFFFFFF
D1B8 FFFFFFFF
D1BC FFFFFFFF
D1C0 FFFFFFFF
D1C4 FFFFFFFF
D1C8 FFFFFFFF
D1CC FFFFFFFF
D1D0 FFFFFFFF
D1D4 FFFFFFFF
D1D8 FFFFFFFF
D1DC FFFFFFFF
D1E0 FFFFFFFF
D1E4 FFFFFFFF
D1E8 FFFFFFFF
D1EC FFFFFFFF
D1F0 FFFFFFFF
D1F4 FFFFFFFF
D1F8 FFFFFFFF
D1FC FFFFFFFF
D200 FFFFFFFF
D204 FFFFFFFF
D208 FFFFFFFF
D20C FFFFFFFF
D210 FFFFFFFF
D214 FFFFFFFF
D218 FFFFFFFF
D21C FFFFFFFF
D220 FFFFFFFF
D224 FFFFFFFF
D228 FFFFFFFF
D22C FFFFFFFF
D230 FFFFFFFF
D234 FFFFFFFF
D238 FFFFFFFF
D23C FFFFFFFF
D240 FFFFFFFF
D244 FFFFFFFF
D248 FFFFFFFF
D24C FFFFFFFF
D250 FFFFFFFF
D254 FFFFFFFF
D258 FFFFFFFF
D25C FFFFFFFF
D260 FFFFFFFF
D264 FFFFFFFF
D268 FFFFFFFF
D26C FFFFFFFF
D270 FFFFFFFF
D274 FFFFFFFF
D278 FFFFFFFF
D27C FFFFFFFF
D280 FFFFFFFF
D284 FFFFFFFF
D288 FFFFFFFF
D28C FFFFFFFF
D290 FFFFFFFF
D294 FFFFFFFF
D298 FFFFFFFF
D29C FFFFFFFF
D2A0 FFFFFFFF
D2A4 FFFFFFFF
D2A8 FFFFFFFF
D2AC FFFFFFFF
D2B0 FFFFFFFF
D2B4 FFFFFFFF
D2B8 FFFFFFFF
D2BC FFFFFFFF
D2C0 FFFFFFFF
D2C4 FFFFFFFF
D2C8 FFFFFFFF
D2CC FFFFFFFF
D2D0 FFFFFFFF
D2D4 FFFFFFFF
D2D8 FFFFFFFF
D2DC FFFFFFFF
D2E0 FFFFFFFF
D2E4 FFFFFFFF
D2E8 FFFFFFFF
D2EC FFFFFFFF
D2F0 FFFFFFFF
D2F4 FFFFFFFF
D2F8 FFFFFFFF
D2FC FFFFFFFF
D300 FFFFFFFF
D304 FFFFFFFF
D308 FFFFFFFF
D30C FFFFFFFF
D310 FFFFFFFF
D314 FFFFFFFF
D318 FFFFFFFF
D31C FFFFFFFF
D320 FFFFFFFF
D324 FFFFFFFF
D328 FFFFFFFF
D32C FFFFFFFF
D330 FFFFFFFF
D334 FFFFFFFF
D338 FFFFFFFF
D33C FFFFFFFF
D340 FFFFFFFF
D344 FFFFFFFF
D348 FFFFFFFF
D34C FFFFFFFF
D350 FFFFFFFF
D354 FFFFFFFF
D358 FFFFFFFF
D35C FFFFFFFF
D360 FFFFFFFF
D364 FFFFFFFF
D368 FFFFFFFF
D36C FFFFFFFF
D370 FFFFFFFF
D374 FFFFFFFF
D378 FFFFFFFF
D37C FFFFFFFF
D380 FFFFFFFF
D384 FFFFFFFF
D388 FFFFFFFF
D38C FFFFFFFF
D390 FFFFFFFF
D394 FFFFFFFF
D398 FFFFFFFF
D39C FFFFFFFF
D3A0 FFFFFFFF
D3A4 FFFFFFFF
D3A8 FFFFFFFF
D3AC FFFFFFFF
D3B0 FFFFFFFF
D3B4 FFFFFFFF
D3B8 FFFFFFFF
D3BC FFFFFFFF
D3C0 FFFFFFFF
D3C4 FFFFFFFF
D3C8 FFFFFFFF
D3CC FFFFFFFF
D3D0 FFFFFFFF
D3D4 FFFFFFFF
D3D8 FFFFFFFF
D3DC FFFFFFFF
D3E0 FFFFFFFF
D3E4 FFFFFFFF
D3E8 FFFFFFFF
D3EC FFFFFFFF
D3F0 FFFFFFFF
D3F4 FFFFFFFF
D3F8 FFFFFFFF
D3FC FFFFFFFF
D400 FFFFFFFF
D404 FFFFFFFF
D408 FFFFFFFF
D40C FFFFFFFF
D410 FFFFFFFF
D414 FFFFFFFF
D418 FFFFFFFF
D41C FFFFFFFF
D420 FFFFFFFF
D424 FFFFFFFF
D428 FFFFFFFF
D42C FFFFFFFF
D430 FFFFFFFF
D434 FFFFFFFF
D438 FFFFFFFF
D43C FFFFFFFF
D440 FFFFFFFF
D444 FFFFFFFF
D448 FFFFFFFF
D44C FFFFFFFF
D450 FFFFFFFF
D454 FFFFFFFF
D458 FFFFFFFF
D45C FFFFFFFF
D460 FFFFFFFF
D464 FFFFFFFF
D468 FFFFFFFF
D46C FFFFFFFF
D470 FFFFFFFF
D474 FFFFFFFF
D478 FFFFFFFF
D47C FFFFFFFF
D480 FFFFFFFF
D484 FFFFFFFF
D488 FFFFFFFF
D48C FFFFFFFF
D490 FFFFFFFF
D494 FFFFFFFF
D498 FFFFFFFF
D49C FFFFFFFF
D4A0 FFFFFFFF
D4A4 FFFFFFFF
D4A8 FFFFFFFF
D4AC FFFFFFFF
D4B0 FFFFFFFF
D4B4 FFFFFFFF
D4B8 FFFFFFFF
D4BC FFFFFFFF
D4C0 FFFFFFFF
D4C4 FFFFFFFF
D4C8 FFFFFFFF
D4CC FFFFFFFF
D4D0 FFFFFFFF
D4D4 FFFFFFFF
D4D8 FFFFFFFF
D4DC FFFFFFFF
D4E0 FFFFFFFF
D4E4 FFFFFFFF
D4E8 FFFFFFFF
D4EC FFFFFFFF
D4F0 FFFFFFFF
D4F4 FFFFFFFF
D4F8 FFFFFFFF
D4FC FFFFFFFF
D500 FFFFFFFF
D504 FFFFFFFF
D508 FFFFFFFF
D50C FFFFFFFF
D510 FFFFFFFF
D514 FFFFFFFF
D518 FFFFFFFF
D51C FFFFFFFF
D520 FFFFFFFF
D524 FFFFFFFF
D528 FFFFFFFF
D52C FFFFFFFF
D530 FFFFFFFF
D534 FFFFFFFF
D538 FFFFFFFF
D53C FFFFFFFF
D540 FFFFFFFF
D544 FFFFFFFF
D548 FFFFFFFF
D54C FFFFFFFF
D550 FFFFFFFF
D554 FFFFFFFF
D558 FFFFFFFF
D55C FFFFFFFF
D560 FFFFFFFF
D564 FFFFFFFF
D568 FFFFFFFF
D56C FFFFFFFF
D570 FFFFFFFF
D574 FFFFFFFF
D578 FFFFFFFF
D57C FFFFFFFF
D580 FFFFFFFF
D584 FFFFFFFF
D588 FFFFFFFF
D58C FFFFFFFF
D590 FFFFFFFF
D594 FFFFFFFF
D598 FFFFFFFF
D59C FFFFFFFF
D5A0 FFFFFFFF
D5A4 FFFFFFFF
D5A8 FFFFFFFF
D5AC FFFFFFFF
D5B0 FFFFFFFF
D5B4 FFFFFFFF
D5B8 FFFFFFFF
D5BC FFFFFFFF
D5C0 FFFFFFFF
D5C4 FFFFFFFF
D5C8 FFFFFFFF
D5CC FFFFFFFF
D5D0 FFFFFFFF
D5D4 FFFFFFFF
D5D8 FFFFFFFF
D5DC FFFFFFFF
D5E0 FFFFFFFF
D5E4 FFFFFFFF
D5E8 FFFFFFFF
D5EC FFFFFFFF
D5F0 FFFFFFFF
D5F4 FFFFFFFF
D5F8 FFFFFFFF
D5FC FFFFFFFF
D600 FFFFFFFF
D604 FFFFFFFF
D608 FFFFFFFF
D60C FFFFFFFF
D610 FFFFFFFF
D614 FFFFFFFF
D618 FFFFFFFF
D61C FFFFFFFF
D620 FFFFFFFF
D624 FFFFFFFF
D628 FFFFFFFF
D62C FFFFFFFF
D630 FFFFFFFF
D634 FFFFFFFF
D638 FFFFFFFF
D63C FFFFFFFF
D640 FFFFFFFF
D644 FFFFFFFF
D648 FFFFFFFF
D64C FFFFFFFF
D650 FFFFFFFF
D654 FFFFFFFF
D658 FFFFFFFF
D65C FFFFFFFF
D660 FFFFFFFF
D664 FFFFFFFF
D668 FFFFFFFF
D66C FFFFFFFF
D670 FFFFFFFF
D674 FFFFFFFF
D678 FFFFFFFF
D67C FFFFFFFF
D680 FFFFFFFF
D684 FFFFFFFF
D688 FFFFFFFF
D68C FFFFFFFF
D690 FFFFFFFF
D694 FFFFFFFF
D698 FFFFFFFF
D69C FFFFFFFF
D6A0 FFFFFFFF
D6A4 FFFFFFFF
D6A8 FFFFFFFF
D6AC FFFFFFFF
D6B0 FFFFFFFF
D6B4 FFFFFFFF
D6B8 FFFFFFFF
D6BC FFFFFFFF
D6C0 FFFFFFFF
D6C4 FFFFFFFF
D6C8 FFFFFFFF
D6CC FFFFFFFF
D6D0 FFFFFFFF
D6D4 FFFFFFFF
D6D8 FFFFFFFF
D6DC FFFFFFFF
D6E0 FFFFFFFF
D6E4 FFFFFFFF
D6E8 FFFFFFFF
D6EC FFFFFFFF
D6F0 FFFFFFFF
D6F4 FFFFFFFF
D6F8 FFFFFFFF
D6FC FFFFFFFF
D700 FFFFFFFF
D704 FFFFFFFF
D708 FFFFFFFF
D70C FFFFFFFF
D710 FFFFFFFF
D714 FFFFFFFF
D718 FFFFFFFF
D71C FFFFFFFF
D720 FFFFFFFF
D724 FFFFFFFF
D728 FFFFFFFF
D72C FFFFFFFF
D730 FFFFFFFF
D734 FFFFFFFF
D738 FFFFFFFF
D73C FFFFFFFF
D740 FFFFFFFF
D744 FFFFFFFF
D748 FFFFFFFF
D74C FFFFFFFF
D750 FFFFFFFF
D754 FFFFFFFF
D758 FFFFFFFF
D75C FFFFFFFF
D760 FFFFFFFF
D764 FFFFFFFF
D768 FFFFFFFF
D76C FFFFFFFF
D770 FFFFFFFF
D774 FFFFFFFF
D778 FFFFFFFF
D77C FFFFFFFF
D780 FFFFFFFF
D784 FFFFFFFF
D788 FFFFFFFF
D78C FFFFFFFF
D790 FFFFFFFF
D794 FFFFFFFF
D798 FFFFFFFF
D79C FFFFFFFF
D7A0 FFFFFFFF
D7A4 FFFFFFFF
D7A8 FFFFFFFF
D7AC FFFFFFFF
D7B0 FFFFFFFF
D7B4 FFFFFFFF
D7B8 FFFFFFFF
D7BC FFFFFFFF
D7C0 FFFFFFFF
D7C4 FFFFFFFF
D7C8 FFFFFFFF
D7CC FFFFFFFF
D7D0 FFFFFFFF
D7D4 FFFFFFFF
D7D8 FFFFFFFF
D7DC FFFFFFFF
D7E0 FFFFFFFF
D7E4 FFFFFFFF
D7E8 FFFFFFFF
D7EC FFFFFFFF
D7F0 FFFFFFFF
D7F4 FFFFFFFF
D7F8 FFFFFFFF
D7FC FFFFFFFF
D800 FFFFFFFF
D804 FFFFFFFF
D808 FFFFFFFF
D80C FFFFFFFF
D810 FFFFFFFF
D814 FFFFFFFF
D818 FFFFFFFF
D81C FFFFFFFF
D820 FFFFFFFF
D824 FFFFFFFF
D828 FFFFFFFF
D82C FFFFFFFF
D830 FFFFFFFF
D834 FFFFFFFF
D838 FFFFFFFF
D83C FFFFFFFF
D840 FFFFFFFF
D844 FFFFFFFF
D848 FFFFFFFF
D84C FFFFFFFF
D850 FFFFFFFF
D854 FFFFFFFF
D858 FFFFFFFF
D85C FFFFFFFF
D860 FFFFFFFF
D864 FFFFFFFF
D868 FFFFFFFF
D86C FFFFFFFF
D870 FFFFFFFF
D874 FFFFFFFF
D878 FFFFFFFF
D87C FFFFFFFF
D880 FFFFFFFF
D884 FFFFFFFF
D888 FFFFFFFF
D88C FFFFFFFF
D890 FFFFFFFF
D894 FFFFFFFF
D898 FFFFFFFF
D89C FFFFFFFF
D8A0 FFFFFFFF
D8A4 FFFFFFFF
D8A8 FFFFFFFF
D8AC FFFFFFFF
D8B0 FFFFFFFF
D8B4 FFFFFFFF
D8B8 FFFFFFFF
D8BC FFFFFFFF
D8C0 FFFFFFFF
D8C4 FFFFFFFF
D8C8 FFFFFFFF
D8CC FFFFFFFF
D8D0 FFFFFFFF
D8D4 FFFFFFFF
D8D8 FFFFFFFF
D8DC FFFFFFFF
D8E0 FFFFFFFF
D8E4 FFFFFFFF
D8E8 FFFFFFFF
D8EC FFFFFFFF
D8F0 FFFFFFFF
D8F4 FFFFFFFF
D8F8 FFFFFFFF
D8FC FFFFFFFF
D900 FFFFFFFF
D904 FFFFFFFF
D908 FFFFFFFF
D90C FFFFFFFF
D910 FFFFFFFF
D914 FFFFFFFF
D918 FFFFFFFF
D91C FFFFFFFF
D920 FFFFFFFF
D924 FFFFFFFF
D928 FFFFFFFF
D92C FFFFFFFF
D930 FFFFFFFF
D934 FFFFFFFF
D938 FFFFFFFF
D93C FFFFFFFF
D940 FFFFFFFF
D944 FFFFFFFF
D948 FFFFFFFF
D94C FFFFFFFF
D950 FFFFFFFF
D954 FFFFFFFF
D958 FFFFFFFF
D95C FFFFFFFF
D960 FFFFFFFF
D964 FFFFFFFF
D968 FFFFFFFF
D96C FFFFFFFF
D970 FFFFFFFF
D974 FFFFFFFF
D978 FFFFFFFF
D97C FFFFFFFF
D980 FFFFFFFF
D984 FFFFFFFF
D988 FFFFFFFF
D98C FFFFFFFF
D990 FFFFFFFF
D994 FFFFFFFF
D998 FFFFFFFF
D99C FFFFFFFF
D9A0 FFFFFFFF
D9A4 FFFFFFFF
D9A8 FFFFFFFF
D9AC FFFFFFFF
D9B0 FFFFFFFF
D9B4 FFFFFFFF
D9B8 FFFFFFFF
D9BC FFFFFFFF
D9C0 FFFFFFFF
D9C4 FFFFFFFF
D9C8 FFFFFFFF
D9CC FFFFFFFF
D9D0 FFFFFFFF
D9D4 FFFFFFFF
D9D8 FFFFFFFF
D9DC FFFFFFFF
D9E0 FFFFFFFF
D9E4 FFFFFFFF
D9E8 FFFFFFFF
D9EC FFFFFFFF
D9F0 FFFFFFFF
D9F4 FFFFFFFF
D9F8 FFFFFFFF
D9FC FFFFFFFF
DA00 FFFFFFFF
DA04 FFFFFFFF
DA08 FFFFFFFF
DA0C FFFFFFFF
DA10 FFFFFFFF
DA14 FFFFFFFF
DA18 FFFFFFFF
DA1C FFFFFFFF
DA20 FFFFFFFF
DA24 FFFFFFFF
DA28 FFFFFFFF
DA2C FFFFFFFF
DA30 FFFFFFFF
DA34 FFFFFFFF
DA38 FFFFFFFF
DA3C FFFFFFFF
DA40 FFFFFFFF
DA44 FFFFFFFF
DA48 FFFFFFFF
DA4C FFFFFFFF
DA50 FFFFFFFF
DA54 FFFFFFFF
DA58 FFFFFFFF
DA5C FFFFFFFF
DA60 FFFFFFFF
DA64 FFFFFFFF
DA68 FFFFFFFF
DA6C FFFFFFFF
DA70 FFFFFFFF
DA74 FFFFFFFF
DA78 FFFFFFFF
DA7C FFFFFFFF
DA80 FFFFFFFF
DA84 FFFFFFFF
DA88 FFFFFFFF
DA8C FFFFFFFF
DA90 FFFFFFFF
DA94 FFFFFFFF
DA98 FFFFFFFF
DA9C FFFFFFFF
DAA0 FFFFFFFF
DAA4 FFFFFFFF
DAA8 FFFFFFFF
DAAC FFFFFFFF
DAB0 FFFFFFFF
DAB4 FFFFFFFF
DAB8 FFFFFFFF
DABC FFFFFFFF
DAC0 FFFFFFFF
DAC4 FFFFFFFF
DAC8 FFFFFFFF
DACC FFFFFFFF
DAD0 FFFFFFFF
DAD4 FFFFFFFF
DAD8 FFFFFFFF
DADC FFFFFFFF
DAE0 FFFFFFFF
DAE4 FFFFFFFF
DAE8 FFFFFFFF
DAEC FFFFFFFF
DAF0 FFFFFFFF
DAF4 FFFFFFFF
DAF8 FFFFFFFF
DAFC FFFFFFFF
DB00 FFFFFFFF
DB04 FFFFFFFF
DB08 FFFFFFFF
DB0C FFFFFFFF
DB10 FFFFFFFF
DB14 FFFFFFFF
DB18 FFFFFFFF
DB1C FFFFFFFF
DB20 FFFFFFFF
DB24 FFFFFFFF
DB28 FFFFFFFF
DB2C FFFFFFFF
DB30 FFFFFFFF
DB34 FFFFFFFF
DB38 FFFFFFFF
DB3C FFFFFFFF
DB40 FFFFFFFF
DB44 FFFFFFFF
DB48 FFFFFFFF
DB4C FFFFFFFF
DB50 FFFFFFFF
DB54 FFFFFFFF
DB58 FFFFFFFF
DB5C FFFFFFFF
DB60 FFFFFFFF
DB64 FFFFFFFF
DB68 FFFFFFFF
DB6C FFFFFFFF
DB70 FFFFFFFF
DB74 FFFFFFFF
DB78 FFFFFFFF
DB7C FFFFFFFF
DB80 FFFFFFFF
DB84 FFFFFFFF
DB88 FFFFFFFF
DB8C FFFFFFFF
DB90 FFFFFFFF
DB94 FFFFFFFF
DB98 FFFFFFFF
DB9C FFFFFFFF
DBA0 FFFFFFFF
DBA4 FFFFFFFF
DBA8 FFFFFFFF
DBAC FFFFFFFF
DBB0 FFFFFFFF
DBB4 FFFFFFFF
DBB8 FFFFFFFF
DBBC FFFFFFFF
DBC0 FFFFFFFF
DBC4 FFFFFFFF
DBC8 FFFFFFFF
DBCC FFFFFFFF
DBD0 FFFFFFFF
DBD4 FFFFFFFF
DBD8 FFFFFFFF
DBDC FFFFFFFF
DBE0 FFFFFFFF
DBE4 FFFFFFFF
DBE8 FFFFFFFF
DBEC FFFFFFFF
DBF0 FFFFFFFF
DBF4 FFFFFFFF
DBF8 FFFFFFFF
DBFC FFFFFFFF
DC00 FFFFFFFF
DC04 FFFFFFFF
DC08 FFFFFFFF
DC0C FFFFFFFF
DC10 FFFFFFFF
DC14 FFFFFFFF
DC18 FFFFFFFF
DC1C FFFFFFFF
DC20 FFFFFFFF
DC24 FFFFFFFF
DC28 FFFFFFFF
DC2C FFFFFFFF
DC30 FFFFFFFF
DC34 FFFFFFFF
DC38 FFFFFFFF
DC3C FFFFFFFF
DC40 FFFFFFFF
DC44 FFFFFFFF
DC48 FFFFFFFF
DC4C FFFFFFFF
DC50 FFFFFFFF
DC54 FFFFFFFF
DC58 FFFFFFFF
DC5C FFFFFFFF
DC60 FFFFFFFF
DC64 FFFFFFFF
DC68 FFFFFFFF
DC6C FFFFFFFF
DC70 FFFFFFFF
DC74 FFFFFFFF
DC78 FFFFFFFF
DC7C FFFFFFFF
DC80 FFFFFFFF
DC84 FFFFFFFF
DC88 FFFFFFFF
DC8C FFFFFFFF
DC90 FFFFFFFF
DC94 FFFFFFFF
DC98 FFFFFFFF
DC9C FFFFFFFF
DCA0 FFFFFFFF
DCA4 FFFFFFFF
DCA8 FFFFFFFF
DCAC FFFFFFFF
DCB0 FFFFFFFF
DCB4 FFFFFFFF
DCB8 FFFFFFFF
DCBC FFFFFFFF
DCC0 FFFFFFFF
DCC4 FFFFFFFF
DCC8 FFFFFFFF
DCCC FFFFFFFF
DCD0 FFFFFFFF
DCD4 FFFFFFFF
DCD8 FFFFFFFF
DCDC FFFFFFFF
DCE0 FFFFFFFF
DCE4 FFFFFFFF
DCE8 FFFFFFFF
DCEC FFFFFFFF
DCF0 FFFFFFFF
DCF4 FFFFFFFF
DCF8 FFFFFFFF
DCFC FFFFFFFF
DD00 FFFFFFFF
DD04 FFFFFFFF
DD08 FFFFFFFF
DD0C FFFFFFFF
DD10 FFFFFFFF
DD14 FFFFFFFF
DD18 FFFFFFFF
DD1C FFFFFFFF
DD20 FFFFFFFF
DD24 FFFFFFFF
DD28 FFFFFFFF
DD2C FFFFFFFF
DD30 FFFFFFFF
DD34 FFFFFFFF
DD38 FFFFFFFF
DD3C FFFFFFFF
DD40 FFFFFFFF
DD44 FFFFFFFF
DD48 FFFFFFFF
DD4C FFFFFFFF
DD50 FFFFFFFF
DD54 FFFFFFFF
DD58 FFFFFFFF
DD5C FFFFFFFF
DD60 FFFFFFFF
DD64 FFFFFFFF
DD68 FFFFFFFF
DD6C FFFFFFFF
DD70 FFFFFFFF
DD74 FFFFFFFF
DD78 FFFFFFFF
DD7C FFFFFFFF
DD80 FFFFFFFF
DD84 FFFFFFFF
DD88 FFFFFFFF
DD8C FFFFFFFF
DD90 FFFFFFFF
DD94 FFFFFFFF
DD98 FFFFFFFF
DD9C FFFFFFFF
DDA0 FFFFFFFF
DDA4 FFFFFFFF
DDA8 FFFFFFFF
DDAC FFFFFFFF
DDB0 FFFFFFFF
DDB4 FFFFFFFF
DDB8 FFFFFFFF
DDBC FFFFFFFF
DDC0 FFFFFFFF
DDC4 FFFFFFFF
DDC8 FFFFFFFF
DDCC FFFFFFFF
DDD0 FFFFFFFF
DDD4 FFFFFFFF
DDD8 FFFFFFFF
DDDC FFFFFFFF
DDE0 FFFFFFFF
DDE4 FFFFFFFF
DDE8 FFFFFFFF
DDEC FFFFFFFF
DDF0 FFFFFFFF
DDF4 FFFFFFFF
DDF8 FFFFFFFF
DDFC FFFFFFFF
DE00 FFFFFFFF
DE04 FFFFFFFF
DE08 FFFFFFFF
DE0C FFFFFFFF
DE10 FFFFFFFF
DE14 FFFFFFFF
DE18 FFFFFFFF
DE1C FFFFFFFF
DE20 FFFFFFFF
DE24 FFFFFFFF
DE28 FFFFFFFF
DE2C FFFFFFFF
DE30 FFFFFFFF
DE34 FFFFFFFF
DE38 FFFFFFFF
DE3C FFFFFFFF
DE40 FFFFFFFF
DE44 FFFFFFFF
DE48 FFFFFFFF
DE4C FFFFFFFF
DE50 FFFFFFFF
DE54 FFFFFFFF
DE58 FFFFFFFF
DE5C FFFFFFFF
DE60 FFFFFFFF
DE64 FFFFFFFF
DE68 FFFFFFFF
DE6C FFFFFFFF
DE70 FFFFFFFF
DE74 FFFFFFFF
DE78 FFFFFFFF
DE7C FFFFFFFF
DE80 FFFFFFFF
DE84 FFFFFFFF
DE88 FFFFFFFF
DE8C FFFFFFFF
DE90 FFFFFFFF
DE94 FFFFFFFF
DE98 FFFFFFFF
DE9C FFFFFFFF
DEA0 FFFFFFFF
DEA4 FFFFFFFF
DEA8 FFFFFFFF
DEAC FFFFFFFF
DEB0 FFFFFFFF
DEB4 FFFFFFFF
DEB8 FFFFFFFF
DEBC FFFFFFFF
DEC0 FFFFFFFF
DEC4 FFFFFFFF
DEC8 FFFFFFFF
DECC FFFFFFFF
DED0 FFFFFFFF
DED4 FFFFFFFF
DED8 FFFFFFFF
DEDC FFFFFFFF
DEE0 FFFFFFFF
DEE4 FFFFFFFF
DEE8 FFFFFFFF
DEEC FFFFFFFF
DEF0 FFFFFFFF
DEF4 FFFFFFFF
DEF8 FFFFFFFF
DEFC FFFFFFFF
DF00 FFFFFFFF
DF04 FFFFFFFF
DF08 FFFFFFFF
DF0C FFFFFFFF
DF10 FFFFFFFF
DF14 FFFFFFFF
DF18 FFFFFFFF
DF1C FFFFFFFF
DF20 FFFFFFFF
DF24 FFFFFFFF
DF28 FFFFFFFF
DF2C FFFFFFFF
DF30 FFFFFFFF
DF34 FFFFFFFF
DF38 FFFFFFFF
DF3C FFFFFFFF
DF40 FFFFFFFF
DF44 FFFFFFFF
DF48 FFFFFFFF
DF4C FFFFFFFF
DF50 FFFFFFFF
DF54 FFFFFFFF
DF58 FFFFFFFF
DF5C FFFFFFFF
DF60 FFFFFFFF
DF64 FFFFFFFF
DF68 FFFFFFFF
DF6C FFFFFFFF
DF70 FFFFFFFF
DF74 FFFFFFFF
DF78 FFFFFFFF
DF7C FFFFFFFF
DF80 FFFFFFFF
DF84 FFFFFFFF
DF88 FFFFFFFF
DF8C FFFFFFFF
DF90 FFFFFFFF
DF94 FFFFFFFF
DF98 FFFFFFFF
DF9C FFFFFFFF
DFA0 FFFFFFFF
DFA4 FFFFFFFF
DFA8 FFFFFFFF
DFAC FFFFFFFF
DFB0 FFFFFFFF
DFB4 FFFFFFFF
DFB8 FFFFFFFF
DFBC FFFFFFFF
DFC0 FFFFFFFF
DFC4 FFFFFFFF
DFC8 FFFFFFFF
DFCC FFFFFFFF
DFD0 FFFFFFFF
DFD4 FFFFFFFF
DFD8 FFFFFFFF
DFDC FFFFFFFF
DFE0 FFFFFFFF
DFE4 FFFFFFFF
DFE8 FFFFFFFF
DFEC FFFFFFFF
DFF0 FFFFFFFF
DFF4 FFFFFFFF
DFF8 FFFFFFFF
DFFC FFFFFFFF
E000 FFFFFFFF
E004 FFFFFFFF
E008 FFFFFFFF
E00C FFFFFFFF
E010 FFFFFFFF
E014 FFFFFFFF
E018 FFFFFFFF
E01C FFFFFFFF
E020 FFFFFFFF
E024 FFFFFFFF
E028 FFFFFFFF
E02C FFFFFFFF
E030 FFFFFFFF
E034 FFFFFFFF
E038 FFFFFFFF
E03C FFFFFFFF
E040 FFFFFFFF
E044 FFFFFFFF
E048 FFFFFFFF
E04C FFFFFFFF
E050 FFFFFFFF
E054 FFFFFFFF
E058 FFFFFFFF
E05C FFFFFFFF
E060 FFFFFFFF
E064 FFFFFFFF
E068 FFFFFFFF
E06C FFFFFFFF
E070 FFFFFFFF
E074 FFFFFFFF
E078 FFFFFFFF
E07C FFFFFFFF
E080 FFFFFFFF
E084 FFFFFFFF
E088 FFFFFFFF
E08C FFFFFFFF
E090 FFFFFFFF
E094 FFFFFFFF
E098 FFFFFFFF
E09C FFFFFFFF
E0A0 FFFFFFFF
E0A4 FFFFFFFF
E0A8 FFFFFFFF
E0AC FFFFFFFF
E0B0 FFFFFFFF
E0B4 FFFFFFFF
E0B8 FFFFFFFF
E0BC FFFFFFFF
E0C0 FFFFFFFF
E0C4 FFFFFFFF
E0C8 FFFFFFFF
E0CC FFFFFFFF
E0D0 FFFFFFFF
E0D4 FFFFFFFF
E0D8 FFFFFFFF
E0DC FFFFFFFF
E0E0 FFFFFFFF
E0E4 FFFFFFFF
E0E8 FFFFFFFF
E0EC FFFFFFFF
E0F0 FFFFFFFF
E0F4 FFFFFFFF
E0F8 FFFFFFFF
E0FC FFFFFFFF
E100 FFFFFFFF
E104 FFFFFFFF
E108 FFFFFFFF
E10C FFFFFFFF
E110 FFFFFFFF
E114 FFFFFFFF
E118 FFFFFFFF
E11C FFFFFFFF
E120 FFFFFFFF
E124 FFFFFFFF
E128 FFFFFFFF
E12C FFFFFFFF
E130 FFFFFFFF
E134 FFFFFFFF
E138 FFFFFFFF
E13C FFFFFFFF
E140 FFFFFFFF
E144 FFFFFFFF
E148 FFFFFFFF
E14C FFFFFFFF
E150 FFFFFFFF
E154 FFFFFFFF
E158 FFFFFFFF
E15C FFFFFFFF
E160 FFFFFFFF
E164 FFFFFFFF
E168 FFFFFFFF
E16C FFFFFFFF
E170 FFFFFFFF
E174 FFFFFFFF
E178 FFFFFFFF
E17C FFFFFFFF
E180 FFFFFFFF
E184 FFFFFFFF
E188 FFFFFFFF
E18C FFFFFFFF
E190 FFFFFFFF
E194 FFFFFFFF
E198 FFFFFFFF
E19C FFFFFFFF
E1A0 FFFFFFFF
E1A4 FFFFFFFF
E1A8 FFFFFFFF
E1AC FFFFFFFF
E1B0 FFFFFFFF
E1B4 FFFFFFFF
E1B8 FFFFFFFF
E1BC FFFFFFFF
E1C0 FFFFFFFF
E1C4 FFFFFFFF
E1C8 FFFFFFFF
E1CC FFFFFFFF
E1D0 FFFFFFFF
E1D4 FFFFFFFF
E1D8 FFFFFFFF
E1DC FFFFFFFF
E1E0 FFFFFFFF
E1E4 FFFFFFFF
E1E8 FFFFFFFF
E1EC FFFFFFFF
E1F0 FFFFFFFF
E1F4 FFFFFFFF
E1F8 FFFFFFFF
E1FC FFFFFFFF
E200 FFFFFFFF
E204 FFFFFFFF
E208 FFFFFFFF
E20C FFFFFFFF
E210 FFFFFFFF
E214 FFFFFFFF
E218 FFFFFFFF
E21C FFFFFFFF
E220 FFFFFFFF
E224 FFFFFFFF
E228 FFFFFFFF
E22C FFFFFFFF
E230 FFFFFFFF
E234 FFFFFFFF
E238 FFFFFFFF
E23C FFFFFFFF
E240 FFFFFFFF
E244 FFFFFFFF
E248 FFFFFFFF
E24C FFFFFFFF
E250 FFFFFFFF
E254 FFFFFFFF
E258 FFFFFFFF
E25C FFFFFFFF
E260 FFFFFFFF
E264 FFFFFFFF
E268 FFFFFFFF
E26C FFFFFFFF
E270 FFFFFFFF
E274 FFFFFFFF
E278 FFFFFFFF
E27C FFFFFFFF
E280 FFFFFFFF
E284 FFFFFFFF
E288 FFFFFFFF
E28C FFFFFFFF
E290 FFFFFFFF
E294 FFFFFFFF
E298 FFFFFFFF
E29C FFFFFFFF
E2A0 FFFFFFFF
E2A4 FFFFFFFF
E2A8 FFFFFFFF
E2AC FFFFFFFF
E2B0 FFFFFFFF
E2B4 FFFFFFFF
E2B8 FFFFFFFF
E2BC FFFFFFFF
E2C0 FFFFFFFF
E2C4 FFFFFFFF
E2C8 FFFFFFFF
E2CC FFFFFFFF
E2D0 FFFFFFFF
E2D4 FFFFFFFF
E2D8 FFFFFFFF
E2DC FFFFFFFF
E2E0 FFFFFFFF
E2E4 FFFFFFFF
E2E8 FFFFFFFF
E2EC FFFFFFFF
E2F0 FFFFFFFF
E2F4 FFFFFFFF
E2F8 FFFFFFFF
E2FC FFFFFFFF
E300 FFFFFFFF
E304 FFFFFFFF
E308 FFFFFFFF
E30C FFFFFFFF
E310 FFFFFFFF
E314 FFFFFFFF
E318 FFFFFFFF
E31C FFFFFFFF
E320 FFFFFFFF
E324 FFFFFFFF
E328 FFFFFFFF
E32C FFFFFFFF
E330 FFFFFFFF
E334 FFFFFFFF
E338 FFFFFFFF
E33C FFFFFFFF
E340 FFFFFFFF
E344 FFFFFFFF
E348 FFFFFFFF
E34C FFFFFFFF
E350 FFFFFFFF
E354 FFFFFFFF
E358 FFFFFFFF
E35C FFFFFFFF
E360 FFFFFFFF
E364 FFFFFFFF
E368 FFFFFFFF
E36C FFFFFFFF
E370 FFFFFFFF
E374 FFFFFFFF
E378 FFFFFFFF
E37C FFFFFFFF
E380 FFFFFFFF
E384 FFFFFFFF
E388 FFFFFFFF
E38C FFFFFFFF
E390 FFFFFFFF
E394 FFFFFFFF
E398 FFFFFFFF
E39C FFFFFFFF
E3A0 FFFFFFFF
E3A4 FFFFFFFF
E3A8 FFFFFFFF
E3AC FFFFFFFF
E3B0 FFFFFFFF
E3B4 FFFFFFFF
E3B8 FFFFFFFF
E3BC FFFFFFFF
E3C0 FFFFFFFF
E3C4 FFFFFFFF
E3C8 FFFFFFFF
E3CC FFFFFFFF
E3D0 FFFFFFFF
E3D4 FFFFFFFF
E3D8 FFFFFFFF
E3DC FFFFFFFF
E3E0 FFFFFFFF
E3E4 FFFFFFFF
E3E8 FFFFFFFF
E3EC FFFFFFFF
E3F0 FFFFFFFF
E3F4 FFFFFFFF
E3F8 FFFFFFFF
E3FC FFFFFFFF
E400 FFFFFFFF
E404 FFFFFFFF
E408 FFFFFFFF
E40C FFFFFFFF
E410 FFFFFFFF
E414 FFFFFFFF
E418 FFFFFFFF
E41C FFFFFFFF
E420 FFFFFFFF
E424 FFFFFFFF
E428 FFFFFFFF
E42C FFFFFFFF
E430 FFFFFFFF
E434 FFFFFFFF
E438 FFFFFFFF
E43C FFFFFFFF
E440 FFFFFFFF
E444 FFFFFFFF
E448 FFFFFFFF
E44C FFFFFFFF
E450 FFFFFFFF
E454 FFFFFFFF
E458 FFFFFFFF
E45C FFFFFFFF
E460 FFFFFFFF
E464 FFFFFFFF
E468 FFFFFFFF
E46C FFFFFFFF
E470 FFFFFFFF
E474 FFFFFFFF
E478 FFFFFFFF
E47C FFFFFFFF
E480 FFFFFFFF
E484 FFFFFFFF
E488 FFFFFFFF
E48C FFFFFFFF
E490 FFFFFFFF
E494 FFFFFFFF
E498 FFFFFFFF
E49C FFFFFFFF
E4A0 FFFFFFFF
E4A4 FFFFFFFF
E4A8 FFFFFFFF
E4AC FFFFFFFF
E4B0 FFFFFFFF
E4B4 FFFFFFFF
E4B8 FFFFFFFF
E4BC FFFFFFFF
E4C0 FFFFFFFF
E4C4 FFFFFFFF
E4C8 FFFFFFFF
E4CC FFFFFFFF
E4D0 FFFFFFFF
E4D4 FFFFFFFF
E4D8 FFFFFFFF
E4DC FFFFFFFF
E4E0 FFFFFFFF
E4E4 FFFFFFFF
E4E8 FFFFFFFF
E4EC FFFFFFFF
E4F0 FFFFFFFF
E4F4 FFFFFFFF
E4F8 FFFFFFFF
E4FC FFFFFFFF
E500 FFFFFFFF
E504 FFFFFFFF
E508 FFFFFFFF
E50C FFFFFFFF
E510 FFFFFFFF
E514 FFFFFFFF
E518 FFFFFFFF
E51C FFFFFFFF
E520 FFFFFFFF
E524 FFFFFFFF
E528 FFFFFFFF
E52C FFFFFFFF
E530 FFFFFFFF
E534 FFFFFFFF
E538 FFFFFFFF
E53C FFFFFFFF
E540 FFFFFFFF
E544 FFFFFFFF
E548 FFFFFFFF
E54C FFFFFFFF
E550 FFFFFFFF
E554 FFFFFFFF
E558 FFFFFFFF
E55C FFFFFFFF
E560 FFFFFFFF
E564 FFFFFFFF
E568 FFFFFFFF
E56C FFFFFFFF
E570 FFFFFFFF
E574 FFFFFFFF
E578 FFFFFFFF
E57C FFFFFFFF
E580 FFFFFFFF
E584 FFFFFFFF
E588 FFFFFFFF
E58C FFFFFFFF
E590 FFFFFFFF
E594 FFFFFFFF
E598 FFFFFFFF
E59C FFFFFFFF
E5A0 FFFFFFFF
E5A4 FFFFFFFF
E5A8 FFFFFFFF
E5AC FFFFFFFF
E5B0 FFFFFFFF
E5B4 FFFFFFFF
E5B8 FFFFFFFF
E5BC FFFFFFFF
E5C0 FFFFFFFF
E5C4 FFFFFFFF
E5C8 FFFFFFFF
E5CC FFFFFFFF
E5D0 FFFFFFFF
E5D4 FFFFFFFF
E5D8 FFFFFFFF
E5DC FFFFFFFF
E5E0 FFFFFFFF
E5E4 FFFFFFFF
E5E8 FFFFFFFF
E5EC FFFFFFFF
E5F0 FFFFFFFF
E5F4 FFFFFFFF
E5F8 FFFFFFFF
E5FC FFFFFFFF
E600 FFFFFFFF
E604 FFFFFFFF
E608 FFFFFFFF
E60C FFFFFFFF
E610 FFFFFFFF
E614 FFFFFFFF
E618 FFFFFFFF
E61C FFFFFFFF
E620 FFFFFFFF
E624 FFFFFFFF
E628 FFFFFFFF
E62C FFFFFFFF
E630 FFFFFFFF
E634 FFFFFFFF
E638 FFFFFFFF
E63C FFFFFFFF
E640 FFFFFFFF
E644 FFFFFFFF
E648 FFFFFFFF
E64C FFFFFFFF
E650 FFFFFFFF
E654 FFFFFFFF
E658 FFFFFFFF
E65C FFFFFFFF
E660 FFFFFFFF
E664 FFFFFFFF
E668 FFFFFFFF
E66C FFFFFFFF
E670 FFFFFFFF
E674 FFFFFFFF
E678 FFFFFFFF
E67C FFFFFFFF
E680 FFFFFFFF
E684 FFFFFFFF
E688 FFFFFFFF
E68C FFFFFFFF
E690 FFFFFFFF
E694 FFFFFFFF
E698 FFFFFFFF
E69C FFFFFFFF
E6A0 FFFFFFFF
E6A4 FFFFFFFF
E6A8 FFFFFFFF
E6AC FFFFFFFF
E6B0 FFFFFFFF
E6B4 FFFFFFFF
E6B8 FFFFFFFF
E6BC FFFFFFFF
E6C0 FFFFFFFF
E6C4 FFFFFFFF
E6C8 FFFFFFFF
E6CC FFFFFFFF
E6D0 FFFFFFFF
E6D4 FFFFFFFF
E6D8 FFFFFFFF
E6DC FFFFFFFF
E6E0 FFFFFFFF
E6E4 FFFFFFFF
E6E8 FFFFFFFF
E6EC FFFFFFFF
E6F0 FFFFFFFF
E6F4 FFFFFFFF
E6F8 FFFFFFFF
E6FC FFFFFFFF
E700 FFFFFFFF
E704 FFFFFFFF
E708 FFFFFFFF
E70C FFFFFFFF
E710 FFFFFFFF
E714 FFFFFFFF
E718 FFFFFFFF
E71C FFFFFFFF
E720 FFFFFFFF
E724 FFFFFFFF
E728 FFFFFFFF
E72C FFFFFFFF
E730 FFFFFFFF
E734 FFFFFFFF
E738 FFFFFFFF
E73C FFFFFFFF
E740 FFFFFFFF
E744 FFFFFFFF
E748 FFFFFFFF
E74C FFFFFFFF
E750 FFFFFFFF
E754 FFFFFFFF
E758 FFFFFFFF
E75C FFFFFFFF
E760 FFFFFFFF
E764 FFFFFFFF
E768 FFFFFFFF
E76C FFFFFFFF
E770 FFFFFFFF
E774 FFFFFFFF
E778 FFFFFFFF
E77C FFFFFFFF
E780 FFFFFFFF
E784 FFFFFFFF
E788 FFFFFFFF
E78C FFFFFFFF
E790 FFFFFFFF
E794 FFFFFFFF
E798 FFFFFFFF
E79C FFFFFFFF
E7A0 FFFFFFFF
E7A4 FFFFFFFF
E7A8 FFFFFFFF
E7AC FFFFFFFF
E7B0 FFFFFFFF
E7B4 FFFFFFFF
E7B8 FFFFFFFF
E7BC FFFFFFFF
E7C0 FFFFFFFF
E7C4 FFFFFFFF
E7C8 FFFFFFFF
E7CC FFFFFFFF
E7D0 FFFFFFFF
E7D4 FFFFFFFF
E7D8 FFFFFFFF
E7DC FFFFFFFF
E7E0 FFFFFFFF
E7E4 FFFFFFFF
E7E8 FFFFFFFF
E7EC FFFFFFFF
E7F0 FFFFFFFF
E7F4 FFFFFFFF
E7F8 FFFFFFFF
E7FC FFFFFFFF
E800 FFFFFFFF
E804 FFFFFFFF
E808 FFFFFFFF
E80C FFFFFFFF
E810 FFFFFFFF
E814 FFFFFFFF
E818 FFFFFFFF
E81C FFFFFFFF
E820 FFFFFFFF
E824 FFFFFFFF
E828 FFFFFFFF
E82C FFFFFFFF
E830 FFFFFFFF
E834 FFFFFFFF
E838 FFFFFFFF
E83C FFFFFFFF
E840 FFFFFFFF
E844 FFFFFFFF
E848 FFFFFFFF
E84C FFFFFFFF
E850 FFFFFFFF
E854 FFFFFFFF
E858 FFFFFFFF
E85C FFFFFFFF
E860 FFFFFFFF
E864 FFFFFFFF
E868 FFFFFFFF
E86C FFFFFFFF
E870 FFFFFFFF
E874 FFFFFFFF
E878 FFFFFFFF
E87C FFFFFFFF
E880 FFFFFFFF
E884 FFFFFFFF
E888 FFFFFFFF
E88C FFFFFFFF
E890 FFFFFFFF
E894 FFFFFFFF
E898 FFFFFFFF
E89C FFFFFFFF
E8A0 FFFFFFFF
E8A4 FFFFFFFF
E8A8 FFFFFFFF
E8AC FFFFFFFF
E8B0 FFFFFFFF
E8B4 FFFFFFFF
E8B8 FFFFFFFF
E8BC FFFFFFFF
E8C0 FFFFFFFF
E8C4 FFFFFFFF
E8C8 FFFFFFFF
E8CC FFFFFFFF
E8D0 FFFFFFFF
E8D4 FFFFFFFF
E8D8 FFFFFFFF
E8DC FFFFFFFF
E8E0 FFFFFFFF
E8E4 FFFFFFFF
E8E8 FFFFFFFF
E8EC FFFFFFFF
E8F0 FFFFFFFF
E8F4 FFFFFFFF
E8F8 FFFFFFFF
E8FC FFFFFFFF
E900 FFFFFFFF
E904 FFFFFFFF
E908 FFFFFFFF
E90C FFFFFFFF
E910 FFFFFFFF
E914 FFFFFFFF
E918 FFFFFFFF
E91C FFFFFFFF
E920 FFFFFFFF
E924 FFFFFFFF
E928 FFFFFFFF
E92C FFFFFFFF
E930 FFFFFFFF
E934 FFFFFFFF
E938 FFFFFFFF
E93C FFFFFFFF
E940 FFFFFFFF
E944 FFFFFFFF
E948 FFFFFFFF
E94C FFFFFFFF
E950 FFFFFFFF
E954 FFFFFFFF
E958 FFFFFFFF
E95C FFFFFFFF
E960 FFFFFFFF
E964 FFFFFFFF
E968 FFFFFFFF
E96C FFFFFFFF
E970 FFFFFFFF
E974 FFFFFFFF
E978 FFFFFFFF
E97C FFFFFFFF
E980 FFFFFFFF
E984 FFFFFFFF
E988 FFFFFFFF
E98C FFFFFFFF
E990 FFFFFFFF
E994 FFFFFFFF
E998 FFFFFFFF
E99C FFFFFFFF
E9A0 FFFFFFFF
E9A4 FFFFFFFF
E9A8 FFFFFFFF
E9AC FFFFFFFF
E9B0 FFFFFFFF
E9B4 FFFFFFFF
E9B8 FFFFFFFF
E9BC FFFFFFFF
E9C0 FFFFFFFF
E9C4 FFFFFFFF
E9C8 FFFFFFFF
E9CC FFFFFFFF
E9D0 FFFFFFFF
E9D4 FFFFFFFF
E9D8 FFFFFFFF
E9DC FFFFFFFF
E9E0 FFFFFFFF
E9E4 FFFFFFFF
E9E8 FFFFFFFF
E9EC FFFFFFFF
E9F0 FFFFFFFF
E9F4 FFFFFFFF
E9F8 FFFFFFFF
E9FC FFFFFFFF
EA00 FFFFFFFF
EA04 FFFFFFFF
EA08 FFFFFFFF
EA0C FFFFFFFF
EA10 FFFFFFFF
EA14 FFFFFFFF
EA18 FFFFFFFF
EA1C FFFFFFFF
EA20 FFFFFFFF
EA24 FFFFFFFF
EA28 FFFFFFFF
EA2C FFFFFFFF
EA30 FFFFFFFF
EA34 FFFFFFFF
EA38 FFFFFFFF
EA3C FFFFFFFF
EA40 FFFFFFFF
EA44 FFFFFFFF
EA48 FFFFFFFF
EA4C FFFFFFFF
EA50 FFFFFFFF
EA54 FFFFFFFF
EA58 FFFFFFFF
EA5C FFFFFFFF
EA60 FFFFFFFF
EA64 FFFFFFFF
EA68 FFFFFFFF
EA6C FFFFFFFF
EA70 FFFFFFFF
EA74 FFFFFFFF
EA78 FFFFFFFF
EA7C FFFFFFFF
EA80 FFFFFFFF
EA84 FFFFFFFF
EA88 FFFFFFFF
EA8C FFFFFFFF
EA90 FFFFFFFF
EA94 FFFFFFFF
EA98 FFFFFFFF
EA9C FFFFFFFF
EAA0 FFFFFFFF
EAA4 FFFFFFFF
EAA8 FFFFFFFF
EAAC FFFFFFFF
EAB0 FFFFFFFF
EAB4 FFFFFFFF
EAB8 FFFFFFFF
EABC FFFFFFFF
EAC0 FFFFFFFF
EAC4 FFFFFFFF
EAC8 FFFFFFFF
EACC FFFFFFFF
EAD0 FFFFFFFF
EAD4 FFFFFFFF
EAD8 FFFFFFFF
EADC FFFFFFFF
EAE0 FFFFFFFF
EAE4 FFFFFFFF
EAE8 FFFFFFFF
EAEC FFFFFFFF
EAF0 FFFFFFFF
EAF4 FFFFFFFF
EAF8 FFFFFFFF
EAFC FFFFFFFF
EB00 FFFFFFFF
EB04 FFFFFFFF
EB08 FFFFFFFF
EB0C FFFFFFFF
EB10 FFFFFFFF
EB14 FFFFFFFF
EB18 FFFFFFFF
EB1C FFFFFFFF
EB20 FFFFFFFF
EB24 FFFFFFFF
EB28 FFFFFFFF
EB2C FFFFFFFF
EB30 FFFFFFFF
EB34 FFFFFFFF
EB38 FFFFFFFF
EB3C FFFFFFFF
EB40 FFFFFFFF
EB44 FFFFFFFF
EB48 FFFFFFFF
EB4C FFFFFFFF
EB50 FFFFFFFF
EB54 FFFFFFFF
EB58 FFFFFFFF
EB5C FFFFFFFF
EB60 FFFFFFFF
EB64 FFFFFFFF
EB68 FFFFFFFF
EB6C FFFFFFFF
EB70 FFFFFFFF
EB74 FFFFFFFF
EB78 FFFFFFFF
EB7C FFFFFFFF
EB80 FFFFFFFF
EB84 FFFFFFFF
EB88 FFFFFFFF
EB8C FFFFFFFF
EB90 FFFFFFFF
EB94 FFFFFFFF
EB98 FFFFFFFF
EB9C FFFFFFFF
EBA0 FFFFFFFF
EBA4 FFFFFFFF
EBA8 FFFFFFFF
EBAC FFFFFFFF
EBB0 FFFFFFFF
EBB4 FFFFFFFF
EBB8 FFFFFFFF
EBBC FFFFFFFF
EBC0 FFFFFFFF
EBC4 FFFFFFFF
EBC8 FFFFFFFF
EBCC FFFFFFFF
EBD0 FFFFFFFF
EBD4 FFFFFFFF
EBD8 FFFFFFFF
EBDC FFFFFFFF
EBE0 FFFFFFFF
EBE4 FFFFFFFF
EBE8 FFFFFFFF
EBEC FFFFFFFF
EBF0 FFFFFFFF
EBF4 FFFFFFFF
EBF8 FFFFFFFF
EBFC FFFFFFFF
EC00 FFFFFFFF
EC04 FFFFFFFF
EC08 FFFFFFFF
EC0C FFFFFFFF
EC10 FFFFFFFF
EC14 FFFFFFFF
EC18 FFFFFFFF
EC1C FFFFFFFF
EC20 FFFFFFFF
EC24 FFFFFFFF
EC28 FFFFFFFF
EC2C FFFFFFFF
EC30 FFFFFFFF
EC34 FFFFFFFF
EC38 FFFFFFFF
EC3C FFFFFFFF
EC40 FFFFFFFF
EC44 FFFFFFFF
EC48 FFFFFFFF
EC4C FFFFFFFF
EC50 FFFFFFFF
EC54 FFFFFFFF
EC58 FFFFFFFF
EC5C FFFFFFFF
EC60 FFFFFFFF
EC64 FFFFFFFF
EC68 FFFFFFFF
EC6C FFFFFFFF
EC70 FFFFFFFF
EC74 FFFFFFFF
EC78 FFFFFFFF
EC7C FFFFFFFF
EC80 FFFFFFFF
EC84 FFFFFFFF
EC88 FFFFFFFF
EC8C FFFFFFFF
EC90 FFFFFFFF
EC94 FFFFFFFF
EC98 FFFFFFFF
EC9C FFFFFFFF
ECA0 FFFFFFFF
ECA4 FFFFFFFF
ECA8 FFFFFFFF
ECAC FFFFFFFF
ECB0 FFFFFFFF
ECB4 FFFFFFFF
ECB8 FFFFFFFF
ECBC FFFFFFFF
ECC0 FFFFFFFF
ECC4 FFFFFFFF
ECC8 FFFFFFFF
ECCC FFFFFFFF
ECD0 FFFFFFFF
ECD4 FFFFFFFF
ECD8 FFFFFFFF
ECDC FFFFFFFF
ECE0 FFFFFFFF
ECE4 FFFFFFFF
ECE8 FFFFFFFF
ECEC FFFFFFFF
ECF0 FFFFFFFF
ECF4 FFFFFFFF
ECF8 FFFFFFFF
ECFC FFFFFFFF
ED00 FFFFFFFF
ED04 FFFFFFFF
ED08 FFFFFFFF
ED0C FFFFFFFF
ED10 FFFFFFFF
ED14 FFFFFFFF
ED18 FFFFFFFF
ED1C FFFFFFFF
ED20 FFFFFFFF
ED24 FFFFFFFF
ED28 FFFFFFFF
ED2C FFFFFFFF
ED30 FFFFFFFF
ED34 FFFFFFFF
ED38 FFFFFFFF
ED3C FFFFFFFF
ED40 FFFFFFFF
ED44 FFFFFFFF
ED48 FFFFFFFF
ED4C FFFFFFFF
ED50 FFFFFFFF
ED54 FFFFFFFF
ED58 FFFFFFFF
ED5C FFFFFFFF
ED60 FFFFFFFF
ED64 FFFFFFFF
ED68 FFFFFFFF
ED6C FFFFFFFF
ED70 FFFFFFFF
ED74 FFFFFFFF
ED78 FFFFFFFF
ED7C FFFFFFFF
ED80 FFFFFFFF
ED84 FFFFFFFF
ED88 FFFFFFFF
ED8C FFFFFFFF
ED90 FFFFFFFF
ED94 FFFFFFFF
ED98 FFFFFFFF
ED9C FFFFFFFF
EDA0 FFFFFFFF
EDA4 FFFFFFFF
EDA8 FFFFFFFF
EDAC FFFFFFFF
EDB0 FFFFFFFF
EDB4 FFFFFFFF
EDB8 FFFFFFFF
EDBC FFFFFFFF
EDC0 FFFFFFFF
EDC4 FFFFFFFF
EDC8 FFFFFFFF
EDCC FFFFFFFF
EDD0 FFFFFFFF
EDD4 FFFFFFFF
EDD8 FFFFFFFF
EDDC FFFFFFFF
EDE0 FFFFFFFF
EDE4 FFFFFFFF
EDE8 FFFFFFFF
EDEC FFFFFFFF
EDF0 FFFFFFFF
EDF4 FFFFFFFF
EDF8 FFFFFFFF
EDFC FFFFFFFF
EE00 FFFFFFFF
EE04 FFFFFFFF
EE08 FFFFFFFF
EE0C FFFFFFFF
EE10 FFFFFFFF
EE14 FFFFFFFF
EE18 FFFFFFFF
EE1C FFFFFFFF
EE20 FFFFFFFF
EE24 FFFFFFFF
EE28 FFFFFFFF
EE2C FFFFFFFF
EE30 FFFFFFFF
EE34 FFFFFFFF
EE38 FFFFFFFF
EE3C FFFFFFFF
EE40 FFFFFFFF
EE44 FFFFFFFF
EE48 FFFFFFFF
EE4C FFFFFFFF
EE50 FFFFFFFF
EE54 FFFFFFFF
EE58 FFFFFFFF
EE5C FFFFFFFF
EE60 FFFFFFFF
EE64 FFFFFFFF
EE68 FFFFFFFF
EE6C FFFFFFFF
EE70 FFFFFFFF
EE74 FFFFFFFF
EE78 FFFFFFFF
EE7C FFFFFFFF
EE80 FFFFFFFF
EE84 FFFFFFFF
EE88 FFFFFFFF
EE8C FFFFFFFF
EE90 FFFFFFFF
EE94 FFFFFFFF
EE98 FFFFFFFF
EE9C FFFFFFFF
EEA0 FFFFFFFF
EEA4 FFFFFFFF
EEA8 FFFFFFFF
EEAC FFFFFFFF
EEB0 FFFFFFFF
EEB4 FFFFFFFF
EEB8 FFFFFFFF
EEBC FFFFFFFF
EEC0 FFFFFFFF
EEC4 FFFFFFFF
EEC8 FFFFFFFF
EECC FFFFFFFF
EED0 FFFFFFFF
EED4 FFFFFFFF
EED8 FFFFFFFF
EEDC FFFFFFFF
EEE0 FFFFFFFF
EEE4 FFFFFFFF
EEE8 FFFFFFFF
EEEC FFFFFFFF
EEF0 FFFFFFFF
EEF4 FFFFFFFF
EEF8 FFFFFFFF
EEFC FFFFFFFF
EF00 FFFFFFFF
EF04 FFFFFFFF
EF08 FFFFFFFF
EF0C FFFFFFFF
EF10 FFFFFFFF
EF14 FFFFFFFF
EF18 FFFFFFFF
EF1C FFFFFFFF
EF20 FFFFFFFF
EF24 FFFFFFFF
EF28 FFFFFFFF
EF2C FFFFFFFF
EF30 FFFFFFFF
EF34 FFFFFFFF
EF38 FFFFFFFF
EF3C FFFFFFFF
EF40 FFFFFFFF
EF44 FFFFFFFF
EF48 FFFFFFFF
EF4C FFFFFFFF
EF50 FFFFFFFF
EF54 FFFFFFFF
EF58 FFFFFFFF
EF5C FFFFFFFF
EF60 FFFFFFFF
EF64 FFFFFFFF
EF68 FFFFFFFF
EF6C FFFFFFFF
EF70 FFFFFFFF
EF74 FFFFFFFF
EF78 FFFFFFFF
EF7C FFFFFFFF
EF80 FFFFFFFF
EF84 FFFFFFFF
EF88 FFFFFFFF
EF8C FFFFFFFF
EF90 FFFFFFFF
EF94 FFFFFFFF
EF98 FFFFFFFF
EF9C FFFFFFFF
EFA0 FFFFFFFF
EFA4 FFFFFFFF
EFA8 FFFFFFFF
EFAC FFFFFFFF
EFB0 FFFFFFFF
EFB4 FFFFFFFF
EFB8 FFFFFFFF
EFBC FFFFFFFF
EFC0 FFFFFFFF
EFC4 FFFFFFFF
EFC8 FFFFFFFF
EFCC FFFFFFFF
EFD0 FFFFFFFF
EFD4 FFFFFFFF
EFD8 FFFFFFFF
EFDC FFFFFFFF
EFE0 FFFFFFFF
EFE4 FFFFFFFF
EFE8 FFFFFFFF
EFEC FFFFFFFF
EFF0 FFFFFFFF
EFF4 FFFFFFFF
EFF8 FFFFFFFF
EFFC FFFFFFFF
F000 FFFFFFFF
F004 FFFFFFFF
F008 FFFFFFFF
F00C FFFFFFFF
F010 FFFFFFFF
F014 FFFFFFFF
F018 FFFFFFFF
F01C FFFFFFFF
F020 FFFFFFFF
F024 FFFFFFFF
F028 FFFFFFFF
F02C FFFFFFFF
F030 FFFFFFFF
F034 FFFFFFFF
F038 FFFFFFFF
F03C FFFFFFFF
F040 FFFFFFFF
F044 FFFFFFFF
F048 FFFFFFFF
F04C FFFFFFFF
F050 FFFFFFFF
F054 FFFFFFFF
F058 FFFFFFFF
F05C FFFFFFFF
F060 FFFFFFFF
F064 FFFFFFFF
F068 FFFFFFFF
F06C FFFFFFFF
F070 FFFFFFFF
F074 FFFFFFFF
F078 FFFFFFFF
F07C FFFFFFFF
F080 FFFFFFFF
F084 FFFFFFFF
F088 FFFFFFFF
F08C FFFFFFFF
F090 FFFFFFFF
F094 FFFFFFFF
F098 FFFFFFFF
F09C FFFFFFFF
F0A0 FFFFFFFF
F0A4 FFFFFFFF
F0A8 FFFFFFFF
F0AC FFFFFFFF
F0B0 FFFFFFFF
F0B4 FFFFFFFF
F0B8 FFFFFFFF
F0BC FFFFFFFF
F0C0 FFFFFFFF
F0C4 FFFFFFFF
F0C8 FFFFFFFF
F0CC FFFFFFFF
F0D0 FFFFFFFF
F0D4 FFFFFFFF
F0D8 FFFFFFFF
F0DC FFFFFFFF
F0E0 FFFFFFFF
F0E4 FFFFFFFF
F0E8 FFFFFFFF
F0EC FFFFFFFF
F0F0 FFFFFFFF
F0F4 FFFFFFFF
F0F8 FFFFFFFF
F0FC FFFFFFFF
F100 FFFFFFFF
F104 FFFFFFFF
F108 FFFFFFFF
F10C FFFFFFFF
F110 FFFFFFFF
F114 FFFFFFFF
F118 FFFFFFFF
F11C FFFFFFFF
F120 FFFFFFFF
F124 FFFFFFFF
F128 FFFFFFFF
F12C FFFFFFFF
F130 FFFFFFFF
F134 FFFFFFFF
F138 FFFFFFFF
F13C FFFFFFFF
F140 FFFFFFFF
F144 FFFFFFFF
F148 FFFFFFFF
F14C FFFFFFFF
F150 FFFFFFFF
F154 FFFFFFFF
F158 FFFFFFFF
F15C FFFFFFFF
F160 FFFFFFFF
F164 FFFFFFFF
F168 FFFFFFFF
F16C FFFFFFFF
F170 FFFFFFFF
F174 FFFFFFFF
F178 FFFFFFFF
F17C FFFFFFFF
F180 FFFFFFFF
F184 FFFFFFFF
F188 FFFFFFFF
F18C FFFFFFFF
F190 FFFFFFFF
F194 FFFFFFFF
F198 FFFFFFFF
F19C FFFFFFFF
F1A0 FFFFFFFF
F1A4 FFFFFFFF
F1A8 FFFFFFFF
F1AC FFFFFFFF
F1B0 FFFFFFFF
F1B4 FFFFFFFF
F1B8 FFFFFFFF
F1BC FFFFFFFF
F1C0 FFFFFFFF
F1C4 FFFFFFFF
F1C8 FFFFFFFF
F1CC FFFFFFFF
F1D0 FFFFFFFF
F1D4 FFFFFFFF
F1D8 FFFFFFFF
F1DC FFFFFFFF
F1E0 FFFFFFFF
F1E4 FFFFFFFF
F1E8 FFFFFFFF
F1EC FFFFFFFF
F1F0 FFFFFFFF
F1F4 FFFFFFFF
F1F8 FFFFFFFF
F1FC FFFFFFFF
F200 FFFFFFFF
F204 FFFFFFFF
F208 FFFFFFFF
F20C FFFFFFFF
F210 FFFFFFFF
F214 FFFFFFFF
F218 FFFFFFFF
F21C FFFFFFFF
F220 FFFFFFFF
F224 FFFFFFFF
F228 FFFFFFFF
F22C FFFFFFFF
F230 FFFFFFFF
F234 FFFFFFFF
F238 FFFFFFFF
F23C FFFFFFFF
F240 FFFFFFFF
F244 FFFFFFFF
F248 FFFFFFFF
F24C FFFFFFFF
F250 FFFFFFFF
F254 FFFFFFFF
F258 FFFFFFFF
F25C FFFFFFFF
F260 FFFFFFFF
F264 FFFFFFFF
F268 FFFFFFFF
F26C FFFFFFFF
F270 FFFFFFFF
F274 FFFFFFFF
F278 FFFFFFFF
F27C FFFFFFFF
F280 FFFFFFFF
F284 FFFFFFFF
F288 FFFFFFFF
F28C FFFFFFFF
F290 FFFFFFFF
F294 FFFFFFFF
F298 FFFFFFFF
F29C FFFFFFFF
F2A0 FFFFFFFF
F2A4 FFFFFFFF
F2A8 FFFFFFFF
F2AC FFFFFFFF
F2B0 FFFFFFFF
F2B4 FFFFFFFF
F2B8 FFFFFFFF
F2BC FFFFFFFF
F2C0 FFFFFFFF
F2C4 FFFFFFFF
F2C8 FFFFFFFF
F2CC FFFFFFFF
F2D0 FFFFFFFF
F2D4 FFFFFFFF
F2D8 FFFFFFFF
F2DC FFFFFFFF
F2E0 FFFFFFFF
F2E4 FFFFFFFF
F2E8 FFFFFFFF
F2EC FFFFFFFF
F2F0 FFFFFFFF
F2F4 FFFFFFFF
F2F8 FFFFFFFF
F2FC FFFFFFFF
F300 FFFFFFFF
F304 FFFFFFFF
F308 FFFFFFFF
F30C FFFFFFFF
F310 FFFFFFFF
F314 FFFFFFFF
F318 FFFFFFFF
F31C FFFFFFFF
F320 FFFFFFFF
F324 FFFFFFFF
F328 FFFFFFFF
F32C FFFFFFFF
F330 FFFFFFFF
F334 FFFFFFFF
F338 FFFFFFFF
F33C FFFFFFFF
F340 FFFFFFFF
F344 FFFFFFFF
F348 FFFFFFFF
F34C FFFFFFFF
F350 FFFFFFFF
F354 FFFFFFFF
F358 FFFFFFFF
F35C FFFFFFFF
F360 FFFFFFFF
F364 FFFFFFFF
F368 FFFFFFFF
F36C FFFFFFFF
F370 FFFFFFFF
F374 FFFFFFFF
F378 FFFFFFFF
F37C FFFFFFFF
F380 FFFFFFFF
F384 FFFFFFFF
F388 FFFFFFFF
F38C FFFFFFFF
F390 FFFFFFFF
F394 FFFFFFFF
F398 FFFFFFFF
F39C FFFFFFFF
F3A0 FFFFFFFF
F3A4 FFFFFFFF
F3A8 FFFFFFFF
F3AC FFFFFFFF
F3B0 FFFFFFFF
F3B4 FFFFFFFF
F3B8 FFFFFFFF
F3BC FFFFFFFF
F3C0 FFFFFFFF
F3C4 FFFFFFFF
F3C8 FFFFFFFF
F3CC FFFFFFFF
F3D0 FFFFFFFF
F3D4 FFFFFFFF
F3D8 FFFFFFFF
F3DC FFFFFFFF
F3E0 FFFFFFFF
F3E4 FFFFFFFF
F3E8 FFFFFFFF
F3EC FFFFFFFF
F3F0 FFFFFFFF
F3F4 FFFFFFFF
F3F8 FFFFFFFF
F3FC FFFFFFFF
F400 FFFFFFFF
F404 FFFFFFFF
F408 FFFFFFFF
F40C FFFFFFFF
F410 FFFFFFFF
F414 FFFFFFFF
F418 FFFFFFFF
F41C FFFFFFFF
F420 FFFFFFFF
F424 FFFFFFFF
F428 FFFFFFFF
F42C FFFFFFFF
F430 FFFFFFFF
F434 FFFFFFFF
F438 FFFFFFFF
F43C FFFFFFFF
F440 FFFFFFFF
F444 FFFFFFFF
F448 FFFFFFFF
F44C FFFFFFFF
F450 FFFFFFFF
F454 FFFFFFFF
F458 FFFFFFFF
F45C FFFFFFFF
F460 FFFFFFFF
F464 FFFFFFFF
F468 FFFFFFFF
F46C FFFFFFFF
F470 FFFFFFFF
F474 FFFFFFFF
F478 FFFFFFFF
F47C FFFFFFFF
F480 FFFFFFFF
F484 FFFFFFFF
F488 FFFFFFFF
F48C FFFFFFFF
F490 FFFFFFFF
F494 FFFFFFFF
F498 FFFFFFFF
F49C FFFFFFFF
F4A0 FFFFFFFF
F4A4 FFFFFFFF
F4A8 FFFFFFFF
F4AC FFFFFFFF
F4B0 FFFFFFFF
F4B4 FFFFFFFF
F4B8 FFFFFFFF
F4BC FFFFFFFF
F4C0 FFFFFFFF
F4C4 FFFFFFFF
F4C8 FFFFFFFF
F4CC FFFFFFFF
F4D0 FFFFFFFF
F4D4 FFFFFFFF
F4D8 FFFFFFFF
F4DC FFFFFFFF
F4E0 FFFFFFFF
F4E4 FFFFFFFF
F4E8 FFFFFFFF
F4EC FFFFFFFF
F4F0 FFFFFFFF
F4F4 FFFFFFFF
F4F8 FFFFFFFF
F4FC FFFFFFFF
F500 FFFFFFFF
F504 FFFFFFFF
F508 FFFFFFFF
F50C FFFFFFFF
F510 FFFFFFFF
F514 FFFFFFFF
F518 FFFFFFFF
F51C FFFFFFFF
F520 FFFFFFFF
F524 FFFFFFFF
F528 FFFFFFFF
F52C FFFFFFFF
F530 FFFFFFFF
F534 FFFFFFFF
F538 FFFFFFFF
F53C FFFFFFFF
F540 FFFFFFFF
F544 FFFFFFFF
F548 FFFFFFFF
F54C FFFFFFFF
F550 FFFFFFFF
F554 FFFFFFFF
F558 FFFFFFFF
F55C FFFFFFFF
F560 FFFFFFFF
F564 FFFFFFFF
F568 FFFFFFFF
F56C FFFFFFFF
F570 FFFFFFFF
F574 FFFFFFFF
F578 FFFFFFFF
F57C FFFFFFFF
F580 FFFFFFFF
F584 FFFFFFFF
F588 FFFFFFFF
F58C FFFFFFFF
F590 FFFFFFFF
F594 FFFFFFFF
F598 FFFFFFFF
F59C FFFFFFFF
F5A0 FFFFFFFF
F5A4 FFFFFFFF
F5A8 FFFFFFFF
F5AC FFFFFFFF
F5B0 FFFFFFFF
F5B4 FFFFFFFF
F5B8 FFFFFFFF
F5BC FFFFFFFF
F5C0 FFFFFFFF
F5C4 FFFFFFFF
F5C8 FFFFFFFF
F5CC FFFFFFFF
F5D0 FFFFFFFF
F5D4 FFFFFFFF
F5D8 FFFFFFFF
F5DC FFFFFFFF
F5E0 FFFFFFFF
F5E4 FFFFFFFF
F5E8 FFFFFFFF
F5EC FFFFFFFF
F5F0 FFFFFFFF
F5F4 FFFFFFFF
F5F8 FFFFFFFF
F5FC FFFFFFFF
F600 FFFFFFFF
F604 FFFFFFFF
F608 FFFFFFFF
F60C FFFFFFFF
F610 FFFFFFFF
F614 FFFFFFFF
F618 FFFFFFFF
F61C FFFFFFFF
F620 FFFFFFFF
F624 FFFFFFFF
F628 FFFFFFFF
F62C FFFFFFFF
F630 FFFFFFFF
F634 FFFFFFFF
F638 FFFFFFFF
F63C FFFFFFFF
F640 FFFFFFFF
F644 FFFFFFFF
F648 FFFFFFFF
F64C FFFFFFFF
F650 FFFFFFFF
F654 FFFFFFFF
F658 FFFFFFFF
F65C FFFFFFFF
F660 FFFFFFFF
F664 FFFFFFFF
F668 FFFFFFFF
F66C FFFFFFFF
F670 FFFFFFFF
F674 FFFFFFFF
F678 FFFFFFFF
F67C FFFFFFFF
F680 FFFFFFFF
F684 FFFFFFFF
F688 FFFFFFFF
F68C FFFFFFFF
F690 FFFFFFFF
F694 FFFFFFFF
F698 FFFFFFFF
F69C FFFFFFFF
F6A0 FFFFFFFF
F6A4 FFFFFFFF
F6A8 FFFFFFFF
F6AC FFFFFFFF
F6B0 FFFFFFFF
F6B4 FFFFFFFF
F6B8 FFFFFFFF
F6BC FFFFFFFF
F6C0 FFFFFFFF
F6C4 FFFFFFFF
F6C8 FFFFFFFF
F6CC FFFFFFFF
F6D0 FFFFFFFF
F6D4 FFFFFFFF
F6D8 FFFFFFFF
F6DC FFFFFFFF
F6E0 FFFFFFFF
F6E4 FFFFFFFF
F6E8 FFFFFFFF
F6EC FFFFFFFF
F6F0 FFFFFFFF
F6F4 FFFFFFFF
F6F8 FFFFFFFF
F6FC FFFFFFFF
F700 FFFFFFFF
F704 FFFFFFFF
F708 FFFFFFFF
F70C FFFFFFFF
F710 FFFFFFFF
F714 FFFFFFFF
F718 FFFFFFFF
F71C FFFFFFFF
F720 FFFFFFFF
F724 FFFFFFFF
F728 FFFFFFFF
F72C FFFFFFFF
F730 FFFFFFFF
F734 FFFFFFFF
F738 FFFFFFFF
F73C FFFFFFFF
F740 FFFFFFFF
F744 FFFFFFFF
F748 FFFFFFFF
F74C FFFFFFFF
F750 FFFFFFFF
F754 FFFFFFFF
F758 FFFFFFFF
F75C FFFFFFFF
F760 FFFFFFFF
F764 FFFFFFFF
F768 FFFFFFFF
F76C FFFFFFFF
F770 FFFFFFFF
F774 FFFFFFFF
F778 FFFFFFFF
F77C FFFFFFFF
F780 FFFFFFFF
F784 FFFFFFFF
F788 FFFFFFFF
F78C FFFFFFFF
F790 FFFFFFFF
F794 FFFFFFFF
F798 FFFFFFFF
F79C FFFFFFFF
F7A0 FFFFFFFF
F7A4 FFFFFFFF
F7A8 FFFFFFFF
F7AC FFFFFFFF
F7B0 FFFFFFFF
F7B4 FFFFFFFF
F7B8 FFFFFFFF
F7BC FFFFFFFF
F7C0 FFFFFFFF
F7C4 FFFFFFFF
F7C8 FFFFFFFF
F7CC FFFFFFFF
F7D0 FFFFFFFF
F7D4 FFFFFFFF
F7D8 FFFFFFFF
F7DC FFFFFFFF
F7E0 FFFFFFFF
F7E4 FFFFFFFF
F7E8 FFFFFFFF
F7EC FFFFFFFF
F7F0 FFFFFFFF
F7F4 FFFFFFFF
F7F8 FFFFFFFF
F7FC FFFFFFFF
              | 165|
              | 166|******************************************
              | 167|* DEFAULT THE ROM BEGINNING ADDRESS TO 'ROMBEG'
              | 168|* ASSIST09 IS POSITION ADDRESS INDEPENDENT, HOWEVER
              | 169|* WE ASSEMBLE ASSUMING CONTROL OF THE HARDWARE VECTORS.
              | 170|* NOTE THAT THE WORK RAM PAGE MUST BE 'RAMOFS'
              | 171|* FROM THE ROM BEGINNING ADDRESS.
              | 172|********************************************
              | 173|        ORG     ROMBEG          ; ROM ASSEMBLY/DEFAULT ADDRESS
              | 174|
              | 175|*****************************************************
              | 176|* BLDVTR - BUILD ASSIST09 VECTOR TABLE
              | 177|* HARDWARE RESET CALLS THIS SUBROUTINE TO BUILD THE
              | 178|* ASSIST09 VECTOR TABLE. THIS SUBROUTINE RESIDES AT
              | 179|* THE FIRST BYTE OF THE ASSIST09 ROM, AND CAN BE
              | 180|* CALLED VIA EXTERNAL CONTROL CODE FOR REMOTE
              | 181|* ASSIST09 EXECUTION.
              | 182|* INPUT: S->VALID STACK RAM
              | 183|* OUTPUT: U->VECTOR TABLE ADDRESS
              | 184|* DPR->ASSIST09 WORK AREA PAGE
              | 185|* THE VECTOR TABLE AND DEFAULTS ARE INITIALIZED
              | 186|* ALL REGISTERS VOLATILE
              | 187|*************************************************
F800 308D68BE | 188|BLDVTR  LEAX    VECTAB,PCR      ; ADDRESS VECTOR TABLE
F804 1F10     | 189|        TFR     X,D             ; OBTAIN BASE PAGE ADDRESS
F806 1F8B     | 190|        TFR     A,DP            ; SETUP DPR
F808 979D     | 191|        STA     <BASEPG         ; STORE FOR QUICK REFERENCE
F80A 3384     | 192|        LEAU    ,X              ; RETURN TABLE TO CALLER
F80C 318C35   | 193|        LEAY    <INITVT,PCR     ; LOAD FROM ADDR
F80F EF81     | 194|        STU     ,X++            ; INIT VECTOR TABLE ADDRESS
F811 C616     | 195|        LDB     #NUMVTR-5       ; NUMBER RELOCATABLE VECTORS
F813 3404     | 196|        PSHS    B               ; STORE INDEX ON STACK
F815 1F20     | 197|BLD2    TFR     Y,D             ; PREPARE ADDRESS RESOLVE
F817 E3A1     | 198|        ADDD    ,Y++            ; TO ABSOLUTE ADDRESS
F819 ED81     | 199|        STD     ,X++            ; INTO VECTOR TABLE
F81B 6AE4     | 200|        DEC     ,S              ; COUNT DOWN
F81D 26F6     | 201|        BNE     BLD2            ; BRANCH IF MORE TO INSERT
F81F C60D     | 202|        LDB     #INTVE-INTVS    ; STATIC VALUE INIT LENGTH
F821 A6A0     | 203|BLD3    LDA     ,Y+             ; LOAD NEXT BYTE
F823 A780     | 204|        STA     ,X+             ; STORE INTO POSITION
F825 5A       | 205|        DECB                    ; COUNT DOWN
F826 26F9     | 206|        BNE     BLD3            ; LOOP UNTIL DONE
F828 318DF7D4 | 207|        LEAY    ROM2OF,PCR      ; TEST POSSIBLE EXTENSION ROM
F82C 8E20FE   | 208|        LDX     #$20FE          ; LOAD "BRA *" FLAG PATTERN
F82F ACA1     | 209|        CMPX    ,Y++            ; ? EXTENDED ROM HERE
F831 2602     | 210|        BNE     BLDRTN          ; BRANCH NOT OUR ROM TO RETURN
F833 ADA4     | 211|        JSR     ,Y              ; CALL EXTENDED ROM INITIALIZE
F835 3584     | 212|BLDRTN  PULS    PC,B            ; RETURN TO INITIALIZER
              | 213|
              | 214|*****************************************************
              | 215|*                RESET ENTRY POINT
              | 216|* HARDWARE RESET ENTERS HERE IF ASSIST09 IS ENABLED
              | 217|* TO RECEIVE THE MC6809 HARDWARE VECTORS. WE CALL
              | 218|* THE BLDVTR SUBROUTINE TO INITIALIZE THE VECTOR
              | 219|* TABLE, STACK, AND THEN FIREUP THE MONITOR VIA SWI
              | 220|* CALL.
              | 221|*******************************************************
F837 328D6816 | 222|RESET   LEAS    STACK,PCR       ; SETUP INITIAL STACK
F83B 8DC3     | 223|        BSR     BLDVTR          ; BUILD VECTOR TABLE
F83D 4F       | 224|RESET2  CLRA                    ; ISSUE STARTUP MESSAGE
F83E 1F8B     | 225|        TFR     A,DP            ; DEFAULT TO PAGE ZERO
F840 3F       | 226|        SWI                     ; PERFORM MONITOR FIREUP
F841 08       | 227|        FCB     MONITR          ; TO ENTER COMMAND PROCESSING
F842 20F9     | 228|        BRA     RESET2          ; REENTER MONITOR IF 'CONTINUE'
              | 229|
              | 230|******************************************************
              | 231|*        INITVT - INITIAL VECTOR TABLE
              | 232|* THIS TABLE IS RELOCATED TO RAM AND REPRESENTS THE
              | 233|* INITIAL STATE OF THE VECTOR TABLE. ALL ADDRESSES
              | 234|* ARE CONVERTED TO ABSOLUTE FORM. THIS TABLE STARTS
              | 235|* WITH THE SECOND ENTRY, ENDS WITH STATIC CONSTANT
              | 236|* INITIALIZATION DATA WHICH CARRIES BEYOND THE TABLE.
              | 237|************************************************
F844 0158     | 238|INITVT  FDB     CMDTBL-*        ; DEFAULT FIRST COMMAND TABLE
F846 0292     | 239|        FDB     RSRVDR-*        ; DEFAULT UNDEFINED HARDWARE VECTOR
F848 0290     | 240|        FDB     SWI3R-*         ; DEFAULT SWI3
F84A 028E     | 241|        FDB     SWI2R-*         ; DEFAULT SWI2
F84C 0270     | 242|        FDB     FIRQR-*         ; DEFAULT FIRQ
F84E 028A     | 243|        FDB     IRQR-*          ; DEFAULT IRQ ROUTINE
F850 0045     | 244|        FDB     SWIR-*          ; DEFAULT SWI ROUTINE
F852 022B     | 245|        FDB     NMIR-*          ; DEFAULT NMI ROUTINE
F854 FFE3     | 246|        FDB     RESET-*         ; RESTART VECTOR
F856 0290     | 247|        FDB     CION-*          ; DEFAULT CION
F858 0284     | 248|        FDB     CIDTA-*         ; DEFAULT CIDTA
F85A 0296     | 249|        FDB     CIOFF-*         ; DEFAULT CIOFF
F85C 028A     | 250|        FDB     COON-*          ; DEFAULT COON
F85E 0293     | 251|        FDB     CODTA-*         ; DEFAULT CODTA
F860 0290     | 252|        FDB     COOFF-*         ; DEFAULT COOFF
F862 039A     | 253|        FDB     HSDTA-*         ; DEFAULT HSDTA
F864 02B7     | 254|        FDB     BSON-*          ; DEFAULT BSON
F866 02D2     | 255|        FDB     BSDTA-*         ; DEFAULT BSDTA
F868 02BF     | 256|        FDB     BSOFF-*         ; DEFAULT BSOFF
F86A 6892     | 257|        FDB     PAUSER-*        ; DEFAULT PAUSE ROUTINE
F86C 047D     | 258|        FDB     EXP1-*          ; DEFAULT EXPRESSION ANALYZER
F86E 012D     | 259|        FDB     CMDTB2-*        ; DEFAULT SECOND COMMAND TABLE
              | 260|* CONSTANTS
F870 A000     | 261|INTVS   FDB     ACIA            ; DEFAULT ACIA
F872 0005     | 262|        FCB     DFTCHP,DFTNLP   ; DEFAULT NULL PADDS
F874 0000     | 263|        FDB     0               ; DEFAULT ECHO
F876 0000     | 264|        FDB     PTM             ; DEFAULT PTM
F878 0000     | 265|        FDB     0               ; INITIAL STACK TRACE LEVEL
F87A 00       | 266|        FCB     0               ; INITIAL BREAKPOINT COUNT
F87B 00       | 267|        FCB     0               ; SWI BREAKPOINT LEVEL
F87C 39       | 268|        FCB     $39             ; DEFAULT PAUSE ROUTINE (RTS)
              | 269|INTVE   EQU     *
              | 270|*B
              | 271|***********************************************
              | 272|*            ASSIST09 SWI HANDLER
              | 273|* THE SWI HANDLER PROVIDES ALL INTERFACING NECESSARY
              | 274|* FOR A USER PROGRAM. A FUNCTION BYTE IS ASSUMED TO
              | 275|* FOLLOW THE SWI INSTRUCTION. IT IS BOUND CHECKED
              | 276|* AND THE PROPER ROUTINE IS GIVEN CONTROL. THIS
              | 277|* INVOCATION MAY ALSO BE A BREAKPOINT INTERRUPT.
              | 278|* IF SO, THE BREAKPOINT HANDLER IS ENTERED.
              | 279|* INPUT: MACHINE STATE DEFINED FOR SWI
              | 280|* OUTPUT: VARIES ACCORDING TO FUNCTION CALLED. PC ON
              | 281|* CALLERS STACK INCREMENTED BY ONE IF VALID CALL.
              | 282|* VOLATILE REGISTERS: SEE FUNCTIONS CALLED
              | 283|* STATE: RUNS DISABLED UNLESS FUNCTION CLEARS I FLAG.
              | 284|************************************************
              | 285|* SWI FUNCTION VECTOR TABLE
F87D 0194     | 286|SWIVTB  FDB     ZINCH-SWIVTB    ; INCHNP
F87F 01B1     | 287|        FDB     ZOTCH1-SWIVTB   ; OUTCH
F881 01CB     | 288|        FDB     ZPDTA1-SWIVTB   ; PDATA1
F883 01C3     | 289|        FDB     ZPDATA-SWIVTB   ; PDATA
F885 0175     | 290|        FDB     ZOT2HS-SWIVTB   ; OUT2HS
F887 0173     | 291|        FDB     ZOT4HS-SWIVTB   ; OUT4HS
F889 01C0     | 292|        FDB     ZPCRLF-SWIVTB   ; PCRLF
F88B 0179     | 293|        FDB     ZSPACE-SWIVTB   ; SPACE
F88D 0055     | 294|        FDB     ZMONTR-SWIVTB   ; MONITR
F88F 017D     | 295|        FDB     ZVSWTH-SWIVTB   ; VCTRSW
F891 0256     | 296|        FDB     ZBKPNT-SWIVTB   ; BREAKPOINT
F893 01D1     | 297|        FDB     ZPAUSE-SWIVTB   ; TASK PAUSE
              | 298|
F895 6A8D67F7 | 299|SWIR    DEC     SWICNT,PCR      ; UP "SWI" LEVEL FOR TRACE
F899 170225   | 300|        LBSR    LDDP            ; SETUP PAGE AND VERIFY STACK
              | 301|* CHECK FOR BREAKPOINT TRAP
F89C EE6A     | 302|        LDU     10,S            ; LOAD PROGRAM COUNTER
F89E 335F     | 303|        LEAU    -1,U            ; BACK TO SWI ADDRESS
F8A0 0DFB     | 304|        TST     <SWIBFL         ; ? THIS "SWI" BREAKPOINT
F8A2 2611     | 305|        BNE     SWIDNE          ; BRANCH IF SO TO LET THROUGH
F8A4 17069B   | 306|        LBSR    CBKLDR          ; OBTAIN BREAKPOINT POINTERS
F8A7 50       | 307|        NEGB                    ; OBTAIN POSITIVE COUNT
F8A8 5A       | 308|SWILP   DECB                    ; COUNT DOWN
F8A9 2B0A     | 309|        BMI     SWIDNE          ; BRANCH WHEN DONE
F8AB 11A3A1   | 310|        CMPU    ,Y++            ; ? WAS THIS A BREAKPOINT
F8AE 26F8     | 311|        BNE     SWILP           ; BRANCH IF NOT
F8B0 EF6A     | 312|        STU     10,S            ; SET PROGRAM COUNTER BACK
F8B2 16021E   | 313|        LBRA    ZBKPNT          ; GO DO BREAKPOINT
F8B5 0FFB     | 314|SWIDNE  CLR     <SWIBFL         ; CLEAR IN CASE SET
F8B7 3706     | 315|        PULU    D               ; OBTAIN FUNCTION BYTE, UP PC
F8B9 C10B     | 316|        CMPB    #NUMFUN         ; ? TOO HIGH
F8BB 1022020F | 317|        LBHI    ERROR           ; YES, DO BREAKPOINT
F8BF EF6A     | 318|        STU     10,S            ; BUMP PROGRAM COUNTER PAST SWI
F8C1 58       | 319|        ASLB                    ; FUNCTION CODE TIMES TWO
F8C2 338CB8   | 320|        LEAU    SWIVTB,PCR      ; OBTAIN VECTOR BRANCH ADDRESS
F8C5 ECC5     | 321|        LDD     B,U             ; LOAD OFFSET
F8C7 6ECB     | 322|        JMP     D,U             ; JUMP TO ROUTINE
              | 323|
              | 324|**********************************************
              | 325|* REGISTERS TO FUNCTION ROUTINES:
              | 326|*  DP-> WORK AREA PAGE
              | 327|*  D,Y,U=UNRELIABLE           X=AS CALLED FROM USER
              | 328|*  S=AS FROM SWI INTERRUPT
              | 329|*********************************************
              | 330|
              | 331|**************************************************
              | 332|*            [SWI FUNCTION 8]
              | 333|*              MONITOR ENTRY
              | 334|*  FIREUP THE ASSIST09 MONITOR.
              | 335|*  THE STACK WITH ITS VALUES FOR THE DIRECT PAGE
              | 336|*  REGISTER AND CONDITION CODE FLAGS ARE USED AS IS.
              | 337|*   1) INITIALIZE CONSOLE I/O
              | 338|*   2) OPTIONALLY PRINT SIGNON
              | 339|*   3) INITIALIZE PTM FOR SINGLE STEPPING
              | 340|*   4) ENTER COMMAND PROCESSOR
              | 341|* INPUT: A=0 INIT CONSOLE AND PRINT STARTUP MESSAGE
              | 342|*        A#0 OMIT CONSOLE INIT AND STARTUP MESSAGE
              | 343|*************************************************
              | 344|
F8C9 41535349 | 345|SIGNON  FCC     /ASSIST09/      ; SIGNON EYE-CATCHER
F8CD 53543039
F8D1 04       | 346|        FCB     EOT
F8D2 10DF97   | 347|ZMONTR  STS     <RSTACK         ; SAVE FOR BAD STACK RECOVERY
F8D5 6D61     | 348|        TST     1,S             ; ? INIT CONSOLE AND SEND MSG
F8D7 260D     | 349|        BNE     ZMONT2          ; BRANCH IF NOT
F8D9 AD9D67F9 | 350|        JSR     [VECTAB+.CION,PCR] ; READY CONSOLE INPUT
F8DD AD9D67FB | 351|        JSR     [VECTAB+.COON,PCR] ; READY CONSOLE OUTPUT
F8E1 308CE5   | 352|        LEAX    SIGNON,PCR         ; READY SIGNON EYE-CATCHER
F8E4 3F       | 353|        SWI                     ; PERFORM
F8E5 03       | 354|        FCB     PDATA           ; PRINT STRING
F8E6 9EF6     | 355|ZMONT2  LDX     <VECTAB+.PTM    ; LOAD PTM ADDRESS
F8E8 270D     | 356|        BEQ     CMD             ; BRANCH IF NOT TO USE A PTM
F8EA 6F02     | 357|        CLR     PTMTM1-PTM,X    ; SET LATCH TO CLEAR RESET
F8EC 6F03     | 358|        CLR     PTMTM1+1-PTM,X  ; AND SET GATE HIGH
F8EE CC01A6   | 359|        LDD     #$01A6          ; SETUP TIMER 1 MODE
F8F1 A701     | 360|        STA     PTMC2-PTM,X     ; SETUP FOR CONTROL REGISTER1
F8F3 E784     | 361|        STB     PTMC13-PTM,X    ; SET OUTPUT ENABLED/
              | 362|* SINGLE SHOT/ DUAL 8 BIT/INTERNAL MODE/OPERATE
F8F5 6F01     | 363|        CLR     PTMC2-PTM,X     ; SET CR2 BACK TO RESET FORM
              | 364|* FALL INTO COMMAND PROCESSOR
              | 365|
              | 366|***************************************************
              | 367|*          COMMAND HANDLER
              | 368|*  BREAKPOINTS ARE REMOVED AT THIS TIME.
              | 369|*  PROMPT FOR A COMMAND, AND STORE ALL CHARACTERS
              | 370|*  UNTIL A SEPARATOR ON THE STACK.
              | 371|*  SEARCH FOR FIRST MATCHING COMMAND SUBSET,
              | 372|*  CALL IT OR GIVE '?' RESPONSE.
              | 373|*  DURING COMMAND SEARCH:
              | 374|*      B=OFFSET TO NEXT ENTRY ON X
              | 375|*      U=SAVED S
              | 376|*      U-1=ENTRY SIZE+2
              | 377|*      U-2=VALID NUMBER FLAG (>=0 VALID)/COMPARE CNT
              | 378|*      U-3=CARRIAGE RETURN FLAG (0=CR HAS BEEN DONE)
              | 379|*      U-4=START OF COMMAND STORE
              | 380|*      S+0=END OF COMMAND STORE
              | 381|***********************************************
              | 382|
F8F7 3F       | 383|CMD     SWI                     ; TO NEW LINE
F8F8 06       | 384|        FCB     PCRLF           ; FUNCTION
              | 385|* DISARM THE BREAKPOINTS
F8F9 170646   | 386|CMDNEP  LBSR    CBKLDR          ; OBTAIN BREAKPOINT POINTERS
F8FC 2A0C     | 387|        BPL     CMDNOL          ; BRANCH IF NOT ARMED OR NONE
F8FE 50       | 388|        NEGB                    ; MAKE POSITIVE
F8FF D7FA     | 389|        STB     <BKPTCT         ; FLAG AS DISARMED
F901 5A       | 390|CMDDDL  DECB                    ; ? FINISHED
F902 2B06     | 391|        BMI     CMDNOL          ; BRANCH IF SO
F904 A630     | 392|        LDA     -NUMBKP*2,Y     ; LOAD OPCODE STORED
F906 A7B1     | 393|        STA     [,Y++]          ; STORE BACK OVER "SWI"
F908 20F7     | 394|        BRA     CMDDDL          ; LOOP UNTIL DONE
F90A AE6A     | 395|CMDNOL  LDX     10,S            ; LOAD USERS PROGRAM COUNTER
F90C 9F93     | 396|        STX     <PCNTER         ; SAVE FOR EXPRESSION ANALYZER
F90E 863E     | 397|        LDA     #PROMPT         ; LOAD PROMPT CHARACTER
F910 3F       | 398|        SWI                     ; SEND TO OUTPUT HANDLER
F911 01       | 399|        FCB     OUTCH           ; FUNCTION
F912 33E4     | 400|        LEAU    ,S              ; REMEMBER STACK RESTORE ADDRESS
F914 DF95     | 401|        STU     <PSTACK         ; REMEMBER STACK FOR ERROR USE
F916 4F       | 402|        CLRA                    ; PREPARE ZERO
F917 5F       | 403|        CLRB                    ; PREPARE ZERO
F918 DD9B     | 404|        STD     <NUMBER         ; CLEAR NUMBER BUILD AREA
F91A DD8F     | 405|        STD     <MISFLG         ; CLEAR MISCEL. AND SWICNT FLAGS
F91C DD91     | 406|        STD     <TRACEC         ; CLEAR TRACE COUNT
F91E C602     | 407|        LDB     #2              ; SET D TO TWO
F920 3407     | 408|        PSHS    D,CC            ; PLACE DEFAULTS ONTO STACK
              | 409|* CHECK FOR "QUICK" COMMANDS.
F922 170454   | 410|        LBSR    READ            ; OBTAIN FIRST CHARACTER
F925 308D0581 | 411|        LEAX    CDOT+2,PCR      ; PRESET FOR SINGLE TRACE
F929 812E     | 412|        CMPA    #'.             ; ? QUICK TRACE
F92B 275A     | 413|        BEQ     CMDXQT          ; BRANCH EQUAL FOR TRACE ONE
F92D 308D04E9 | 414|        LEAX    CMPADP+2,PCR    ; READY MEMORY ENTRY POINT
F931 812F     | 415|        CMPA    #'/             ; ? OPEN LAST USED MEMORY
F933 2752     | 416|        BEQ     CMDXQT          ; BRANCH TO DO IT IF SO
              | 417|* PROCESS NEXT CHARACTER
F935 8120     | 418|CMD2    CMPA    #'              ; ? BLANK OR DELIMITER
F937 2314     | 419|        BLS    CMDGOT           ; BRANCH YES, WE HAVE IT
F939 3402     | 420|        PSHS   A                ; BUILD ONTO STACK
F93B 6C5F     | 421|        INC    -1,U             ; COUNT THIS CHARACTER
F93D 812F     | 422|        CMPA   #'/              ; ? MEMORY COMMAND
F93F 274F     | 423|        BEQ    CMDMEM           ; BRANCH IF SO
F941 17040B   | 424|        LBSR   BLDHXC           ; TREAT AS HEX VALUE
F944 2702     | 425|        BEQ    CMD3             ; BRANCH IF STILL VALID NUMBER
F946 6A5E     | 426|        DEC    -2,U             ; FLAG AS INVALID NUMBER
F948 17042E   | 427|CMD3    LBSR   READ             ; OBTAIN NEXT CHARACTER
F94B 20E8     | 428|        BRA    CMD2             ; TEST NEXT CHARACTER
              | 429|* GOT COMMAND, NOW SEARCH TABLES
F94D 800D     | 430|CMDGOT  SUBA   #CR              ; SET ZERO IF CARRIAGE RETURN
F94F A75D     | 431|        STA    -3,U             ; SETUP FLAG
F951 9EC4     | 432|        LDX    <VECTAB+.CMDL1   ; START WITH FIRST CMD LIST
F953 E680     | 433|CMDSCH  LDB    ,X+              ; LOAD ENTRY LENGTH
F955 2A10     | 434|        BPL    CMDSME           ; BRANCH IF NOT LIST END
F957 9EEE     | 435|        LDX    <VECTAB+.CMDL2   ; NOW TO SECOND CMD LITS
F959 5C       | 436|        INCB                    ; ? TO CONTINUE TO DEFAULT LIST
F95A 27F7     | 437|        BEQ     CMDSCH          ; BRANCH IF SO
F95C 10DE95   | 438|CMDBAD  LDS     <PSTACK         ; RESTORE STACK
F95F 308D015A | 439|        LEAX    ERRMSG,PCR      ; POINT TO ERROR STRING
F963 3F       | 440|        SWI                     ; SEND OUT
F964 02       | 441|        FCB     PDATA1          ; TO CONSOLE
F965 2090     | 442|        BRA     CMD             ; AND TRY AGAIN
              | 443|* SEARCH NEXT ENTRY
F967 5A       | 444|CMDSME  DECB                    ; TAKE ACCOUNT OF LENGTH BYTE
F968 E15F     | 445|        CMPB    -1,U            ; ? ENTERED LONGER THAN ENTRY
F96A 2403     | 446|        BHS     CMDSIZ          ; BRANCH IF NOT TOO LONG
F96C 3A       | 447|CMDFLS  ABX                     ; SKIP TO NEXT ENTRY
F96D 20E4     | 448|        BRA     CMDSCH          ; AND TRY NEXT
F96F 315D     | 449|CMDSIZ  LEAY    -3,U            ; PREPARE TO COMPARE
F971 A65F     | 450|        LDA     -1,U            ; LOAD SIZE+2
F973 8002     | 451|        SUBA    #2              ; TO ACTUAL SIZE ENTERED
F975 A75E     | 452|        STA     -2,U            ; SAVE SIZE FOR COUNTDOWN
F977 5A       | 453|CMDCMP  DECB                    ; DOWN ONE BYTE
F978 A680     | 454|        LDA     ,X+             ; NEXT COMMAND CHARACTER
F97A A1A2     | 455|        CMPA    ,-Y             ; ? SAME AS THAT ENTERED
F97C 26EE     | 456|        BNE     CMDFLS          ; BRANCH TO FLUSH IF NOT
F97E 6A5E     | 457|        DEC     -2,U            ; COUNT DOWN LENGTH OF ENTRY
F980 26F5     | 458|        BNE     CMDCMP          ; BRANCH IF MORE TO TEST
F982 3A       | 459|        ABX                     ; TO NEXT ENTRY
F983 EC1E     | 460|        LDD     -2,X            ; LOAD OFFSET
F985 308B     | 461|        LEAX    D,X             ; COMPUTE ROUTINE ADDRESS+2
F987 6D5D     | 462|CMDXQT  TST     -3,U            ; SET CC FOR CARRIAGE RETURN TEST
F989 32C4     | 463|        LEAS    ,U              ; DELETE STACK WORK AREA
F98B AD1E     | 464|        JSR     -2,X            ; CALL COMMAND
F98D 16FF7A   | 465|        LBRA    CMDNOL          ; GO GET NEXT COMMAND
F990 6D5E     | 466|CMDMEM  TST     -2,U            ; ? VALID HEX NUMBER ENTERED
F992 2BC8     | 467|        BMI     CMDBAD          ; BRANCH ERROR IF NOT
F994 3088AE   | 468|        LEAX    <CMEMN-CMPADP,X ; TO DIFFERENT ENTRY
F997 DC9B     | 469|        LDD     <NUMBER         ; LOAD NUMBER ENTERED
F999 20EC     | 470|        BRA     CMDXQT          ; AND ENTER MEMORY COMMAND
              | 471|
              | 472|** COMMANDS ARE ENTERED AS A SUBROUTINE WITH:
              | 473|**    DPR->ASSIST09 DIRECT PAGE WORK AREA
              | 474|**    Z=1 CARRIAGE RETURN ENTERED
              | 475|**    Z=0 NON CARRIAGE RETURN DELIMITER
              | 476|**    S=NORMAL RETURN ADDRESS
              | 477|** THE LABEL "CMDBAD" MAY BE ENTERED TO ISSUE AN
              | 478|** AN ERROR FLAG (*).
              | 479|**************************************************
              | 480|*       ASSIST09 COMMAND TABLES
              | 481|* THESE ARE THE DEFAULT COMMAND TABLES. EXTERNAL
              | 482|* TABLES OF THE SAME FORMAT MAY EXTEND/REPLACE
              | 483|* THESE BY USING THE VECTOR SWAP FUNCTION.
              | 484|*
              | 485|* ENTRY FORMAT:
              | 486|*    +0...TOTAL SIZE OF ENTRY (INCLUDING THIS BYTE)
              | 487|*    +1...COMMAND STRING
              | 488|*    +N...TWO BYTE OFFSET TO COMMAND (ENTRYADDR-*)
              | 489|*
              | 490|* THE TABLES TERMINATE WITH A ONE BYTE -1 OR -2.
              | 491|* THE -1 CONTINUES THE COMMAND SEARCH WITH THE
              | 492|*        SECOND COMMAND TABLE.
              | 493|* THE -2 TERMINATES COMMAND SEARCHES.
              | 494|*****************************************************
              | 495|
              | 496|* THIS IS THE DEFAULT LIST FOR THE SECOND COMMAND
              | 497|* LIST ENTRY.
              | 498|
F99B FE       | 499|CMDTB2  FCB     -2              ; STOP COMMAND SEARCHES
              | 500|
              | 501|* THIS IS THE DEFAULT LIST FOR THE FIRST COMMAND
              | 502|* LIST ENTRY.
              | 503|
              | 504|CMDTBL  EQU     *               ; MONITOR COMMAND TABLE
F99C 04       | 505|        FCB     4
F99D 42       | 506|        FCC     /B/             ; 'BREAKPOINT' COMMAND
F99E 054D     | 507|        FDB     CBKPT-*
F9A0 04       | 508|        FCB     4
F9A1 43       | 509|        FCC     /C/             ; 'CALL' COMMAND
F9A2 0417     | 510|        FDB     CCALL-*
F9A4 04       | 511|        FCB     4
F9A5 44       | 512|        FCC     /D/             ; 'DISPLAY' COMMAND
F9A6 049D     | 513|        FDB     CDISP-*
F9A8 04       | 514|        FCB     4
F9A9 45       | 515|        FCC     /E/             ; 'ENCODE' COMMAND
F9AA 059F     | 516|        FDB     CENCDE-*
F9AC 04       | 517|        FCB     4
F9AD 47       | 518|        FCC     /G/             ; 'GO' COMMAND
F9AE 03D2     | 519|        FDB     CGO-*
F9B0 04       | 520|        FCB     4
F9B1 4C       | 521|        FCC     /L/             ; 'LOAD' COMMAND
F9B2 04DD     | 522|        FDB     CLOAD-*
F9B4 04       | 523|        FCB     4
F9B5 4D       | 524|        FCC     /M/             ; 'MEMORY' COMMAND
F9B6 040D     | 525|        FDB     CMEM-*
F9B8 04       | 526|        FCB     4
F9B9 4E       | 527|        FCC     /N/             ; 'NULLS' COMMAND
F9BA 04FD     | 528|        FDB     CNULLS-*
F9BC 04       | 529|        FCB     4
F9BD 4F       | 530|        FCC     /O/             ; 'OFFSET' COMMAND
F9BE 050A     | 531|        FDB     COFFS-*
F9C0 04       | 532|        FCB     4
F9C1 50       | 533|        FCC     /P/             ; 'PUNCH' COMMAND
F9C2 04AF     | 534|        FDB     CPUNCH-*
F9C4 04       | 535|        FCB     4
F9C5 52       | 536|        FCC     /R/             ; 'REGISTERS' COMMAND
F9C6 0284     | 537|        FDB     CREG-*
F9C8 04       | 538|        FCB     4
F9C9 53       | 539|        FCC     /S/             ; 'STLEVEL' COMMAND
F9CA 04F2     | 540|        FDB     CSTLEV-*
F9CC 04       | 541|        FCB     4
F9CD 54       | 542|        FCC     /T/             ; 'TRACE' COMMAND
F9CE 04D6     | 543|        FDB     CTRACE-*
F9D0 04       | 544|        FCB     4
F9D1 56       | 545|        FCC     /V/             ; 'VERIFY' COMMAND
F9D2 04CF     | 546|        FDB     CVER-*
F9D4 04       | 547|        FCB     4
F9D5 57       | 548|        FCC     /W/             ; 'WINDOW' COMMAND
F9D6 0468     | 549|        FDB     CWINDO-*
F9D8 FF       | 550|        FCB     -1              ; END, CONTINUE WITH THE SECOND
              | 551|
              | 552|*************************************************
              | 553|*             [SWI FUNCTIONS 4 AND 5]
              | 554|*      4 - OUT2HS - DECODE BYTE TO HEX AND ADD SPACE
              | 555|*      5 - OUT4HS - DECODE WORD TO HEX AND ADD SPACE
              | 556|* INPUT: X->BYTE OR WORD TO DECODE
              | 557|* OUTPUT: CHARACTERS SENT TO OUTPUT HANDLER
              | 558|*         X->NEXT BYTE OR WORD
              | 559|*************************************************
F9D9 A680     | 560|ZOUT2H  LDA     ,X+             ; LOAD NEXT BYTE
F9DB 3406     | 561|        PSHS    D               ; SAVE - DO NOT REREAD
F9DD C610     | 562|        LDB     #16             ; SHIFT BY 4 BITS
F9DF 3D       | 563|        MUL                     ; WITH MULTIPLY
F9E0 8D04     | 564|        BSR     ZOUTHX          ; SEND OUT AS HEX
F9E2 3506     | 565|        PULS    D               ; RESTORE BYTES
F9E4 840F     | 566|        ANDA    #$0F            ; ISOLATE RIGHT HEX
F9E6 8B90     | 567|ZOUTHX  ADDA    #$90            ; PREPARE A-F ADJUST
F9E8 19       | 568|        DAA                     ; ADJUST
F9E9 8940     | 569|        ADCA    #$40            ; PREPARE CHARACTER BITS
F9EB 19       | 570|        DAA                     ; ADJUST
F9EC 6E9D66EE | 571|SEND    JMP     [VECTAB+.CODTA,PCR] ; SEND TO OUT HANDLER
              | 572|
F9F0 8DE7     | 573|ZOT4HS  BSR     ZOUT2H          ; CONVERT FIRST BYTE
F9F2 8DE5     | 574|ZOT2HS  BSR     ZOUT2H          ; CONVERT BYTE TO HEX
F9F4 AF64     | 575|        STX     4,S             ; UPDATE USERS X REGISTER
              | 576|* FALL INTO SPACE ROUTINE
              | 577|
              | 578|*************************************************
              | 579|*            [SWI FUNCTION 7]
              | 580|*         SPACE - SEND BLANK TO OUTPUT HANDLER
              | 581|* INPUT: NONE
              | 582|* OUTPUT: BLANK SEND TO CONSOLE HANDLER
              | 583|*************************************************
F9F6 8620     | 584|ZSPACE  LDA     #'              ; LOAD BLANK
F9F8 203D     | 585|        BRA     ZOTCH2          ; SEND AND RETURN
              | 586|
              | 587|***********************************************
              | 588|*             [SWI FUNCTION 9]
              | 589|*          SWAP VECTOR TABLE ENTRY
              | 590|* INPUT: A=VECTOR TABLE CODE (OFFSET)
              | 591|* X=0 OR REPLACEMENT VALUE
              | 592|* OUTPUT: X=PREVIOUS VALUE
              | 593|***********************************************
F9FA A661     | 594|ZVSWTH  LDA     1,S             ; LOAD REQUESTERS A
F9FC 8134     | 595|        CMPA    #HIVTR          ; ? SUB-CODE TOO HIGH
F9FE 2239     | 596|        BHI     ZOTCH3          ; IGNORE CALL IF SO
FA00 109EC2   | 597|        LDY     <VECTAB+.AVTBL  ; LOAD VECTOR TABLE ADDRESS
FA03 EEA6     | 598|        LDU     A,Y             ; U=OLD ENTRY
FA05 EF64     | 599|        STU     4,S             ; RETURN OLD VALUE TO CALLERS X
FA07 AF7E     | 600|        STX     -2,S            ; ? X=0
FA09 272E     | 601|        BEQ     ZOTCH3          ; YES, DO NOT CHANGE ENTRY
FA0B AFA6     | 602|        STX     A,Y             ; REPLACE ENTRY
FA0D 202A     | 603|        BRA     ZOTCH3          ; RETURN FROM SWI
              | 604|*D
              | 605|
              | 606|************************************************
              | 607|*               [SWI FUNCTION 0]
              | 608|*  INCHNP - OBTAIN INPUT CHAR IN A (NO PARITY)
              | 609|* NULLS AND RUBOUTS ARE IGNORED.
              | 610|* AUTOMATIC LINE FEED IS SENT UPON RECEIVING A
              | 611|* CARRIAGE RETURN.
              | 612|* UNLESS WE ARE LOADING FROM TAPE.
              | 613|************************************************
FA0F 8D5D     | 614|ZINCHP  BSR     XQPAUS          ; RELEASE PROCESSOR
FA11 8D5F     | 615|ZINCH   BSR     XQCIDT          ; CALL INPUT DATA APPENDAGE
FA13 24FA     | 616|        BCC     ZINCHP          ; LOOP IF NONE AVAILABLE
FA15 4D       | 617|        TSTA                    ; ? TEST FOR NULL
FA16 27F9     | 618|        BEQ     ZINCH           ; IGNORE NULL
FA18 817F     | 619|        CMPA    #$7F            ; ? RUBOUT
FA1A 27F5     | 620|        BEQ     ZINCH           ; BRANCH YES TO IGNORE
FA1C A761     | 621|        STA     1,S             ; STORE INTO CALLERS A
FA1E 0D8F     | 622|        TST     <MISFLG         ; ? LOAD IN PROGRESS
FA20 2617     | 623|        BNE     ZOTCH3          ; BRANCH IF SO TO NOT ECHO
FA22 810D     | 624|        CMPA    #CR             ; ? CARRIAGE RETURN
FA24 2604     | 625|        BNE     ZIN2            ; NO, TEST ECHO BYTE
FA26 860A     | 626|        LDA     #LF             ; LOAD LINE FEED
FA28 8DC2     | 627|        BSR     SEND            ; ALWAYS ECHO LINE FEED
FA2A 0DF4     | 628|ZIN2    TST     <VECTAB+.ECHO   ; ? ECHO DESIRED
FA2C 260B     | 629|        BNE     ZOTCH3          ; NO, RETURN
              | 630|* FALL THROUGH TO OUTCH
              | 631|************************************************
              | 632|*            [SWI FUNCTION 1]
              | 633|*        OUTCH - OUTPUT CHARACTER FROM A
              | 634|* INPUT: NONE
              | 635|* OUTPUT: IF LINEFEED IS THE OUTPUT CHARACTER THEN
              | 636|* C=0 NO CTL-X RECEIVED, C=1 CTL-X RECEIVED
              | 637|************************************************
FA2E A661     | 638|ZOTCH1  LDA     1,S             ; LOAD CHARACTER TO SEND
FA30 308C09   | 639|        LEAX    <ZPCRLS,PCR     ; DEFAULT FOR LINE FEED
FA33 810A     | 640|        CMPA    #LF             ; ? LINE FEED
FA35 270F     | 641|        BEQ     ZPDTLP          ; BRANCH TO CHECK PAUSE IF SO
FA37 8DB3     | 642|ZOTCH2  BSR     SEND            ; SEND TO OUTPUT ROUTINE
FA39 0C90     | 643|ZOTCH3  INC     <SWICNT         ; BUMP UP "SWI" TRACE NEST LEVEL
FA3B 3B       | 644|        RTI                     ; RETURN FROM "SWI" FUNCTION
              | 645|
              | 646|**************************************************
              | 647|* [SWI FUNCTION 6]
              | 648|* PCRLF - SEND CR/LF TO CONSOLE HANDLER
              | 649|* INPUT: NONE
              | 650|* OUTPUT: CR AND LF SENT TO HANDLER
              | 651|* C=0 NO CTL-X, C=1 CTL-X RECEIVED
              | 652|**************************************************
FA3C 04       | 653|ZPCRLS  FCB     EOT             ; NULL STRING
FA3D 308CFC   | 654|ZPCRLF LEAX     ZPCRLS,PCR      ; READY CR,LF STRING
              | 655|* FALL INTO CR/LF CODE
              | 656|
              | 657|**************************************************
              | 658|* [SWI FUNCTION 3]
              | 659|* PDATA - OUTPUT CR/LF AND STRING
              | 660|* INPUT: X->STRING
              | 661|* OUTPUT: CR/LF AND STRING SENT TO OUTPUT CONSOLE
              | 662|* HANDLER.
              | 663|* C=0 NO CTL-X, C=1 CTL-X RECEIVED
              | 664|* NOTE: LINE FEED MUST FOLLOW CARRIAGE RETURN FOR
              | 665|* PROPER PUNCH DATA.
              | 666|**************************************************
              | 667|
FA40 860D     | 668|ZPDATA  LDA     #CR             ; LOAD CARRIAGE RETURN
FA42 8DA8     | 669|        BSR     SEND            ; SEND IT
FA44 860A     | 670|        LDA     #LF             ; LOAD LINE FEED
              | 671|* FALL INTO PDATA1
              | 672|
              | 673|*************************************************
              | 674|* [SWI FUNCTION 2]
              | 675|* PDATA1 - OUTPUT STRING TILL EOT ($04)
              | 676|* THIS ROUTINE PAUSES IF AN INPUT BYTE BECOMES
              | 677|* AVAILABLE DURING OUTPUT TRANSMISSION UNTIL A
              | 678|* SECOND IS RECEIVED.
              | 679|* INPUT: X->STRING
              | 680|* OUTPUT: STRING SENT TO OUTPUT CONSOLE DRIVER
              | 681|* C=0 NO CTL-X, C=1 CTL-X RECEIVED
              | 682|*************************************************
              | 683|
FA46 8DA4     | 684|ZPDTLP  BSR     SEND            ; SEND CHARACTER TO DRIVER
FA48 A680     | 685|ZPDTA1  LDA     ,X+             ; LOAD NEXT CHARACTER
FA4A 8104     | 686|        CMPA    #EOT            ; ? EOT
FA4C 26F8     | 687|        BNE     ZPDTLP          ; LOOP IF NOT
              | 688|* FALL INTO PAUSE CHECK FUNCTION
              | 689|
              | 690|********************************************
              | 691|* [SWI FUNCTION 12]
              | 692|* PAUSE - RETURN TO TASK DISPATCHING AND CHECK
              | 693|* FOR FREEZE CONDITION OR CTL-X BREAK
              | 694|* THIS FUNCTION ENTERS THE TASK PAUSE HANDLER SO
              | 695|* OPTIONALLY OTHER 6809 PROCESSES MAY GAIN CONTROL.
              | 696|* UPON RETURN, CHECK FOR A 'FREEZE' CONDITION
              | 697|* WITH A RESULTING WAIT LOOP, OR CONDITION CODE
              | 698|* RETURN IF A CONTROL-X IS ENTERED FROM THE INPUT
              | 699|* HANDLER.
              | 700|* OUTPUT: C=1 IF CTL-X HAS ENTERED, C=0 OTHERWISE
              | 701|******************************************
              | 702|
FA4E 8D1E     | 703|ZPAUSE  BSR     XQPAUS          ; RELEASE CONTROL AT EVERY LINE
FA50 8D06     | 704|        BSR     CHKABT          ; CHECK FOR FREEZE OR ABORT
FA52 1FA9     | 705|        TFR     CC,B            ; PREPARE TO REPLACE CC
FA54 E7E4     | 706|        STB     ,S              ; OVERLAY OLD ONE ON STACK
FA56 20E1     | 707|        BRA     ZOTCH3          ; RETURN FROM "SWI"
              | 708|
              | 709|* CHKABT - SCAN FOR INPUT PAUSE/ABORT DURING OUTPUT
              | 710|* OUTPUT: C=0 OK, C=1 ABORT (CTL-X ISSUED)
              | 711|* VOLATILE: U,X,D
FA58 8D18     | 712|CHKABT  BSR     XQCIDT          ; ATTEMPT INPUT
FA5A 2405     | 713|        BCC     CHKRTN          ; BRANCH NO TO RETURN
FA5C 8118     | 714|        CMPA    #CAN            ; ? CTL-X FOR ABORT
FA5E 2602     | 715|        BNE     CHKWT           ; BRANCH NO TO PAUSE
FA60 53       | 716|CHKSEC  COMB                    ; SET CARRY
FA61 39       | 717|CHKRTN  RTS                     ; RETURN TO CALLER WITH CC SET
FA62 8D0A     | 718|CHKWT   BSR     XQPAUS          ; PAUSE FOR A MOMENT
FA64 8D0C     | 719|        BSR     XQCIDT          ; ? KEY FOR START
FA66 24FA     | 720|        BCC     CHKWT           ; LOOP UNTIL RECEIVED
FA68 8118     | 721|        CMPA    #CAN            ; ? ABORT SIGNALED FROM WAIT
FA6A 27F4     | 722|        BEQ     CHKSEC          ; BRANCH YES
FA6C 4F       | 723|        CLRA                    ; SET C=0 FOR NO ABORT
FA6D 39       | 724|        RTS                     ; AND RETURN
              | 725|
              | 726|* SAVE MEMORY WITH JUMPS
FA6E 6E9D6678 | 727|XQPAUS  JMP   [VECTAB+.PAUSE,PCR] ; TO PAUSE ROUTINE
FA72 AD9D6662 | 728|XQCIDT  JSR   [VECTAB+.CIDTA,PCR] ; TO INPUT ROUTINE
FA76 847F     | 729|        ANDA  #$7F              ; STRIP PARITY
FA78 39       | 730|        RTS                     ; RETURN TO CALLER
              | 731|
              | 732|********************************************
              | 733|* NMI DEFAULT INTERRUPT HANDLER
              | 734|* THE NMI HANDLER IS USED FOR TRACING INSTRUCTIONS.
              | 735|* TRACE PRINTOUTS OCCUR ONLY AS LONG AS THE STACK
              | 736|* TRACE LEVEL IS NOT BREACHED BY FALLING BELOW IT.
              | 737|* TRACING CONTINUES UNTIL THE COUNT TURNS ZERO OR
              | 738|* A CTL-X IS ENTERED FROM THE INPUT CONSOLE DEVICE.
              | 739|*********************************************
              | 740|
FA79 4F502D04 | 741|MSHOWP  FCB     'O,'P,'-,EOT    ; OPCODE PREP
              | 742|
FA7D 8D42     | 743|NMIR    BSR     LDDP            ; LOAD PAGE AND VERIFY STACK
FA7F 0D8F     | 744|        TST     <MISFLG         ; ? THRU A BREAKPOINT
FA81 2634     | 745|        BNE     NMICON          ; BRANCH IF SO TO CONTINUE
FA83 0D90     | 746|        TST     <SWICNT         ; ? INHIBIT "SWI" DURING TRACE
FA85 2B29     | 747|        BMI     NMITRC          ; BRANCH YES
FA87 306C     | 748|        LEAX    12,S            ; OBTAIN USERS STACK POINTER
FA89 9CF8     | 749|        CMPX    <SLEVEL         ; ? TO TRACE HERE
FA8B 2523     | 750|        BLO     NMITRC          ; BRANCH IF TOO LOW TO DISPLAY
FA8D 308CE9   | 751|        LEAX    MSHOWP,PCR      ; LOAD OP PREP
FA90 3F       | 752|        SWI                     ; SEND TO CONSOLE
FA91 02       | 753|        FCB     PDATA1          ; FUNCTION
FA92 098E     | 754|        ROL     <DELIM          ; SAVE CARRY BIT
FA94 308D6601 | 755|        LEAX    LASTOP,PCR      ; POINT TO LAST OP
FA98 3F       | 756|        SWI                     ; SEND OUT AS HEX
FA99 05       | 757|        FCB     OUT4HS          ; FUNCTION
FA9A 8D17     | 758|        BSR     REGPRS          ; FOLLOW MEMORY WITH REGISTERS
FA9C 2537     | 759|        BCS     ZBKCMD          ; BRANCH IF "CANCEL"
FA9E 068E     | 760|        ROR     <DELIM          ; RESTORE CARRY BIT
FAA0 2533     | 761|        BCS     ZBKCMD          ; BRANCH IF "CANCEL"
FAA2 9E91     | 762|        LDX     <TRACEC         ; LOAD TRACE COUNT
FAA4 272F     | 763|        BEQ     ZBKCMD          ; IF ZERO TO COMMAND HANDLER
FAA6 301F     | 764|        LEAX    -1,X            ; MINUS ONE
FAA8 9F91     | 765|        STX     <TRACEC         ; REFRESH
FAAA 2729     | 766|        BEQ     ZBKCMD          ; STOP TRACE WHEN ZERO
FAAC 8DAA     | 767|        BSR     CHKABT          ; ? ABORT THE TRACE
FAAE 2525     | 768|        BCS     ZBKCMD          ; BRANCH YES TO COMMAND HANDLER
FAB0 1603F7   | 769|NMITRC  LBRA    CTRCE3          ; NO, TRACE ANOTHER INSTRUCTION
              | 770|
FAB3 1701B9   | 771|REGPRS  LBSR    REGPRT          ; PRINT REGISTERS AS FROM COMMAND
FAB6 39       | 772|        RTS                     ; RETURN TO CALLER
              | 773|
              | 774|* JUST EXECUTED THRU A BRKPNT. NOW CONTINUE NORMALLY
              | 775|
FAB7 0F8F     | 776|NMICON  CLR     <MISFLG        ; CLEAR THRU FLAG
FAB9 1702EB   | 777|        LBSR    ARMBK2         ; ARM BREAKPOINTS
FABC 3B       | 778|RTI     RTI                    ; AND CONTINUE USERS PROGRAM
              | 779|
              | 780|* LDDP - SETUP DIRECT PAGE REGISTER, VERIFY STACK.
              | 781|* AN INVALID STACK CAUSES A RETURN TO THE COMMAND
              | 782|* HANDLER.
              | 783|* INPUT: FULLY STACKED REGISTERS FROM AN INTERRUPT
              | 784|* OUTPUT: DPR LOADED TO WORK PAGE
              | 785|
FABD 3F072004 | 786|ERRMSG  FCB     '?,BELL,$20,EOT ; ERROR RESPONSE
              | 787|
FAC1 E68D65D8 | 788|LDDP    LDB     BASEPG,PCR      ; LOAD DIRECT PAGE HIGH BYTE
FAC5 1F9B     | 789|        TFR     B,DP            ; SETUP DIRECT PAGE REGISTER
FAC7 A163     | 790|        CMPA    3,S             ; ? IS STACK VALID
FAC9 2725     | 791|        BEQ     RTS             ; YES, RETURN
FACB 10DE97   | 792|        LDS     <RSTACK         ; RESET TO INITIAL STACK POINTER
FACE 308CEC   | 793|ERROR   LEAX    ERRMSG,PCR      ; LOAD ERROR REPORT
FAD1 3F       | 794|        SWI                     ; SEND OUT BEFORE REGISTERS
FAD2 03       | 795|        FCB     PDATA           ; ON NEXT LINE
              | 796|* FALL INTO BREAKPOINT HANDLER
              | 797|
              | 798|**********************************************
              | 799|* [SWI FUNCTION 10]
              | 800|* BREAKPOINT PROGRAM FUNCTION
              | 801|* PRINT REGISTERS AND GO TO COMMAND HANLER
              | 802|***********************************************
              | 803|
FAD3 8DDE     | 804|ZBKPNT  BSR     REGPRS          ; PRINT OUT REGISTERS
FAD5 16FE21   | 805|ZBKCMD  LBRA    CMDNEP          ; NOW ENTER COMMAND HANDLER
              | 806|
              | 807|********************************************
              | 808|* IRQ, RESERVED, SWI2 AND SWI3 INTERRUPT HANDLERS
              | 809|* THE DEFAULT HANDLING IS TO CAUSE A BREAKPOINT.
              | 810|********************************************
              | 811|SWI2R   EQU     *               ; SWI2 ENTRY
              | 812|SWI3R   EQU     *               ; SWI3 ENTRY
              | 813|IRQR    EQU     *               ; IRQ ENTRY
FAD8 8DE7     | 814|RSRVDR  BSR     LDDP            ; SET BASE PAGE, VALIDATE STACK
FADA 20F7     | 815|        BRA     ZBKPNT          ; FORCE A BREAKPOINT
              | 816|
              | 817|******************************************
              | 818|* FIRQ HANDLER
              | 819|* JUST RETURN FOR THE FIRQ INTERRUPT
              | 820|******************************************
              | 821|FIRQR   EQU     RTI             ; IMMEDIATE RETURN
              | 822|
              | 823|**************************************************
              | 824|* DEFAULT I/O DRIVERS
              | 825|**************************************************
              | 826|* CIDTA - RETURN CONSOLE INPUT CHARACTER
              | 827|* OUTPUT: C=0 IF NO DATA READY, C=1 A=CHARACTER
              | 828|* U VOLATILE
              | 829|
FADC DEF0     | 830|CIDTA   LDU     <VECTAB+.ACIA   ; LOAD ACIA ADDRESS
FADE A6C4     | 831|        LDA     ,U              ; LOAD STATUS REGISTER
FAE0 44       | 832|        LSRA                    ; TEST RECEIVER REGISTER FLAG
FAE1 2402     | 833|        BCC     CIRTN           ; RETURN IF NOTHING
FAE3 A641     | 834|        LDA     1,U             ; LOAD DATA BYTE
FAE5 39       | 835|CIRTN   RTS                     ; RETURN TO CALLER
              | 836|
              | 837|* CION - INPUT CONSOLE INITIALIZATION
              | 838|* COON - OUTPUT CONSOLE INITIALIZATION
              | 839|* A,X VOLATILE
              | 840|CION   EQU      *
FAE6 8613     | 841|COON   LDA      #$13            ; RESET ACIA CODE
FAE8 9EF0     | 842|       LDX      <VECTAB+.ACIA   ; LOAD ACIA ADDRESS
FAEA A784     | 843|       STA      ,X              ; STORE INTO STATUS REGISTER
FAEC 8615     | 844|       LDA      #$15            ; SET CONTROL
FAEE A784     | 845|       STA      ,X              ; REGISTER UP
FAF0 39       | 846|RTS    RTS                      ; RETURN TO CALLER
              | 847|
              | 848|* THE FOLLOWING HAVE NO DUTIES TO PERFORM
              | 849|CIOFF EQU       RTS             ; CONSOLE INPUT OFF
              | 850|COOFF EQU       RTS             ; CONSOLE OUTPUT OFF
              | 851|
              | 852|* CODTA - OUTPUT CHARACTER TO CONSOLE DEVICE
              | 853|* INPUT: A=CHARACTER TO SEND
              | 854|* OUTPUT: CHAR SENT TO TERMINAL WITH PROPER PADDING
              | 855|* ALL REGISTERS TRANSPARENT
              | 856|
FAF1 3447     | 857|CODTA   PSHS    U,D,CC          ; SAVE REGISTERS,WORK BYTE
FAF3 DEF0     | 858|        LDU     <VECTAB+.ACIA   ; ADDRESS ACIA
FAF5 8D1B     | 859|        BSR     CODTAO          ; CALL OUTPUT CHAR SUBROUTINE
FAF7 8110     | 860|        CMPA    #DLE            ; ? DATA LINE ESCAPE
FAF9 2712     | 861|        BEQ     CODTRT          ; YES, RETURN
FAFB D6F2     | 862|        LDB     <VECTAB+.PAD    ; DEFAULT TO CHAR PAD COUNT
FAFD 810D     | 863|        CMPA    #CR             ; ? CR
FAFF 2602     | 864|        BNE     CODTPD          ; BRANCH NO
FB01 D6F3     | 865|        LDB     <VECTAB+.PAD+1  ; LOAD NEW LINE PAD COUNT
FB03 4F       | 866|CODTPD  CLRA                    ; CREATE NULL
FB04 E7E4     | 867|        STB     ,S              ; SAVE COUNT
FB06 8C       | 868|        FCB     SKIP2           ; ENTER LOOP
FB07 8D09     | 869|CODTLP  BSR     CODTAO          ; SEND NULL
FB09 6AE4     | 870|        DEC     ,S              ; ? FINISHED
FB0B 2AFA     | 871|        BPL     CODTLP          ; NO, CONTINUE WITH MORE
FB0D 35C7     | 872|CODTRT  PULS    PC,U,D,CC       ; RESTORE REGISTERS AND RETURN
              | 873|
FB0F 17FF5C   | 874|CODTAD  LBSR    XQPAUS          ; TEMPORARY GIVE UP CONTROL
FB12 E6C4     | 875|CODTAO  LDB     ,U              ; LOAD ACIA CONTROL REGISTER
FB14 C502     | 876|        BITB    #$02            ; ? TX REGISTER CLEAR >LSAB FIXME
FB16 27F7     | 877|        BEQ     CODTAD          ; RELEASE CONTROL IF NOT
FB18 A741     | 878|        STA     1,U             ; STORE INTO DATA REGISTER
FB1A 39       | 879|        RTS                     ; RETURN TO CALLER
              | 880|*E
              | 881|
              | 882|* BSON - TURN ON READ/VERIFY/PUNCH MECHANISM
              | 883|* A IS VOLATILE
              | 884|
FB1B 8611     | 885|BSON    LDA     #$11            ; SET READ CODE
FB1D 6D66     | 886|        TST     6,S             ; ? READ OR VERIFY
FB1F 2601     | 887|        BNE     BSON2           ; BRANCH YES
FB21 4C       | 888|        INCA                    ; SET TO WRITE
FB22 3F       | 889|BSON2   SWI                     ; PERFORM OUTPUT
FB23 01       | 890|        FCB     OUTCH           ; FUNCTION
FB24 0C8F     | 891|        INC     <MISFLG         ; SET LOAD IN PROGRESS FLAG
FB26 39       | 892|        RTS                     ; RETURN TO CALLER
              | 893|
              | 894|* BSOFF - TURN OFF READ/VERIFY/PUNCH MECHANISM
              | 895|* A,X VOLATILE
              | 896|
FB27 8614     | 897|BSOFF   LDA     #$14            ; TO DC4 - STOP
FB29 3F       | 898|        SWI                     ; SEND OUT
FB2A 01       | 899|        FCB     OUTCH           ; FUNCTION
FB2B 4A       | 900|        DECA                    ; CHANGE TO DC3 (X-OFF)
FB2C 3F       | 901|        SWI                     ; SEND OUT
FB2D 01       | 902|        FCB     OUTCH           ; FUNCTION
FB2E 0A8F     | 903|        DEC     <MISFLG         ; CLEAR LOAD IN PROGRESS FLAG
FB30 8E61A8   | 904|        LDX     #25000          ; DELAY 1 SECOND (2MHZ CLOCK)
FB33 301F     | 905|BSOFLP  LEAX    -1,X            ; COUNT DOWN
FB35 26FC     | 906|        BNE     BSOFLP          ; LOOP TILL DONE
FB37 39       | 907|        RTS                     ; RETURN TO CALLER
              | 908|
              | 909|* BSDTA - READ/VERIFY/PUNCH HANDLER
              | 910|* INPUT: S+6=CODE BYTE, VERIFY(-1),PUNCH(0),LOAD(1)
              | 911|* S+4=START ADDRESS
              | 912|* S+2=STOP ADDRESS
              | 913|* S+0=RETURN ADDRESS
              | 914|* OUTPUT: Z=1 NORMAL COMPLETION, Z=0 INVALID LOAD/VER
              | 915|* REGISTERS ARE VOLATILE
FB38 EE62     | 916|BSDTA   LDU     2,S             ; U=TO ADDRESS OR OFFSET
FB3A 6D66     | 917|        TST     6,S             ; ? PUNCH
FB3C 2754     | 918|        BEQ     BSDPUN          ; BRANCH YES
              | 919|
              | 920|* DURING READ/VERIFY: S+2=MSB ADDRESS SAVE BYTE
              | 921|* S+1=BYTE COUNTER
              | 922|* S+0=CHECKSUM
              | 923|* U HOLDS OFFSET
FB3E 327D     | 924|        LEAS    -3,S            ; ROOM FOR WORK/COUNTER/CHECKSUM
FB40 3F       | 925|BSDLD1  SWI                     ; GET NEXT CHARACTER
FB41 00       | 926|        FCB     INCHNP          ; FUNCTION
FB42 8153     | 927|BSDLD2  CMPA    #'S             ; ? START OF S1/S9
FB44 26FA     | 928|        BNE     BSDLD1          ; BRANCH NOT
FB46 3F       | 929|        SWI                     ; GET NEXT CHARACTER
FB47 00       | 930|        FCB     INCHNP          ; FUNCTION
FB48 8139     | 931|        CMPA    #'9             ; ? HAVE S9
FB4A 2722     | 932|        BEQ     BSDSRT          ; YES, RETURN GOOD CODE
FB4C 8131     | 933|        CMPA    #'1             ; ? HAVE NEW RECORD
FB4E 26F2     | 934|        BNE     BSDLD2          ; BRANCH IF NOT
FB50 6FE4     | 935|        CLR     ,S              ; CLEAR CHECKSUM
FB52 8D21     | 936|        BSR     BYTE            ; OBTAIN BYTE COUNT
FB54 E761     | 937|        STB     1,S             ; SAVE FOR DECREMENT
              | 938|
              | 939|* READ ADDRESS
FB56 8D1D     | 940|        BSR     BYTE            ; OBTAIN HIGH VALUE
FB58 E762     | 941|        STB     2,S             ; SAVE IT
FB5A 8D19     | 942|        BSR     BYTE            ; OBTAIN LOW VALUE
FB5C A662     | 943|        LDA     2,S             ; MAKE D=VALUE
FB5E 31CB     | 944|        LEAY    D,U             ; Y=ADDRESS+OFFSET
              | 945|* STORE TEXT
FB60 8D13     | 946|BSDNXT  BSR     BYTE            ; NEXT BYTE
FB62 270C     | 947|        BEQ     BSDEOL          ; BRANCH IF CHECKSUM
FB64 6D69     | 948|        TST     9,S             ; ? VERIFY ONLY
FB66 2B02     | 949|        BMI     BSDCMP          ; YES, ONLY COMPARE
FB68 E7A4     | 950|        STB     ,Y              ; STORE INTO MEMORY
FB6A E1A0     | 951|BSDCMP  CMPB    ,Y+             ; ? VALID RAM
FB6C 27F2     | 952|        BEQ     BSDNXT          ; YES, CONTINUE READING
FB6E 3592     | 953|BSDSRT  PULS    PC,X,A          ; RETURN WITH Z SET PROPER
FB70 4C       | 954|BSDEOL  INCA                    ; ? VALID CHECKSUM
FB71 27CD     | 955|        BEQ     BSDLD1          ; BRANCH YES
FB73 20F9     | 956|        BRA     BSDSRT          ; RETURN Z=0 INVALID
              | 957|
              | 958|* BYTE BUILDS 8 BIT VALUE FROM TWO HEX DIGITS IN
FB75 8D12     | 959|BYTE    BSR     BYTHEX         ; OBTAIN FIRST HEX
FB77 C610     | 960|        LDB     #16            ; PREPARE SHIFT
FB79 3D       | 961|        MUL                    ; OVER TO A
FB7A 8D0D     | 962|        BSR     BYTHEX         ; OBTAIN SECOND HEX
FB7C 3404     | 963|        PSHS    B              ; SAVE HIGH HEX
FB7E ABE0     | 964|        ADDA    ,S+            ; COMBINE BOTH SIDES
FB80 1F89     | 965|        TFR     A,B            ; SEND BACK IN B
FB82 AB62     | 966|        ADDA    2,S            ; COMPUTE NEW CHECKSUM
FB84 A762     | 967|        STA     2,S            ; STORE BACK
FB86 6A63     | 968|        DEC     3,S            ; DECREMENT BYTE COUNT
FB88 39       | 969|BYTRTS  RTS                    ; RETURN TO CALLER
              | 970|
FB89 3F       | 971|BYTHEX  SWI                    ; GET NEXT HEX
FB8A 00       | 972|        FCB     INCHNP         ; CHARACTER
FB8B 1701D4   | 973|        LBSR    CNVHEX         ; CONVERT TO HEX
FB8E 27F8     | 974|        BEQ     BYTRTS         ; RETURN IF VALID HEX
FB90 35F2     | 975|        PULS    PC,U,Y,X,A     ; RETURN TO CALLER WITH Z=0
              | 976|
              | 977|* PUNCH STACK USE: S+8=TO ADDRESS
              | 978|*                  S+6=RETURN ADDRESS
              | 979|*                  S+4=SAVED PADDING VALUES
              | 980|*                  S+2 FROM ADDRESS
              | 981|*                  S+1=FRAME COUNT/CHECKSUM
              | 982|*                  S+0=BYTE COUNT
              | 983|
FB92 DEF2     | 984|BSDPUN  LDU     <VECTAB+.PAD    ; LOAD PADDING VALUES
FB94 AE64     | 985|        LDX     4,S             ; X=FROM ADDRESS
FB96 3456     | 986|        PSHS    U,X,D           ; CREATE STACK WORK AREA
FB98 CC0018   | 987|        LDD     #24             ; SET A=0, B=24
FB9B D7F2     | 988|        STB     <VECTAB+.PAD    ; SETUP 24 CHARACTER PADS
FB9D 3F       | 989|        SWI                     ; SEND NULLS OUT
FB9E 01       | 990|        FCB     OUTCH           ; FUNCTION
FB9F C604     | 991|        LDB     #4              ; SETUP NEW LINE PAD TO 4
FBA1 DDF2     | 992|        STD     <VECTAB+.PAD    ; SETUP PUNCH PADDING
              | 993|* CALCULATE SIZE
FBA3 EC68     | 994|BSPGO   LDD     8,S             ; LOAD TO
FBA5 A362     | 995|        SUBD    2,S             ; MINUS FROM=LENGTH
FBA7 10830018 | 996|        CMPD    #24             ; ? MORE THAN 23
FBAB 2502     | 997|        BLO     BSPOK           ; NO, OK
FBAD C617     | 998|        LDB     #23             ; FORCE TO 23 MAX
FBAF 5C       | 999|BSPOK   INCB                    ; PREPARE COUNTER
FBB0 E7E4     |1000|        STB     ,S              ; STORE BYTE COUNT
FBB2 CB03     |1001|        ADDB    #3              ; ADJUST TO FRAME COUNT
FBB4 E761     |1002|        STB     1,S             ; SAVE
              |1003|
              |1004|*PUNCH CR,LF,NULS,S,1
FBB6 308C33   |1005|       LEAX     <BSPSTR,PCR     ; LOAD START RECORD HEADER
FBB9 3F       |1006|       SWI                      ; SEND OUT
FBBA 03       |1007|       FCB      PDATA           ; FUNCTION
              |1008|* SEND FRAME COUNT
FBBB 5F       |1009|       CLRB                     ; INITIALIZE CHECKSUM
FBBC 3061     |1010|       LEAX     1,S             ; POINT TO FRAME COUNT AND ADDR
FBBE 8D27     |1011|       BSR      BSPUN2          ; SEND FRAME COUNT
              |1012|*DATA ADDRESS
FBC0 8D25     |1013|      BSR       BSPUN2          ; SEND ADDRESS HI
FBC2 8D23     |1014|      BSR       BSPUN2          ; SEND ADDRESS LOW
              |1015|*PUNCH DATA
FBC4 AE62     |1016|       LDX      2,S             ; LOAD START DATA ADDRESS
FBC6 8D1F     |1017|BSPMRE BSR      BSPUN2          ; SEND OUT NEXT BYTE
FBC8 6AE4     |1018|       DEC      ,S              ; ? FINAL BYTE
FBCA 26FA     |1019|       BNE      BSPMRE          ; LOOP IF NOT DONE
FBCC AF62     |1020|       STX      2,S             ; UPDATE FROM ADDRESS VALUE
              |1021|*PUNCH CHECKSUM
FBCE 53       |1022|       COMB                     ; COMPLEMENT
FBCF E761     |1023|       STB      1,S             ; STORE FOR SENDOUT
FBD1 3061     |1024|       LEAX     1,S             ; POINT TO IT
FBD3 8D14     |1025|       BSR      BSPUNC          ; SEND OUT AS HEX
FBD5 AE68     |1026|       LDX      8,S             ; LOAD TOP ADDRESS
FBD7 AC62     |1027|       CMPX     2,S             ; ? DONE
FBD9 24C8     |1028|       BHS      BSPGO           ; BRANCH NOT
FBDB 308C11   |1029|       LEAX     <BSPEOF,PCR     ; PREPARE END OF FILE
FBDE 3F       |1030|       SWI                      ; SEND OUT STRING
FBDF 03       |1031|       FCB      PDATA           ; FUNCTION
FBE0 EC64     |1032|       LDD      4,S             ; RECOVER PAD COUNTS
FBE2 DDF2     |1033|       STD      <VECTAB+.PAD    ; RESTORE
FBE4 4F       |1034|       CLRA                     ; SET Z=1 FOR OK RETURN
FBE5 35D6     |1035|       PULS     PC,U,X,D        ; RETURN WITH OK CODE
FBE7 EB84     |1036|BSPUN2 ADDB     ,X              ; ADD TO CHECKSUM
FBE9 16FDED   |1037|BSPUNC LBRA     ZOUT2H          ; SEND OUT AS HEX AND RETURN
              |1038|
FBEC 533104   |1039|BSPSTR FCB      'S,'1,EOT       ; CR,LF,NULLS,S,1
FBEF 53393033 |1040|BSPEOF FCC      /S9030000FC/    ; EOF STRING
FBF3 30303030
FBF7 4643    
FBF9 0D0A04   |1041|       FCB      CR,LF,EOT
              |1042|
              |1043|* HSDTA - HIGH SPEED PRINT MEMORY
              |1044|* INPUT: S+4=START ADDRESS
              |1045|* S+2=STOP ADDRESS
              |1046|* S+0=RETURN ADDRESS
              |1047|* X,D VOLATILE
              |1048|
              |1049|* SEND TITLE
              |1050|
FBFC 3F       |1051|HSDTA   SWI                     ; SEND NEW LINE
FBFD 06       |1052|        FCB     PCRLF           ; FUNCTION
FBFE C606     |1053|        LDB     #6              ; PREPARE 6 SPACES
FC00 3F       |1054|HSBLNK  SWI                     ; SEND BLANK
FC01 07       |1055|        FCB     SPACE           ; FUNCTION
FC02 5A       |1056|        DECB                    ; COUNT DOWN
FC03 26FB     |1057|        BNE     HSBLNK          ; LOOP IF MORE
FC05 5F       |1058|        CLRB                    ; SETUP BYTE COUNT
FC06 1F98     |1059|HSHTTL  TFR     B,A             ; PREPARE FOR CONVERT
FC08 17FDDB   |1060|        LBSR    ZOUTHX          ; CONVERT TO A HEX DIGIT
FC0B 3F       |1061|        SWI                     ; SEND BLANK
FC0C 07       |1062|        FCB     SPACE           ; FUNCTION
FC0D 3F       |1063|        SWI                     ; SEND ANOTHER
FC0E 07       |1064|        FCB     SPACE           ; BLANK
FC0F 5C       |1065|        INCB                    ; UP ANOTHER
FC10 C110     |1066|        CMPB    #$10            ; ? PAST 'F'
FC12 25F2     |1067|        BLO     HSHTTL          ; LOOP UNTIL SO
FC14 3F       |1068|HSHLNE  SWI                     ; TO NEXT LINE
FC15 06       |1069|        FCB     PCRLF           ; FUNCTION
FC16 252F     |1070|        BCS     HSDRTN          ; RETURN IF USER ENTERED CTL-X
FC18 3064     |1071|        LEAX    4,S             ; POINT AT ADDRESS TO CONVERT
FC1A 3F       |1072|        SWI                     ; PRINT OUT ADDRESS
FC1B 05       |1073|        FCB     OUT4HS          ; FUNCTION
FC1C AE64     |1074|        LDX     4,S             ; LOAD ADDRESS PROPER
FC1E C610     |1075|        LDB     #16             ; NEXT SIXTEEN
FC20 3F       |1076|HSHNXT  SWI                     ; CONVERT BYTE TO HEX AND SEND
FC21 04       |1077|        FCB     OUT2HS          ; FUNCTION
FC22 5A       |1078|        DECB                    ; COUNT DOWN
FC23 26FB     |1079|        BNE     HSHNXT          ; LOOP IF NOT SIXTEENTH
FC25 3F       |1080|        SWI                     ; SEND BLANK
FC26 07       |1081|        FCB     SPACE           ; FUNCTION
FC27 AE64     |1082|        LDX     4,S             ; RELOAD FROM ADDRESS
FC29 C610     |1083|        LDB     #16             ; COUNT
FC2B A680     |1084|HSHCHR  LDA     ,X+             ; NEXT BYTE
FC2D 2B04     |1085|        BMI     HSHDOT          ; TOO LARGE, TO A DOT
FC2F 8120     |1086|        CMPA    #'              ; ? LOWER THAN A BLANK
FC31 2402     |1087|        BHS     HSHCOK          ; NO, BRANCH OK
FC33 862E     |1088|HSHDOT  LDA     #'.             ; CONVERT INVALID TO A BLANK
FC35 3F       |1089|HSHCOK  SWI                     ; SEND CHARACTER
FC36 01       |1090|        FCB     OUTCH           ; FUNCTION
FC37 5A       |1091|        DECB                    ; ? DONE
FC38 26F1     |1092|        BNE     HSHCHR          ; BRANCH NO
FC3A AC62     |1093|        CMPX     2,S            ; ? PAST LAST ADDRESS [opcode was 'CPX']
FC3C 2409     |1094|        BHS     HSDRTN          ; QUIT IF SO
FC3E AF64     |1095|        STX     4,S             ; UPDATE FROM ADDRESS
FC40 A665     |1096|        LDA     5,S             ; LOAD LOW BYTE ADDRESS
FC42 48       |1097|        ASLA                    ; ? TO SECTION BOUNDARY
FC43 26CF     |1098|        BNE     HSHLNE          ; BRANCH IF NOT
FC45 20B5     |1099|        BRA     HSDTA           ; BRANCH IF SO
FC47 3F       |1100|HSDRTN  SWI                     ; SEND NEW LINE
FC48 06       |1101|        FCB     PCRLF           ; FUNCTION
FC49 39       |1102|        RTS                     ; RETURN TO CALLER
              |1103|*F
              |1104|
              |1105|***********************************************
              |1106|*     A S S I S T 0 9    C O M M A N D S
              |1107|***********************************************
              |1108|
              |1109|*************REGISTERS - DISPLAY AND CHANGE REGISTERS
FC4A 8D23     |1110|CREG    BSR     REGPRT          ; PRINT REGISTERS
FC4C 4C       |1111|        INCA                    ; SET FOR CHANGE FUNCTION
FC4D 8D21     |1112|        BSR     REGCHG          ; GO CHANGE, DISPLAY REGISTERS
FC4F 39       |1113|        RTS                     ; RETURN TO COMMAND PROCESSOR
              |1114|
              |1115|********************************************
              |1116|* REGPRT - PRINT/CHANGE REGISTERS SUBROUTINE
              |1117|* WILL ABORT TO 'CMDBAD' IF OVERFLOW DETECTED DURING
              |1118|* A CHANGE OPERATION. CHANGE DISPLAYS REGISTERS WHEN
              |1119|* DONE.
              |1120|
              |1121|* REGISTER MASK LIST CONSISTS OF:
              |1122|* A) CHARACTERS DENOTING REGISTER
              |1123|* B) ZERO FOR ONE BYTE, -1 FOR TWO
              |1124|* C) OFFSET ON STACK TO REGISTER POSITION
              |1125|* INPUT: SP+4=STACKED REGISTERS
              |1126|* A=0 PRINT, A#0 PRINT AND CHANGE
              |1127|* OUTPUT: (ONLY FOR REGISTER DISPLAY)
              |1128|* C=1 CONTROL-X ENTERED, C=0 OTHERWISE
              |1129|* VOLATILE: D,X (CHANGE)
              |1130|* B,X (DISPLAY)
              |1131|*******************************************
              |1132|
FC50 5043FF13 |1133|REGMSK  FCB     'P,'C,-1,19     ; PC REG
FC54 41000A   |1134|        FCB     'A,0,10         ; A REG
FC57 42000B   |1135|        FCB     'B,0,11         ; B REG
FC5A 58FF0D   |1136|        FCB     'X,-1,13        ; X REG
FC5D 59FF0F   |1137|        FCB     'Y,-1,15        ; Y REG
FC60 55FF11   |1138|        FCB     'U,-1,17        ; U REG
FC63 53FF01   |1139|        FCB     'S,-1,1         ; S REG
FC66 43430009 |1140|        FCB     'C,'C,0,9       ; CC REG
FC6A 4450000C |1141|        FCB     'D,'P,0,12      ; DP REG
FC6E 00       |1142|        FCB     0               ; END OF LIST
              |1143|
FC6F 4F       |1144|REGPRT  CLRA                    ; SETUP PRINT ONLY FLAG
FC70 30E810   |1145|REGCHG  LEAX    4+12,S          ; READY STACK VALUE
FC73 3432     |1146|        PSHS    Y,X,A           ; SAVE ON STACK WITH OPTION
FC75 318CD8   |1147|        LEAY    REGMSK,PCR      ; LOAD REGISTER MASK
FC78 ECA0     |1148|REGP1   LDD     ,Y+             ; LOAD NEXT CHAR OR <=0
FC7A 4D       |1149|        TSTA                    ; ? END OF CHARACTERS
FC7B 2F04     |1150|        BLE     REGP2           ; BRANCH NOT CHARACTER
FC7D 3F       |1151|        SWI                     ; SEND TO CONSOLE
FC7E 01       |1152|        FCB     OUTCH           ; FUNCTION BYTE
FC7F 20F7     |1153|        BRA     REGP1           ; CHECK NEXT
FC81 862D     |1154|REGP2   LDA     #'-             ; READY '-'
FC83 3F       |1155|        SWI                     ; SEND OUT
FC84 01       |1156|        FCB     OUTCH           ; WITH OUTCH
FC85 30E5     |1157|        LEAX    B,S             ; X->REGISTER TO PRINT
FC87 6DE4     |1158|        TST     ,S              ; ? CHANGE OPTION
FC89 2612     |1159|        BNE     REGCNG          ; BRANCH YES
FC8B 6D3F     |1160|        TST     -1,Y            ; ? ONE OR TWO BYTES
FC8D 2703     |1161|        BEQ     REGP3           ; BRANCH ZERO MEANS ONE
FC8F 3F       |1162|        SWI                     ; PERFORM WORD HEX
FC90 05       |1163|        FCB     OUT4HS          ; FUNCTION
FC91 8C       |1164|        FCB     SKIP2           ; SKIP BYTE PRINT
FC92 3F       |1165|REGP3   SWI                     ; PERFORM BYTE HEX
FC93 04       |1166|        FCB     OUT2HS          ; FUNCTION
FC94 ECA0     |1167|REG4    LDD     ,Y+             ; TO FRONT OF NEXT ENTRY
FC96 5D       |1168|        TSTB                    ; ? END OF ENTRIES
FC97 26DF     |1169|        BNE     REGP1           ; LOOP IF MORE
FC99 3F       |1170|        SWI                     ; FORCE NEW LINE
FC9A 06       |1171|        FCB     PCRLF           ; FUNCTION
FC9B 35B2     |1172|REGRTN  PULS    PC,Y,X,A        ; RESTORE STACK AND RETURN
              |1173|
FC9D 8D40     |1174|REGCNG  BSR     BLDNNB          ; INPUT BINARY NUMBER
FC9F 2710     |1175|        BEQ     REGNXC          ; IF CHANGE THEN JUMP
FCA1 810D     |1176|        CMPA    #CR             ; ? NO MORE DESIRED
FCA3 271E     |1177|        BEQ     REGAGN          ; BRANCH NOPE
FCA5 E63F     |1178|        LDB     -1,Y            ; LOAD SIZE FLAG
FCA7 5A       |1179|        DECB                    ; MINUS ONE
FCA8 50       |1180|        NEGB                    ; MAKE POSITIVE
FCA9 58       |1181|        ASLB                    ; TIMES TWO (=2 OR =4)
FCAA 3F       |1182|REGSKP  SWI                     ; PERFORM SPACES
FCAB 07       |1183|        FCB     SPACE           ; FUNCTION
FCAC 5A       |1184|        DECB
FCAD 26FB     |1185|        BNE     REGSKP          ; LOOP IF MORE
FCAF 20E3     |1186|        BRA     REG4            ; CONTINUE WITH NEXT REGISTER
FCB1 A7E4     |1187|REGNXC  STA     ,S              ; SAVE DELIMITER IN OPTION
              |1188|*                               ; (ALWAYS > 0)
FCB3 DC9B     |1189|        LDD     <NUMBER         ; OBTAIN BINARY RESULT
FCB5 6D3F     |1190|        TST     -1,Y            ; ? TWO BYTES WORTH
FCB7 2602     |1191|        BNE     REGTWO          ; BRANCH YES
FCB9 A682     |1192|        LDA     ,-X             ; SETUP FOR TWO
FCBB ED84     |1193|REGTWO  STD     ,X              ; STORE IN NEW VALUE
FCBD A6E4     |1194|        LDA     ,S              ; RECOVER DELIMITER
FCBF 810D     |1195|        CMPA    #CR             ; ? END OF CHANGES
FCC1 26D1     |1196|        BNE     REG4            ; NO, KEEP ON TRUCK'N
              |1197|* MOVE STACKED DATA TO NEW STACK IN CASE STACK
              |1198|* POINTER HAS CHANGED
FCC3 308D638A |1199|REGAGN  LEAX    TSTACK,PCR      ; LOAD TEMP AREA
FCC7 C615     |1200|        LDB     #21             ; LOAD COUNT
FCC9 3502     |1201|REGTF1  PULS    A               ; NEXT BYTE
FCCB A780     |1202|        STA     ,X+             ; STORE INTO TEMP
FCCD 5A       |1203|        DECB                    ; COUNT DOWN
FCCE 26F9     |1204|        BNE     REGTF1          ; LOOP IF MORE
FCD0 10EE88EC |1205|        LDS     -20,X           ; LOAD NEW STACK POINTER
FCD4 C615     |1206|        LDB     #21             ; LOAD COUNT AGAIN
FCD6 A682     |1207|REGTF2 LDA      ,-X             ; NEXT TO STORE
FCD8 3402     |1208|       PSHS     A               ; BACK ONTO NEW STACK
FCDA 5A       |1209|       DECB                     ; COUNT DOWN
FCDB 26F9     |1210|       BNE      REGTF2          ; LOOP IF MORE
FCDD 20BC     |1211|       BRA      REGRTN          ; GO RESTART COMMAND
              |1212|
              |1213|*********************************************
              |1214|* BLDNUM - BUILDS BINARY VALUE FROM INPUT HEX
              |1215|* THE ACTIVE EXPRESSION HANDLER IS USED.
              |1216|* INPUT: S=RETURN ADDRESS
              |1217|* OUTPUT: A=DELIMITER WHICH TERMINATED VALUE
              |1218|* (IF DELM NOT ZERO)
              |1219|* "NUMBER"=WORD BINARY RESULT
              |1220|* Z=1 IF INPUT RECEIVED, Z=0 IF NO HEX RECEIVED
              |1221|* REGISTERS ARE TRANSPARENT
              |1222|**********************************************
              |1223|* EXECUTE SINGLE OR EXTENDED ROM EXPRESSION HANDLER
              |1224|*
              |1225|* THE FLAG "DELIM" IS USED AS FOLLOWS:
              |1226|* DELIM=0 NO LEADING BLANKS, NO FORCED TERMINATOR
              |1227|* DELIM=CHR ACCEPT LEADING 'CHR'S, FORCED TERMINATOR
FCDF 4F       |1228|BLDNNB  CLRA                    ; NO DYNAMIC DELIMITER
FCE0 8C       |1229|        FCB     SKIP2           ; SKIP NEXT INSTRUCTION
              |1230|* BUILD WITH LEADING BLANKS
FCE1 8620     |1231|BLDNUM  LDA     #'              ; ALLOW LEADING BLANKS
FCE3 978E     |1232|        STA     <DELIM          ; STORE AS DELIMITER
FCE5 6E9D6403 |1233|        JMP     [VECTAB+.EXPAN,PCR]   ; TO EXP ANALYZER
              |1234|* THIS IS THE DEFAULT SINGLE ROM ANALYZER. WE ACCEPT:
              |1235|* 1) HEX INPUT
              |1236|* 2) 'M' FOR LAST MEMORY EXAMINE ADDRESS
              |1237|* 3) 'P' FOR PROGRAM COUNTER ADDRESS
              |1238|* 4) 'W' FOR WINDOW VALUE
              |1239|* 5) '@' FOR INDIRECT VALUE
              |1240|
FCE9 3414     |1241|EXP1    PSHS    X,B             ; SAVE REGISTERS
FCEB 8D5C     |1242|EXPDLM  BSR     BLDHXI          ; CLEAR NUMBER, CHECK FIRST CHAR
FCED 2718     |1243|        BEQ     EXP2            ; IF HEX DIGIT CONTINUE BUILDING
              |1244|* SKIP BLANKS IF DESIRED
FCEF 918E     |1245|        CMPA    <DELIM          ; ? CORRECT DELIMITER
FCF1 27F8     |1246|        BEQ     EXPDLM          ; YES, IGNORE IT
              |1247|* TEST FOR M OR P
FCF3 9E9E     |1248|        LDX     <ADDR           ; DEFAULT FOR 'M'
FCF5 814D     |1249|        CMPA    #'M             ; ? MEMORY EXAMINE ADDR WANTED
FCF7 2716     |1250|        BEQ     EXPTDL          ; BRANCH IF SO
FCF9 9E93     |1251|        LDX     <PCNTER         ; DEFAULT FOR 'P'
FCFB 8150     |1252|        CMPA    #'P             ; ? LAST PROGRAM COUNTER WANTED
FCFD 2710     |1253|        BEQ     EXPTDL          ; BRANCH IF SO
FCFF 9EA0     |1254|        LDX     <WINDOW         ; DEFAULT TO WINDOW
FD01 8157     |1255|        CMPA    #'W             ; ? WINDOW WANTED
FD03 270A     |1256|        BEQ     EXPTDL
              |1257|
FD05 3594     |1258|EXPRTN  PULS    PC,X,B          ; RETURN AND RESTORE REGISTERS
              |1259|* GOT HEX, NOW CONTINUE BUILDING
FD07 8D44     |1260|EXP2    BSR     BLDHEX          ; COMPUTE NEXT DIGIT
FD09 27FC     |1261|        BEQ     EXP2            ; CONTINUE IF MORE
FD0B 200A     |1262|        BRA     EXPCDL          ; SEARCH FOR +/-
              |1263|* STORE VALUE AND CHECK IF NEED DELIMITER
FD0D AE84     |1264|EXPTDI  LDX     ,X              ; INDIRECTION DESIRED
FD0F 9F9B     |1265|EXPTDL  STX     <NUMBER         ; STORE RESULT
FD11 0D8E     |1266|        TST     <DELIM          ; ? TO FORCE A DELIMITER
FD13 27F0     |1267|        BEQ     EXPRTN          ; RETURN IF NOT WITH VALUE
FD15 8D62     |1268|        BSR     READ            ; OBTAIN NEXT CHARACTER
              |1269|* TEST FOR + OR -
FD17 9E9B     |1270|EXPCDL  LDX     <NUMBER         ; LOAD LAST VALUE
FD19 812B     |1271|        CMPA    #'+             ; ? ADD OPERATOR
FD1B 260E     |1272|        BNE     EXPCHM          ; BRANCH NOT
FD1D 8D23     |1273|        BSR     EXPTRM          ; COMPUTE NEXT TERM
FD1F 3402     |1274|        PSHS    A               ; SAVE DELIMITER
FD21 DC9B     |1275|        LDD     <NUMBER         ; LOAD NEW TERM
FD23 308B     |1276|EXPADD  LEAX    D,X             ; ADD TO X
FD25 9F9B     |1277|        STX     <NUMBER         ; STORE AS NEW RESULT
FD27 3502     |1278|        PULS    A               ; RESTORE DELIMITER
FD29 20EC     |1279|        BRA     EXPCDL          ; NOW TEST IT
FD2B 812D     |1280|EXPCHM  CMPA    #'-             ; ? SUBTRACT OPERATOR
FD2D 2707     |1281|        BEQ     EXPSUB          ; BRANCH IF SO
FD2F 8140     |1282|        CMPA    #'@             ; ? INDIRECTION DESIRED
FD31 27DA     |1283|        BEQ     EXPTDI          ; BRANCH IF SO
FD33 5F       |1284|        CLRB                    ; SET DELIMITER RETURN
FD34 20CF     |1285|        BRA     EXPRTN          ; AND RETURN TO CALLER
FD36 8D0A     |1286|EXPSUB  BSR     EXPTRM          ; OBTAIN NEXT TERM
FD38 3402     |1287|        PSHS    A               ; SAVE DELIMITER
FD3A DC9B     |1288|        LDD     <NUMBER         ; LOAD UP NEXT TERM
FD3C 40       |1289|        NEGA                    ; NEGATE A
FD3D 50       |1290|        NEGB                    ; NEGATE B
FD3E 8200     |1291|        SBCA    #0              ; CORRECT FOR A
FD40 20E1     |1292|        BRA     EXPADD          ; GO ADD TO EXPRESSION
              |1293|* COMPUTE NEXT EXPRESSION TERM
              |1294|* OUTPUT: X=OLD VALUE
              |1295|* 'NUMBER'=NEXT TERM
FD42 8D9D     |1296|EXPTRM  BSR     BLDNUM          ; OBTAIN NEXT VALUE
FD44 2732     |1297|        BEQ     CNVRTS          ; RETURN IF VALID NUMBER
FD46 16FC13   |1298|BLDBAD  LBRA    CMDBAD          ; ABORT COMMAND IF INVALID
              |1299|
              |1300|*********************************************
              |1301|* BUILD BINARY VALUE USING INPUT CHARACTERS.
              |1302|* INPUT: A=ASCII HEX VALUE OR DELIMITER
              |1303|* SP+0=RETURN ADDRESS
              |1304|* SP+2=16 BIT RESULT AREA
              |1305|* OUTPUT: Z=1 A=BINARY VALUE
              |1306|* Z=0 IF INVALID HEX CHARACTER (A UNCHANGED)
              |1307|* VOLATILE: D
              |1308|****************************************
FD49 0F9B     |1309|BLDHXI  CLR     <NUMBER         ; CLEAR NUMBER
FD4B 0F9C     |1310|        CLR     <NUMBER+1       ; CLEAR NUMBER
FD4D 8D2A     |1311|BLDHEX  BSR     READ            ; GET INPUT CHARACTER
FD4F 8D11     |1312|BLDHXC  BSR     CNVHEX          ; CONVERT AND TEST CHARACTER
FD51 2625     |1313|        BNE     CNVRTS          ; RETURN IF NOT A NUMBER
FD53 C610     |1314|        LDB     #16             ; PREPARE SHIFT
FD55 3D       |1315|        MUL                     ; BY FOUR PLACES
FD56 8604     |1316|        LDA     #4              ; ROTATE BINARY INTO VALUE
FD58 58       |1317|BLDSHF  ASLB                    ; OBTAIN NEXT BIT
FD59 099C     |1318|        ROL     <NUMBER+1       ; INTO LOW BYTE
FD5B 099B     |1319|        ROL     <NUMBER         ; INTO HI BYTE
FD5D 4A       |1320|        DECA                    ; COUNT DOWN
FD5E 26F8     |1321|        BNE     BLDSHF          ; BRANCH IF MORE TO DO
FD60 2014     |1322|        BRA     CNVOK           ; SET GOOD RETURN CODE
              |1323|
              |1324|****************************************
              |1325|* CONVERT ASCII CHARACTER TO BINARY BYTE
              |1326|* INPUT: A=ASCII
              |1327|* OUTPUT: Z=1 A=BINARY VALUE
              |1328|* Z=0 IF INVALID
              |1329|* ALL REGISTERS TRANSPARENT
              |1330|* (A UNALTERED IF INVALID HEX)
              |1331|**************************************
FD62 8130     |1332|CNVHEX  CMPA    #'0             ; ? LOWER THAN A ZERO
FD64 2512     |1333|        BLO     CNVRTS          ; BRANCH NOT VALUE
FD66 8139     |1334|        CMPA    #'9             ; ? POSSIBLE A-F
FD68 2F0A     |1335|        BLE     CNVGOT          ; BRANCH NO TO ACCEPT
FD6A 8141     |1336|        CMPA    #'A             ; ? LESS THEN TEN
FD6C 250A     |1337|        BLO     CNVRTS          ; RETURN IF MINUS (INVALID)
FD6E 8146     |1338|        CMPA    #'F             ; ? NOT TOO LARGE
FD70 2206     |1339|        BHI     CNVRTS          ; NO, RETURN TOO LARGE
FD72 8007     |1340|        SUBA    #7              ; DOWN TO BINARY
FD74 840F     |1341|CNVGOT  ANDA    #$0F            ; CLEAR HIGH HEX
FD76 1A04     |1342|CNVOK   ORCC    #4              ; FORCE ZERO ON FOR VALID HEX
FD78 39       |1343|CNVRTS  RTS                     ; RETURN TO CALLER
              |1344|
              |1345|* GET INPUT CHAR, ABORT COMMAND IF CONTROL-X (CANCEL)
FD79 3F       |1346|READ     SWI                    ; GET NEXT CHARACTER
FD7A 00       |1347|         FCB    INCHNP          ; FUNCTION
FD7B 8118     |1348|         CMPA   #CAN            ; ? ABORT COMMAND
FD7D 27C7     |1349|         BEQ    BLDBAD          ; BRANCH TO ABORT IF SO
FD7F 39       |1350|         RTS                    ; RETURN TO CALLER
              |1351|*G
              |1352|
              |1353|***************GO - START PROGRAM EXECUTION
FD80 8D01     |1354|CGO      BSR    GOADDR          ; BUILD ADDRESS IF NEEDED
FD82 3B       |1355|         RTI                    ; START EXECUTING
              |1356|
              |1357|* FIND OPTIONAL NEW PROGRAM COUNTER. ALSO ARM THE
              |1358|* BREAKPOINTS.
FD83 3530     |1359|GOADDR   PULS   Y,X             ; RECOVER RETURN ADDRESS
FD85 3410     |1360|         PSHS   X               ; STORE RETURN BACK
FD87 2619     |1361|         BNE    GONDFT          ; IF NO CARRIAGE RETURN THEN NEW PC
              |1362|
              |1363|* DEFAULT PROGRAM COUNTER, SO FALL THROUGH IF
              |1364|* IMMEDIATE BREAKPOINT.
FD89 1701B6   |1365|         LBSR   CBKLDR          ; SEARCH BREAKPOINTS
FD8C AE6C     |1366|         LDX    12,S            ; LOAD PROGRAM COUNTER
FD8E 5A       |1367|ARMBLP  DECB                    ; COUNT DOWN
FD8F 2B16     |1368|        BMI     ARMBK2          ; DONE, NONE TO SINGLE TRACE
FD91 A630     |1369|        LDA     -NUMBKP*2,Y     ; PRE-FETCH OPCODE
FD93 ACA1     |1370|        CMPX    ,Y++            ; ? IS THIS A BREAKPOINT
FD95 26F7     |1371|        BNE     ARMBLP          ; LOOP IF NOT
FD97 813F     |1372|        CMPA    #$3F            ; ? SWI BREAKPOINTED
FD99 2602     |1373|        BNE     ARMNSW          ; NO, SKIP SETTING OF PASS FLAG
FD9B 97FB     |1374|        STA     <SWIBFL         ; SHOW UPCOMING SWI NOT BRKPNT
FD9D 0C8F     |1375|ARMNSW  INC     <MISFLG         ; FLAG THRU A BREAKPOINT
FD9F 160106   |1376|        LBRA    CDOT            ; DO SINGLE TRACE W/O BREAKPOINTS
              |1377|
              |1378|* OBTAIN NEW PROGRAM COUNTER
FDA2 1700BB   |1379|GONDFT  LBSR    CDNUM           ; OBTAIN NEW PROGRAM COUNTER
FDA5 ED6C     |1380|        STD     12,S            ; STORE INTO STACK
FDA7 170198   |1381|ARMBK2  LBSR    CBKLDR          ; OBTAIN TABLE
FDAA 00FA     |1382|        NEG     <BKPTCT         ; COMPLEMENT TO SHOW ARMED
FDAC 5A       |1383|ARMLOP  DECB                    ; ? DONE
FDAD 2BC9     |1384|        BMI     CNVRTS          ; RETURN WHEN DONE
FDAF A6B4     |1385|        LDA     [,Y]            ; LOAD OPCODE
FDB1 A730     |1386|        STA     -NUMBKP*2,Y     ; STORE INTO OPCODE TABLE
FDB3 863F     |1387|        LDA     #$3F            ; READY "SWI" OPCODE
FDB5 A7B1     |1388|        STA     [,Y++]          ; STORE AND MOVE UP TABLE
FDB7 20F3     |1389|        BRA     ARMLOP          ; AND CONTINUE
              |1390|
              |1391|*******************CALL - CALL ADDRESS AS SUBROUTINE
FDB9 8DC8     |1392|CCALL   BSR     GOADDR          ; FETCH ADDRESS IF NEEDED
FDBB 357F     |1393|        PULS    U,Y,X,DP,D,CC   ; RESTORE USERS REGISTERS
FDBD ADF1     |1394|        JSR     [,S++]          ; CALL USER SUBROUTINE
FDBF 3F       |1395|CGOBRK  SWI                     ; PERFORM BREAKPOINT
FDC0 0A       |1396|        FCB     BRKPT           ; FUNCTION
FDC1 20FC     |1397|        BRA     CGOBRK          ; LOOP UNTIL USER CHANGES PC
              |1398|
              |1399|****************MEMORY - DISPLAY/CHANGE MEMORY
              |1400|* CMEMN AND CMPADP ARE DIRECT ENTRY POINTS FROM
              |1401|* THE COMMAND HANDLER FOR QUICK COMMANDS
FDC3 17009A   |1402|CMEM    LBSR    CDNUM           ; OBTAIN ADDRESS
FDC6 DD9E     |1403|CMEMN   STD     <ADDR           ; STORE DEFAULT
FDC8 9E9E     |1404|CMEM2   LDX     <ADDR           ; LOAD POINTER
FDCA 17FC0C   |1405|        LBSR    ZOUT2H          ; SEND OUT HEX VALUE OF BYTE
FDCD 862D     |1406|        LDA     #'-             ; LOAD DELIMITER
FDCF 3F       |1407|        SWI                     ; SEND OUT
FDD0 01       |1408|        FCB     OUTCH           ; FUNCTION
FDD1 17FF0B   |1409|CMEM4   LBSR    BLDNNB          ; OBTAIN NEW BYTE VALUE
FDD4 270A     |1410|        BEQ     CMENUM          ; BRANCH IF NUMBER
              |1411|* COMA - SKIP BYTE
FDD6 812C     |1412|        CMPA    #',             ; ? COMMA
FDD8 260E     |1413|        BNE     CMNOTC          ; BRANCH NOT
FDDA 9F9E     |1414|        STX     <ADDR           ; UPDATE POINTER
FDDC 3001     |1415|        LEAX    1,X             ; TO NEXT BYTE
FDDE 20F1     |1416|        BRA     CMEM4           ; AND INPUT IT
FDE0 D69C     |1417|CMENUM  LDB     <NUMBER+1       ; LOAD LOW BYTE VALUE
FDE2 8D47     |1418|        BSR     MUPDAT          ; GO OVERLAY MEMORY BYTE
FDE4 812C     |1419|        CMPA    #',             ; ? CONTINUE WITH NO DISPLAY
FDE6 27E9     |1420|        BEQ     CMEM4           ; BRANCH YES
              |1421|* QUOTED STRING
FDE8 8127     |1422|CMNOTC  CMPA    #$27            ; ? QUOTED STRING
FDEA 260C     |1423|        BNE     CMNOTQ          ; BRANCH NO
FDEC 8D8B     |1424|CMESTR  BSR     READ            ; OBTAIN NEXT CHARACTER
FDEE 8127     |1425|        CMPA    #$27            ; ? END OF QUOTED STRING
FDF0 270C     |1426|        BEQ     CMSPCE          ; YES, QUIT STRING MODE
FDF2 1F89     |1427|        TFR     A,B             ; TO B FOR SUBROUTINE
FDF4 8D35     |1428|        BSR     MUPDAT          ; GO UPDATE BYTE
FDF6 20F4     |1429|        BRA     CMESTR          ; GET NEXT CHARACTER
              |1430|* BLANK - NEXT BYTE
FDF8 8120     |1431|CMNOTQ  CMPA    #$20            ; ? BLANK FOR NEXT BYTE
FDFA 2606     |1432|        BNE     CMNOTB          ; BRANCH NOT
FDFC 9F9E     |1433|        STX     <ADDR           ; UPDATE POINTER
FDFE 3F       |1434|CMSPCE  SWI                     ; GIVE SPACE
FDFF 07       |1435|        FCB     SPACE           ; FUNCTION
FE00 20C6     |1436|        BRA     CMEM2           ; NOW PROMPT FOR NEXT
              |1437|
              |1438|* LINE FEED - NEXT BYTE WITH ADDRESS
FE02 810A     |1439|CMNOTB  CMPA    #LF             ; ? LINE FEED FOR NEXT BYTE
FE04 2608     |1440|        BNE     CMNOTL          ; BRANCH NO
FE06 860D     |1441|        LDA     #CR             ; GIVE CARRIAGE RETURN
FE08 3F       |1442|        SWI                     ; TO CONSOLE
FE09 01       |1443|        FCB     OUTCH           ; HANDLER
FE0A 9F9E     |1444|        STX     <ADDR           ; STORE NEXT ADDRESS
FE0C 200A     |1445|        BRA     CMPADP          ; BRANCH TO SHOW
              |1446|
              |1447|* UP ARROW - PREVIOUS BYTE AND ADDRESS
FE0E 815E     |1448|CMNOTL  CMPA    #'^             ; ? UP ARROW FOR PREVIOUS BYTE
FE10 260A     |1449|        BNE     CMNOTU          ; BRANCH NOT
FE12 301E     |1450|        LEAX    -2,X            ; DOWN TO PREVIOUS BYTE
FE14 9F9E     |1451|        STX     <ADDR           ; STORE NEW POINTER
FE16 3F       |1452|CMPADS  SWI                     ; FORCE NEW LINE
FE17 06       |1453|        FCB     PCRLF           ; FUNCTION
FE18 8D07     |1454|CMPADP  BSR     PRTADR          ; GO PRINT ITS VALUE
FE1A 20AC     |1455|        BRA     CMEM2           ; THEN PROMPT FOR INPUT
              |1456|
              |1457|* SLASH - NEXT BYTE WITH ADDRESS
FE1C 812F     |1458|CMNOTU  CMPA    #'/             ; ? SLASH FOR CURRENT DISPLAY
FE1E 27F6     |1459|        BEQ     CMPADS          ; YES, SEND ADDRESS
FE20 39       |1460|        RTS                     ; RETURN FROM COMMAND
              |1461|
              |1462|* PRINT CURRENT ADDRESS
FE21 9E9E     |1463|PRTADR  LDX     <ADDR           ; LOAD POINTER VALUE
FE23 3410     |1464|        PSHS    X               ; SAVE X ON STACK
FE25 30E4     |1465|        LEAX    ,S              ; POINT TO IT FOR DISPLAY
FE27 3F       |1466|        SWI                     ; DISPLAY POINTER IN HEX
FE28 05       |1467|        FCB     OUT4HS          ; FUNCTION
FE29 3590     |1468|        PULS    PC,X            ; RECOVER POINTER AND RETURN
              |1469|
              |1470|* UPDATE BYTE
FE2B 9E9E     |1471|MUPDAT  LDX     <ADDR           ; LOAD NEXT BYTE POINTER
FE2D E780     |1472|        STB     ,X+             ; STORE AND INCREMENT X
FE2F E11F     |1473|        CMPB    -1,X            ; ? SUCCESFULL STORE
FE31 2603     |1474|        BNE     MUPBAD          ; BRANCH FOR '?' IF NOT
FE33 9F9E     |1475|        STX     <ADDR           ; STORE NEW POINTER VALUE
FE35 39       |1476|        RTS                     ; BACK TO CALLER
FE36 3402     |1477|MUPBAD  PSHS    A               ; SAVE A REGISTER
FE38 863F     |1478|        LDA     #'?             ; SHOW INVALID
FE3A 3F       |1479|        SWI                     ; SEND OUT
FE3B 01       |1480|        FCB     OUTCH           ; FUNCTION
FE3C 3582     |1481|        PULS    PC,A            ; RETURN TO CALLER
              |1482|
              |1483|********************WINDOW - SET WINDOW VALUE
FE3E 8D20     |1484|CWINDO  BSR     CDNUM           ; OBTAIN WINDOW VALUE
FE40 DDA0     |1485|        STD     <WINDOW         ; STORE IT IN
FE42 39       |1486|        RTS                     ; END COMMAND
              |1487|
              |1488|******************DISPLAY - HIGH SPEED DISPLAY MEMORY
FE43 8D1B     |1489|CDISP   BSR     CDNUM           ; FETCH ADDRESS
FE45 C4F0     |1490|        ANDB    #$F0            ; FORCE TO 16 BOUNDARY
FE47 1F02     |1491|        TFR     D,Y             ; SAVE IN Y
FE49 302F     |1492|        LEAX    15,Y            ; DEFAULT LENGTH
FE4B 2504     |1493|        BCS     CDISPS          ; BRANCH IF END OF INPUT
FE4D 8D11     |1494|        BSR     CDNUM           ; OBTAIN COUNT
FE4F 30AB     |1495|        LEAX    D,Y             ; ASSUME COUNT, COMPUTE END ADDR
FE51 3430     |1496|CDISPS  PSHS    Y,X             ; SETUP PARAMETERS FOR HSDATA
FE53 10A362   |1497|        CMPD    2,S             ; ? WAS IT COUNT
FE56 2302     |1498|        BLS     CDCNT           ; BRANCH YES
FE58 EDE4     |1499|        STD     ,S              ; STORE HIGH ADDRESS
FE5A AD9D6284 |1500|CDCNT   JSR     [VECTAB+.HSDTA,PCR] ; CALL PRINT ROUTINE
FE5E 35E0     |1501|        PULS    PC,U,Y          ; CLEAN STACK AND END COMMAND
              |1502|
              |1503|* OBTAIN NUMBER - ABORT IF NONE
              |1504|* ONLY DELIMITERS OF CR, BLANK, OR '/' ARE ACCEPTED
              |1505|* OUTPUT: D=VALUE, C=1 IF CARRIAGE RETURN DELMITER,
              |1506|* ELSE C=0
FE60 17FE7E   |1507|CDNUM   LBSR    BLDNUM          ; OBTAIN NUMBER
FE63 2609     |1508|        BNE     CDBADN          ; BRANCH IF INVALID
FE65 812F     |1509|        CMPA    #'/             ; ? VALID DELIMITER
FE67 2205     |1510|        BHI     CDBADN          ; BRANCH IF NOT FOR ERROR
FE69 810E     |1511|        CMPA    #CR+1           ; LEAVE COMPARE FOR CARRIAGE RET
FE6B DC9B     |1512|        LDD     <NUMBER         ; LOAD NUMBER
FE6D 39       |1513|        RTS                     ; RETURN WITH COMPARE
FE6E 16FAEB   |1514|CDBADN  LBRA    CMDBAD          ; RETURN TO ERROR MECHANISM
              |1515|
              |1516|*****************PUNCH - PUNCH MEMORY IN S1-S9 FORMAT
FE71 8DED     |1517|CPUNCH  BSR     CDNUM           ; OBTAIN START ADDRESS
FE73 1F02     |1518|        TFR     D,Y             ; SAVE IN Y
FE75 8DE9     |1519|        BSR     CDNUM           ; OBTAIN END ADDRESS
FE77 6FE2     |1520|        CLR     ,-S             ; SETUP PUNCH FUNCTION CODE
FE79 3426     |1521|        PSHS    Y,D             ; STORE VALUES ON STACK
FE7B AD9D6265 |1522|CCALBS  JSR     [VECTAB+.BSON,PCR] ; INITIALIZE HANDLER
FE7F AD9D6263 |1523|        JSR     [VECTAB+.BSDTA,PCR] ; PERFORM FUNCTION
FE83 3401     |1524|        PSHS    CC              ; SAVE RETURN CODE
FE85 AD9D625F |1525|        JSR     [VECTAB+.BSOFF,PCR] ; TURN OFF HANDLER
FE89 3501     |1526|        PULS    CC              ; OBTAIN CONDITION CODE SAVED
FE8B 26E1     |1527|        BNE     CDBADN          ; BRANCH IF ERROR
FE8D 35B2     |1528|        PULS    PC,Y,X,A        ; RETURN FROM COMMAND
              |1529|
              |1530|*****************LOAD - LOAD MEMORY FROM S1-S9 FORMAT
FE8F 8D01     |1531|CLOAD   BSR     CLVOFS          ; CALL SETUP AND PASS CODE
FE91 01       |1532|        FCB     1               ; LOAD FUNCTION CODE FOR PACKET
              |1533|
FE92 33F1     |1534|CLVOFS  LEAU    [,S++]          ; LOAD CODE IN HIGH BYTE OF U
FE94 33D4     |1535|        LEAU    [,U]            ; NOT CHANGING CC AND RESTORE S
FE96 2703     |1536|        BEQ     CLVDFT          ; BRANCH IF CARRIAGE RETURN NEXT
FE98 8DC6     |1537|        BSR     CDNUM           ; OBTAIN OFFSET
FE9A 8C       |1538|        FCB     SKIP2           ; SKIP DEFAULT OFFSET
FE9B 4F       |1539|CLVDFT  CLRA                    ; CREATE ZERO OFFSET
FE9C 5F       |1540|        CLRB                    ; AS DEFAULT
FE9D 344E     |1541|        PSHS    U,DP,D          ; SETUP CODE, NULL WORD, OFFSET
FE9F 20DA     |1542|        BRA     CCALBS          ; ENTER CALL TO BS ROUTINES
              |1543|
              |1544|******************VERIFY - COMPARE MEMORY WITH FILES
FEA1 8DEF     |1545|CVER    BSR     CLVOFS          ; COMPUTE OFFSET IF ANY
FEA3 FF       |1546|        FCB     -1              ; VERIFY FNCTN CODE FOR PACKET
              |1547|
              |1548|*******************TRACE - TRACE INSTRUCTIONS
              |1549|******************* . - SINGLE STEP TRACE
FEA4 8DBA     |1550|CTRACE  BSR     CDNUM           ; OBTAIN TRACE COUNT
FEA6 DD91     |1551|        STD     <TRACEC         ; STORE COUNT
FEA8 3262     |1552|CDOT    LEAS    2,S             ; RID COMMAND RETURN FROM STACK
FEAA EEF80A   |1553|CTRCE3  LDU     [10,S]          ; LOAD OPCODE TO EXECUTE
FEAD DF99     |1554|        STU     <LASTOP         ; STORE FOR TRACE INTERRUPT
FEAF DEF6     |1555|        LDU     <VECTAB+.PTM    ; LOAD PTM ADDRESS
FEB1 CC0701   |1556|        LDD     #$0701          ; 7,1 CYCLES DOWN+CYCLES UP
FEB4 ED42     |1557|        STD     PTMTM1-PTM,U    ; START NMI TIMEOUT
FEB6 3B       |1558|        RTI                     ; RETURN FOR ONE INSTRUCTION
              |1559|
              |1560|*************NULLS  -  SET NEW LINE AND CHAR PADDING
FEB7 8DA7     |1561|CNULLS  BSR     CDNUM           ; OBTAIN NEW LINE PAD
FEB9 DDF2     |1562|        STD     <VECTAB+.PAD    ; RESET VALUES
FEBB 39       |1563|        RTS                     ; END COMMAND
              |1564|
              |1565|******************STLEVEL - SET STACK TRACE LEVEL
FEBC 2705     |1566|CSTLEV  BEQ     STLDFT          ; TAKE DEFAULT
FEBE 8DA0     |1567|        BSR     CDNUM           ; OBTAIN NEW STACK LEVEL
FEC0 DDF8     |1568|        STD     <SLEVEL         ; STORE NEW ENTRY
FEC2 39       |1569|        RTS                     ; TO COMMAND HANDLER
FEC3 306E     |1570|STLDFT  LEAX    14,S            ; COMPUTE NMI COMPARE
FEC5 9FF8     |1571|        STX     <SLEVEL         ; AND STORE IT
FEC7 39       |1572|        RTS                     ; END COMMAND
              |1573|
              |1574|******************OFFSET - COMPUTE SHORT AND LONG
              |1575|******************                  BRANCH OFFSETS
FEC8 8D96     |1576|COFFS   BSR     CDNUM           ; OBTAIN INSTRUCTION ADDRESS
FECA 1F01     |1577|        TFR     D,X             ; USE AS FROM ADDRESS
FECC 8D92     |1578|        BSR     CDNUM           ; OBTAIN TO ADDRESS
              |1579|* D=TO INSTRUCTION, X=FROM INSTRUCTION OFFSET BYTE(S)
FECE 3001     |1580|        LEAX    1,X             ; ADJUST FOR *+2 SHORT BRANCH
FED0 3430     |1581|        PSHS    Y,X             ; STORE WORK WORD AND VALUE ON S
FED2 A3E4     |1582|        SUBD    ,S              ; FIND OFFSET
FED4 EDE4     |1583|        STD     ,S              ; SAVE OVER STACK
FED6 3061     |1584|        LEAX    1,S             ; POINT FOR ONE BYTE DISPLAY
FED8 1D       |1585|        SEX                     ; SIGN EXTEND LOW BYTE
FED9 A1E4     |1586|        CMPA    ,S              ; ? VALID ONE BYTE OFFSET
FEDB 2602     |1587|        BNE     COFNO1          ; BRANCH IF NOT
FEDD 3F       |1588|        SWI                     ; SHOW ONE BYTE OFFSET
FEDE 04       |1589|        FCB     OUT2HS          ; FUNCTION
FEDF EEE4     |1590|COFNO1  LDU     ,S              ; RELOAD OFFSET
FEE1 335F     |1591|        LEAU    -1,U            ; CONVERT TO LONG BRANCH OFFSET
FEE3 EF84     |1592|        STU     ,X              ; STORE BACK WHERE X POINTS NOW
FEE5 3F       |1593|        SWI                     ; SHOW TWO BYTE OFFSET
FEE6 05       |1594|        FCB     OUT4HS          ; FUNCTION
FEE7 3F       |1595|        SWI                     ; FORCE NEW LINE
FEE8 06       |1596|        FCB     PCRLF           ; FUNCTION
FEE9 3596     |1597|        PULS    PC,X,D          ; RESTORE STACK AND END COMMAND
              |1598|*H
              |1599|
              |1600|*************BREAKPOINT - DISPLAY/ENTER/DELETE/CLEAR
              |1601|*************             BREAKPOINTS
FEEB 2723     |1602|CBKPT   BEQ     CBKDSP          ; BRANCH DISPLAY OF JUST 'B'
FEED 17FDF1   |1603|        LBSR    BLDNUM          ; ATTEMPT VALUE ENTRY
FEF0 272C     |1604|        BEQ     CBKADD          ; BRANCH TO ADD IF SO
FEF2 812D     |1605|        CMPA    #'-             ; ? CORRECT DELIMITER
FEF4 263F     |1606|        BNE     CBKERR          ; NO, BRANCH FOR ERROR
FEF6 17FDE8   |1607|        LBSR    BLDNUM          ; ATTEMPT DELETE VALUE
FEF9 2703     |1608|        BEQ     CBKDLE          ; GOT ONE, GO DELETE IT
FEFB 0FFA     |1609|        CLR     <BKPTCT         ; WAS 'B -', SO ZERO COUNT
FEFD 39       |1610|CBKRTS  RTS                     ; END COMMAND
              |1611|* DELETE THE ENTRY
FEFE 8D40     |1612|CBKDLE  BSR     CBKSET          ; SETUP REGISTERS AND VALUE
FF00 5A       |1613|CBKDLP  DECB                    ; ? ANY ENTRIES IN TABLE
FF01 2B32     |1614|        BMI     CBKERR          ; BRANCH NO, ERROR
FF03 ACA1     |1615|        CMPX    ,Y++            ; ? IS THIS THE ENTRY
FF05 26F9     |1616|        BNE     CBKDLP          ; NO, TRY NEXT
              |1617|* FOUND, NOW MOVE OTHERS UP IN ITS PLACE
FF07 AEA1     |1618|CBKDLM  LDX     ,Y++            ; LOAD NEXT ONE UP
FF09 AF3C     |1619|        STX     -4,Y            ; MOVE DOWN BY ONE
FF0B 5A       |1620|        DECB                    ; ? DONE
FF0C 2AF9     |1621|        BPL     CBKDLM          ; NO, CONTINUE MOVE
FF0E 0AFA     |1622|        DEC     <BKPTCT         ; DECREMENT BREAKPOINT COUNT
FF10 8D2E     |1623|CBKDSP  BSR     CBKSET          ; SETUP REGISTERS AND LOAD VALUE
FF12 27E9     |1624|        BEQ     CBKRTS          ; RETURN IF NONE TO DISPLY
FF14 30A1     |1625|CBKDSL  LEAX    ,Y++            ; POINT TO NEXT ENTRY
FF16 3F       |1626|        SWI                     ; DISPLAY IN HEX
FF17 05       |1627|        FCB     OUT4HS          ; FUNCTION
FF18 5A       |1628|        DECB                    ; COUNT DOWN
FF19 26F9     |1629|        BNE     CBKDSL          ; LOOP IF NGABLE RAM
FF1B 3F       |1630|        SWI                     ; SKIP TO NEW LINK
FF1C 06       |1631|        FCB     PCRLF           ; FUNCTIONRTS
FF1D 39       |1632|        RTS
              |1633|
              |1634|* ADD NEW ENTRY
FF1E 8D20     |1635|CBKADD  BSR     CBKSET          ; SETUP REGISTERS
FF20 C108     |1636|        CMPB    #NUMBKP         ; ? ALREADY FULL
FF22 2711     |1637|        BEQ     CBKERR          ; BRANCH ERROR IF SO
FF24 A684     |1638|        LDA     ,X              ; LOAD BYTE TO TRAP
FF26 E784     |1639|        STB     ,X              ; TRY TO CHANGE
FF28 E184     |1640|        CMPB    ,X              ; ? CHANGEABLE RAM
FF2A 2609     |1641|        BNE     CBKERR          ; BRANCH ERROR IF NOT
FF2C A784     |1642|        STA ,X                  ; RESTORE BYTE
FF2E 5A       |1643|CBKADL  DECB                    ; COUNT DOWN
FF2F 2B07     |1644|        BMI     CBKADT          ; BRANCH IF DONE TO ADD IT
FF31 ACA1     |1645|        CMPX    ,Y++            ; ? ENTRY ALREADY HERE
FF33 26F9     |1646|        BNE     CBKADL          ; LOOP IF NOT
FF35 16FA24   |1647|CBKERR  LBRA    CMDBAD          ; RETURN TO ERROR PRODUCE
FF38 AFA4     |1648|CBKADT  STX ,Y                  ; ADD THIS ENTRY
FF3A 6F31     |1649|        CLR     -NUMBKP*2+1,Y   ; CLEAR OPTIONAL BYTE
FF3C 0CFA     |1650|        INC     <BKPTCT         ; ADD ONE TO COUNT
FF3E 20D0     |1651|        BRA     CBKDSP          ; AND NOW DISPLAY ALL OF 'EM
              |1652|* SETUP REGISTERS FOR SCAN
FF40 9E9B     |1653|CBKSET  LDX     <NUMBER         ; LOAD VALUE DESIRED
FF42 318D616C |1654|CBKLDR  LEAY    BKPTBL,PCR      ; LOAD START OF TABLE
FF46 D6FA     |1655|        LDB     <BKPTCT         ; LOAD ENTRY COUNT
FF48 39       |1656|        RTS                     ; RETURN
              |1657|
              |1658|*****************ENCODE  -  ENCODE A POSTBYTE
FF49 6FE2     |1659|CENCDE  CLR     ,-S             ; DEFAULT TO NOT INDIRECT
FF4B 5F       |1660|        CLRB                    ; ZERO POSTBYTE VALUE
FF4C 308C3F   |1661|        LEAX    <CONV1,PCR      ; START TABLE SEARCH
FF4F 3F       |1662|        SWI                     ; OBTAIN FIRST CHARACTER
FF50 00       |1663|        FCB     INCHNP          ; FUNCTION
FF51 815B     |1664|        CMPA    #'[             ; ? INDIRECT HERE
FF53 2606     |1665|        BNE     CEN2            ; BRANCH IF NOT
FF55 8610     |1666|        LDA     #$10            ; SET INDIRECT BIT ON
FF57 A7E4     |1667|        STA     ,S              ; SAVE FOR LATER
FF59 3F       |1668|CENGET  SWI                     ; OBTAIN NEXT CHARACTER
FF5A 00       |1669|        FCB     INCHNP          ; FUNCTION
FF5B 810D     |1670|CEN2    CMPA    #CR             ; ? END OF ENTRY
FF5D 270C     |1671|        BEQ     CEND1           ; BRANCH YES
FF5F 6D84     |1672|CENLP1  TST     ,X              ; ? END OF TABLE
FF61 2BD2     |1673|        BMI     CBKERR          ; BRANCH ERROR IF SO
FF63 A181     |1674|        CMPA    ,X++            ; ? THIS THE CHARACTER
FF65 26F8     |1675|        BNE     CENLP1          ; BRANCH IF NOT
FF67 EB1F     |1676|        ADDB    -1,X            ; ADD THIS VALUE
FF69 20EE     |1677|        BRA     CENGET          ; GET NEXT INPUT
FF6B 308C49   |1678|CEND1   LEAX    <CONV2,PCR      ; POINT AT TABLE 2
FF6E 1F98     |1679|        TFR     B,A             ; SAVE COPY IN A
FF70 8460     |1680|        ANDA    #$60            ; ISOLATE REGISTER MASK
FF72 AAE4     |1681|        ORA     ,S              ; ADD IN INDIRECTION BIT
FF74 A7E4     |1682|        STA     ,S              ; SAVE BACK AS POSTBYTE SKELETON
FF76 C49F     |1683|        ANDB    #$9F            ; CLEAR REGISTER BITS
FF78 6D84     |1684|CENLP2  TST     ,X              ; ? END OF TABLE
FF7A 27B9     |1685|        BEQ     CBKERR          ; BRANCH ERROR IF SO
FF7C E181     |1686|        CMPB    ,X++            ; ? SAME VALUE
FF7E 26F8     |1687|        BNE     CENLP2          ; LOOP IF NOT
FF80 E61F     |1688|        LDB     -1,X            ; LOAD RESULT VALUE
FF82 EAE4     |1689|        ORB     ,S              ; ADD TO BASE SKELETON
FF84 E7E4     |1690|        STB     ,S              ; SAVE POSTBYTE ON STACK
FF86 30E4     |1691|        LEAX    ,S              ; POINT TO IT
FF88 3F       |1692|        SWI                     ; SEND OUT AS HEX
FF89 04       |1693|        FCB     OUT2HS          ; FUNCTION
FF8A 3F       |1694|        SWI                     ; TO NEXT LINE
FF8B 06       |1695|        FCB     PCRLF           ; FUNCTION
FF8C 3584     |1696|        PULS    PC,B            ; END OF COMMAND
              |1697|
              |1698|* TABLE ONE DEFINES VALID INPUT IN SEQUENCE
              |1699|CONV1
FF8E 41044205 |1700|        FCB     'A,$04,'B,$05,'D,$06,'H,$01
FF92 44064801
FF96 48014801 |1701|        FCB     'H,$01,'H,$01,'H,$00,',,$00
FF9A 48002C00
FF9E 2D092D01 |1702|        FCB     '-,$09,'-,$01,'S,$70,'Y,$30
FFA2 53705930
FFA6 55505810 |1703|        FCB     'U,$50,'X,$10,'+,$07,'+,$01
FFAA 2B072B01
FFAE 50804300 |1704|        FCB     'P,$80,'C,$00,'R,$00,'],$00
FFB2 52005D00
FFB6 FF       |1705|        FCB     $FF             ; END OF TABLE
              |1706|
              |1707|* CONV2 USES ABOVE CONVERSION TO SET POSTBYTE
              |1708|* BIT SKELETON.
              |1709|CONV2
FFB7 10841100 |1710|        FDB     $1084,$1100     ; R,      H,R
FFBB 12881389 |1711|        FDB     $1288,$1389     ; HH,R    HHHH,R
FFBF 14861585 |1712|        FDB     $1486,$1585     ; A,R     B,R
FFC3 168B1780 |1713|        FDB     $168B,$1780     ; D,R     ,R+
FFC7 18811982 |1714|        FDB     $1881,$1982     ; ,R++    ,-R
FFCB 1A83828C |1715|        FDB     $1A83,$828C     ; ,--R    HH,PCR
FFCF 838D039F |1716|        FDB     $838D,$039F     ; HHHH,PCR [HHHH]
FFD3 00       |1717|        FCB     0               ; END OF TABLE
              |1718|
              |1719|****************************************************
              |1720|*            DEFAULT INTERRUPT TRANSFERS           *
              |1721|****************************************************
FFD4 6E9D60EE |1722|RSRVD   JMP     [VECTAB+.RSVD,PCR]      ; RESERVED VECTOR
FFD8 6E9D60EC |1723|SWI3    JMP     [VECTAB+.SWI3,PCR]      ; SWI3 VECTOR
FFDC 6E9D60EA |1724|SWI2    JMP     [VECTAB+.SWI2,PCR]      ; SWI2 VECTOR
FFE0 6E9D60E8 |1725|FIRQ    JMP     [VECTAB+.FIRQ,PCR]      ; FIRQ VECTOR
FFE4 6E9D60E6 |1726|IRQ     JMP     [VECTAB+.IRQ,PCR]       ; IRQ VECTOR
FFE8 6E9D60E4 |1727|SWI     JMP     [VECTAB+.SWI,PCR]       ; SWI VECTOR
FFEC 6E9D60E2 |1728|NMI     JMP     [VECTAB+.NMI,PCR]       ; NMI VECTOR
              |1729|
              |1730|******************************************************
              |1731|*            ASSIST09 HARDWARE VECTOR TABLE
              |1732|* THIS TABLE IS USED IF THE ASSIST09 ROM ADDRESSES
              |1733|* THE MC6809 HARDWARE VECTORS.
              |1734|******************************************************
              |1735|        ORG     ROMBEG+ROMSIZ-16 ; SETUP HARDWARE VECTORS
FFF0 FFD4     |1736|        FDB     RSRVD           ; RESERVED SLOT
FFF2 FFD8     |1737|        FDB     SWI3            ; SOFTWARE INTERRUPT 3
FFF4 FFDC     |1738|        FDB     SWI2            ; SOFTWARE INTERRUPT 2
FFF6 FFE0     |1739|        FDB     FIRQ            ; FAST INTERRUPT REQUEST
FFF8 FFE4     |1740|        FDB     IRQ             ; INTERRUPT REQUEST
FFFA FFE8     |1741|        FDB     SWI             ; SOFTWARE INTERRUPT
FFFC FFEC     |1742|        FDB     NMI             ; NON-MASKABLE INTERRUPT
FFFE F837     |1743|        FDB     RESET           ; RESTART
